/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Medusa API
 * OpenAPI spec version: 1.0.0
 */
import type { StoreGetProductsAndItem } from './storeGetProductsAndItem';
import type { StoreGetProductsOrItem } from './storeGetProductsOrItem';
import type { StoreGetProductsCreatedAtAndItem } from './storeGetProductsCreatedAtAndItem';
import type { StoreGetProductsCreatedAtEq } from './storeGetProductsCreatedAtEq';
import type { StoreGetProductsCreatedAtNot } from './storeGetProductsCreatedAtNot';
import type { StoreGetProductsCreatedAtOrItem } from './storeGetProductsCreatedAtOrItem';
import type { StoreGetProductsUpdatedAtAndItem } from './storeGetProductsUpdatedAtAndItem';
import type { StoreGetProductsUpdatedAtEq } from './storeGetProductsUpdatedAtEq';
import type { StoreGetProductsUpdatedAtNot } from './storeGetProductsUpdatedAtNot';
import type { StoreGetProductsUpdatedAtOrItem } from './storeGetProductsUpdatedAtOrItem';
import type { StoreGetProductsVariantsOptions } from './storeGetProductsVariantsOptions';

export type StoreGetProductsParams = {
/**
 * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
 */
fields?: string;
/**
 * The number of items to skip when retrieving a list.
 */
offset?: number;
/**
 * Limit the number of items returned in the list.
 */
limit?: number;
/**
 * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
 */
order?: string;
/**
 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
 */
$and?: StoreGetProductsAndItem[];
/**
 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
 */
$or?: StoreGetProductsOrItem[];
/**
 * Search term to filter the product's searchable properties.
 */
q?: string;
id?: string | string[];
/**
 * Filter by product titles.
 */
title?: string | string[];
/**
 * Filter by product handles.
 */
handle?: string | string[];
/**
 * Whether the product is a gift card.
 */
is_giftcard?: boolean;
/**
 * Filter by a collection's ID to retrieve the products in it.
 */
collection_id?: string[];
/**
 * Filter by a tag's ID to retrieve the products in it.
 */
tag_id?: string | string[];
/**
 * Filter by a type's ID to retrieve the products in it.
 */
type_id?: string | string[];
/**
 * Filter by the product's creation date.
 */
created_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: StoreGetProductsCreatedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: StoreGetProductsCreatedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: StoreGetProductsCreatedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: StoreGetProductsCreatedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
/**
 * Filter by the product's update date.
 */
updated_at?: {
  /** Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters. */
  $and?: StoreGetProductsUpdatedAtAndItem[];
  /** Filter arrays that contain all values of this parameter. */
  $contained?: string[];
  /** Filter arrays that contain some of the values of this parameter. */
  $contains?: string[];
  $eq?: StoreGetProductsUpdatedAtEq;
  /** Filter by whether a value for this parameter exists (not `null`). */
  $exists?: boolean;
  /** Filter to apply on full-text properties. */
  $fulltext?: string;
  /** Filter by values greater than this parameter. Useful for numbers and dates only. */
  $gt?: string;
  /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
  $gte?: string;
  /** Apply a case-insensitive `like` filter. Useful for strings only. */
  $ilike?: string;
  /** Filter by values in this array. */
  $in?: string[];
  /** Apply a `like` filter. Useful for strings only. */
  $like?: string;
  /** Filter by values less than this parameter. Useful for numbers and dates only. */
  $lt?: string;
  /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
  $lte?: string;
  /** Filter by values not equal to this parameter. */
  $ne?: string;
  /** Filter by values not in this array. */
  $nin?: string[];
  $not?: StoreGetProductsUpdatedAtNot;
  /** Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters. */
  $or?: StoreGetProductsUpdatedAtOrItem[];
  /** Filter arrays that have overlapping values with this parameter. */
  $overlap?: string[];
  /** Apply a regex filter. Useful for strings only. */
  $re?: string;
};
/**
 * The ID of the region the products are being viewed from. This is required if you're retrieving product variant prices with taxes.
 */
region_id?: string;
/**
 * The province the products are being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
 */
province?: string;
sales_channel_id?: string | string[];
category_id?: string | string[];
/**
 * Filter the products' variants.
 */
variants?: {
  /** Filter by the variants' options. */
  options?: StoreGetProductsVariantsOptions;
};
/**
 * The product's country code.
 */
country_code?: string;
/**
 * The product's cart id.
 */
cart_id?: string;
};
