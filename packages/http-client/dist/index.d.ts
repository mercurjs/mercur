/** The API key's details. */
export interface AdminApiKey {
    /**
     * id
     * The api key's ID.
     */
    id: string;
    /**
     * token
     * The api key's token.
     */
    token: string;
    /**
     * redacted
     * The redacted form of the API key's token. This is useful when showing portion of the token.
     * @example "sk_...123"
     */
    redacted: string;
    /**
     * title
     * The api key's title.
     */
    title: string;
    /** The api key's type. `secret` is used for a user's API key, whereas `publishable` is used for Publishable API keys. */
    type: "secret" | "publishable";
    /**
     * last_used_at
     * The date and time the API key was last used.
     * @format date-time
     */
    last_used_at: string;
    /**
     * created_by
     * The ID of the user that created the API key, if available.
     */
    created_by: string;
    /**
     * created_at
     * The date and time the API key was created.
     * @format date-time
     */
    created_at: string;
    /**
     * revoked_by
     * The ID of the user that revoked the API key, if available.
     */
    revoked_by: string;
    /**
     * revoked_at
     * The date and time the API key was revoked. The API key is considered revoked when this property is set.
     * @format date-time
     */
    revoked_at: string;
    /**
     * updated_at
     * The date the API key was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the API key was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The API key's details. */
export interface AdminApiKeyResponse {
    /** The API key's details. */
    api_key: AdminApiKey;
}
/** The application method's details. */
export interface AdminApplicationMethod {
    promotion?: object;
    /** The application method's target rules. */
    target_rules?: AdminPromotionRule[];
    /** The application method's buy rules. */
    buy_rules?: AdminPromotionRule[];
    /**
     * id
     * The application method's ID.
     */
    id: string;
    /** The application method's type. If it's `fixed`, the promotion discounts a fixed amount. If it's `percentage`, the promotion discounts a percentage. */
    type?: "fixed" | "percentage";
    /** Which item does the promotion apply to. `items` mean the promotion applies to the cart's items; `shipping_methods` means the promotion applies to the cart's shipping methods; `order` means the promotion applies on the entire order. */
    target_type?: "items" | "shipping_methods" | "order";
    /** How is the promotion amount discounted. `each` means the discounted amount is applied on each applicable item; `across` means the discounted amount is split accross the applicable items. */
    allocation?: "each" | "across";
    /**
     * value
     * The amount to be discounted.
     */
    value?: number;
    /**
     * currency_code
     * The application method's currency code.
     * @example "usd"
     */
    currency_code?: string;
    /**
     * max_quantity
     * The max quantity allowed in the cart for the associated promotion to be applied.
     */
    max_quantity?: number;
    /**
     * buy_rules_min_quantity
     * The minimum quantity required for a `buyget` promotion to be applied. For example, if the promotion is a "Buy 2 shirts get 1 free", the value of this attribute is `2`.
     */
    buy_rules_min_quantity?: number;
    /**
     * apply_to_quantity
     * The quantity that results from matching the `buyget` promotion's condition. For example, if the promotion is a "Buy 2 shirts get 1 free", the value of this attribute is `1`.
     */
    apply_to_quantity?: number;
}
/** The details of an inventory level to create. */
export interface AdminBatchCreateInventoryItemsLocationLevels {
    /**
     * location_id
     * The ID of the associated stock location.
     */
    location_id: string;
    /**
     * inventory_item_id
     * The ID of the associated inventory item.
     */
    inventory_item_id: string;
    /**
     * stocked_quantity
     * The stocked quantity.
     */
    stocked_quantity?: number;
    /**
     * incoming_quantity
     * The incoming quantity to be added to stock.
     */
    incoming_quantity?: number;
}
/** The inventory levels to create, update, or delete. */
export interface AdminBatchInventoryItemLocationsLevel {
    /** The inventory levels to create. */
    create?: {
        /**
         * location_id
         * The ID of the associated location.
         */
        location_id: string;
        /**
         * stocked_quantity
         * The inventory level's stocked quantity.
         */
        stocked_quantity?: number;
        /**
         * incoming_quantity
         * The inventory level's incoming quantity.
         */
        incoming_quantity?: number;
    }[];
    /** The inventory levels to update. */
    update?: {
        /**
         * stocked_quantity
         * The inventory level's stocked quantity.
         */
        stocked_quantity?: number;
        /**
         * incoming_quantity
         * The inventory level's incoming quantity.
         */
        incoming_quantity?: number;
        /**
         * location_id
         * The associated stock location's ID.
         */
        location_id: string;
        /**
         * id
         * The ID of the location level.
         */
        id?: string;
    }[];
    /** The inventory levels to delete. */
    delete?: string[];
    /**
     * force
     * Whether to delete specified inventory levels even if they have a non-zero stocked quantity.
     */
    force?: boolean;
}
/** The inventory levels to manage. */
export interface AdminBatchInventoryItemsLocationLevels {
    /** The inventory levels to create. */
    create: AdminBatchCreateInventoryItemsLocationLevels[];
    /** The inventory levels to update. */
    update: AdminBatchUpdateInventoryItemsLocationLevels[];
    /** The IDs of the inventory levels to delete. */
    delete: string[];
    /**
     * force
     * Whether to delete specified inventory levels even if they have a non-zero stocked quantity.
     */
    force?: boolean;
}
/** The result of managing inventory levels. */
export interface AdminBatchInventoryItemsLocationLevelsResponse {
    /** The created inventory levels. */
    created?: InventoryLevel[];
    /** The updated inventory levels. */
    updated?: InventoryLevel[];
    /** The IDs of deleted inventory levels. */
    deleted?: string[];
}
/** The products to create, update, or delete. */
export interface AdminBatchProductRequest {
    /** The products to create. */
    create?: AdminCreateProduct[];
    /** The products to update. */
    update?: AdminBatchUpdateProduct[];
    /** The products to delete. */
    delete?: string[];
}
/** The details of the products created, updated, or deleted. */
export interface AdminBatchProductResponse {
    /** The created products */
    created: AdminProduct[];
    /** The updated products. */
    updated: AdminProduct[];
    /** The deleted products' details. */
    deleted: {
        /** The IDs of deleted products. */
        ids: string[];
        /**
         * object
         * The name of the deleted objects.
         * @default "product"
         */
        object: string;
        /**
         * deleted
         * Whether the products were deleted.
         */
        deleted: boolean;
    };
}
/** The product variants to create, update, or delete. */
export interface AdminBatchProductVariantRequest {
    /** The product variants to create. */
    create?: AdminCreateProductVariant[];
    /** The product variants to update. */
    update?: AdminBatchUpdateProductVariant[];
    /** The product variants to delete. */
    delete?: string[];
}
/** The details of the product variants created, updated, or deleted. */
export interface AdminBatchProductVariantResponse {
    /** The created product variants. */
    created: AdminProductVariant[];
    /** The updated product variants. */
    updated: AdminProductVariant[];
    /** The details of the deleted product variants. */
    deleted: {
        /** The IDs of the deleted product variants. */
        ids: string[];
        /**
         * object
         * The name of the deleted objects.
         * @default "variant"
         */
        object: string;
        /**
         * deleted
         * Whether the product variants were deleted.
         */
        deleted: boolean;
    };
}
/** The details of an inventory level to update. */
export interface AdminBatchUpdateInventoryItemsLocationLevels {
    /**
     * location_id
     * The ID of the associated stock location.
     */
    location_id: string;
    /**
     * inventory_item_id
     * The ID of the associated inventory item.
     */
    inventory_item_id: string;
    /**
     * stocked_quantity
     * The stocked quantity.
     */
    stocked_quantity?: number;
    /**
     * incoming_quantity
     * The incoming quantity to be added to stock.
     */
    incoming_quantity?: number;
    /**
     * id
     * The update's ID.
     */
    id?: string;
}
/** The product's details. */
export interface AdminBatchUpdateProduct {
    /**
     * title
     * The product's title.
     */
    title?: string;
    /**
     * subtitle
     * The product's subtitle.
     */
    subtitle?: string;
    /**
     * description
     * The product's description.
     */
    description?: string;
    /**
     * is_giftcard
     * Whether the product is a gift card.
     */
    is_giftcard?: boolean;
    /**
     * discountable
     * Whether discounts can be applied on the product.
     */
    discountable?: boolean;
    /** The product's images. */
    images?: {
        /**
         * url
         * The image's URL.
         */
        url: string;
    }[];
    /**
     * thumbnail
     * The product's thumbnail URL.
     */
    thumbnail?: string;
    /**
     * handle
     * The product's unique handle.
     */
    handle?: string;
    /** The product's status. */
    status?: "draft" | "proposed" | "published" | "rejected";
    /**
     * type_id
     * The ID of the product's type.
     */
    type_id?: string;
    /**
     * collection_id
     * The ID of the product's collection.
     */
    collection_id?: string;
    /** The product's categories. */
    categories?: {
        /**
         * id
         * The category's ID.
         */
        id: string;
    }[];
    /** The product's tags. */
    tags?: {
        /**
         * id
         * The tag's ID.
         */
        id: string;
    }[];
    /** The product's options. */
    options?: AdminUpdateProductOption[];
    /** The product's variants. You can add new variants or update existing ones, passing their IDs in the object. */
    variants?: (AdminCreateProductVariant | AdminUpdateProductVariant)[];
    /** The sales channels that the product is available in. */
    sales_channels?: {
        /**
         * id
         * The sales channel's ID.
         */
        id: string;
    }[];
    /**
     * weight
     * The product's weight.
     */
    weight?: number;
    /**
     * length
     * The product's length.
     */
    length?: number;
    /**
     * height
     * The product's height.
     */
    height?: number;
    /**
     * width
     * The product's width.
     */
    width?: number;
    /**
     * hs_code
     * The product's HS code.
     */
    hs_code?: string;
    /**
     * mid_code
     * The product's MID code.
     */
    mid_code?: string;
    /**
     * origin_country
     * The product's origin country.
     */
    origin_country?: string;
    /**
     * material
     * The product's material.
     */
    material?: string;
    /** The product's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * external_id
     * The ID of the product in an external or third-party system.
     */
    external_id?: string;
    /**
     * id
     * The product's ID.
     */
    id: string;
    /**
     * shipping_profile_id
     * The ID of the product's shipping profile.
     */
    shipping_profile_id?: string;
}
/** The properties to update of a product variant. */
export interface AdminBatchUpdateProductVariant {
    /**
     * title
     * The product variant's title.
     */
    title?: string;
    /**
     * sku
     * The product variant's SKU.
     */
    sku?: string;
    /**
     * ean
     * The product variant's EAN.
     */
    ean?: string;
    /**
     * upc
     * The product variant's UPC.
     */
    upc?: string;
    /**
     * barcode
     * The product variant's barcode.
     */
    barcode?: string;
    /**
     * hs_code
     * The product variant's HS code.
     */
    hs_code?: string;
    /**
     * mid_code
     * The product variant's MID code.
     */
    mid_code?: string;
    /**
     * allow_backorder
     * Whether customers can order the variant even if it's not in stock.
     */
    allow_backorder?: boolean;
    /**
     * manage_inventory
     * Whether the Medusa application manages the variant's inventory. If disabled, the product variant is always considered in stock.
     */
    manage_inventory?: boolean;
    /**
     * variant_rank
     * The product variant's rank among its siblings.
     */
    variant_rank?: number;
    /**
     * weight
     * The product variant's weight.
     */
    weight?: number;
    /**
     * length
     * The product variant's length.
     */
    length?: number;
    /**
     * height
     * The product variant's height.
     */
    height?: number;
    /**
     * width
     * The product variant's width.
     */
    width?: number;
    /**
     * origin_country
     * The product variant's origin country.
     */
    origin_country?: string;
    /**
     * material
     * The product variant's material.
     */
    material?: string;
    /** The product variant's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The product variant's prices. */
    prices?: AdminCreateProductVariantPrice[];
    /** The product variant's options. */
    options?: object;
    /**
     * id
     * The update's ID.
     */
    id: string;
}
/** The campaign's details. */
export interface AdminCampaign {
    /**
     * id
     * The campaign's ID.
     */
    id: string;
    /**
     * name
     * The campaign's name.
     */
    name: string;
    /**
     * description
     * The campaign's description.
     */
    description: string;
    /**
     * currency
     * The campaign's currency.
     */
    currency: string;
    /**
     * campaign_identifier
     * The campaign's identifier.
     */
    campaign_identifier: string;
    /**
     * starts_at
     * The date and time that the campaign starts.
     */
    starts_at: string;
    /**
     * ends_at
     * The date and time that the campaign ends.
     */
    ends_at: string;
    /** The campaign's budget. */
    budget: {
        /**
         * id
         * The budget's ID.
         */
        id: string;
        /** The budget's type. `spend` means the limit is set on the total amount discounted by the campaign's promotions; `usage` means the limit is set on the total number of times the campaign's promotions can be used. */
        type: "spend" | "usage";
        /**
         * currency_code
         * The budget's currency code.
         */
        currency_code: string;
        /**
         * limit
         * The budget's limit.
         */
        limit: number;
        /**
         * used
         * How much of the budget has been used. If the limit is `spend`, this property holds the total amount discounted so far. If the limit is `usage`, it holds the number of times the campaign's promotions have been used so far.
         */
        used: number;
    };
    /**
     * created_at
     * The date the campaign was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the campaign was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the campaign was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The campaign's details. */
export interface AdminCampaignResponse {
    /** The campaign's details. */
    campaign: AdminCampaign;
}
/** The claim's details. */
export interface AdminClaim {
    /**
     * id
     * The claim's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order associated with the claim.
     */
    order_id: string;
    /** The order items targetted by the claim. */
    claim_items: BaseClaimItem[];
    /** The outbound or new items of the claim. */
    additional_items: BaseClaimItem[];
    /** The return's details. */
    return: AdminReturn;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id?: string;
    /**
     * no_notification
     * Whether the customer should be notified about changes in the claim.
     */
    no_notification?: boolean;
    /**
     * refund_amount
     * The amount to be refunded.
     */
    refund_amount?: number;
    /**
     * display_id
     * The claim's display ID.
     */
    display_id: number;
    /** The claim's shipping methods. */
    shipping_methods?: AdminOrderShippingMethod[];
    /** The claim's transactions. */
    transactions?: BaseOrderTransaction[];
    /** The claim's metadata, used to store custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The claim's creation date.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The claim's update date.
     * @format date-time
     */
    updated_at: string;
    /** The order's details. */
    order: AdminOrder;
    /** The claim's type. */
    type: "replace" | "refund";
    /**
     * order_version
     * The version of the order when the claim is applied.
     */
    order_version: string;
    /**
     * created_by
     * The ID of the user that created the claim.
     */
    created_by?: string;
    /**
     * canceled_at
     * The date the claim was canceled.
     * @format date-time
     */
    canceled_at: string;
    /**
     * deleted_at
     * The date the claim was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The details of the deleted claim. */
export interface AdminClaimDeleteResponse {
    /**
     * id
     * The claim's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "claim"
     */
    object: string;
    /**
     * deleted
     * Whether the claim was deleted.
     */
    deleted: boolean;
}
/** The paginated list of claims. */
export interface AdminClaimListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of claims. */
    claims: AdminClaim[];
}
/** The created claim's details. */
export interface AdminClaimOrderResponse {
    /** The order change's order. */
    order: Order;
    /** The claim's details. */
    claim: AdminClaim;
}
/** The details of the claim, as well as a preview of the order when the claim is applied. */
export interface AdminClaimPreviewResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The claim's details. */
    claim: AdminClaim;
}
/** The details of the claim, its return, and a preview of the order when the claim is applied. */
export interface AdminClaimRequestResponse {
    /** The return's details. */
    return: AdminReturn;
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The claim's details. */
    claim: AdminClaim;
}
/** The claim's details. */
export interface AdminClaimResponse {
    /** The claim's details. */
    claim: AdminClaim;
}
/** The details of the claim's return, with a preview of the order when the claim's return is applied. */
export interface AdminClaimReturnPreviewResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The return's details. */
    return: AdminReturn;
}
/** The product collection's details. */
export interface AdminCollection {
    /**
     * id
     * The collection's ID.
     */
    id: string;
    /**
     * title
     * The collection's title.
     */
    title: string;
    /**
     * handle
     * The collection's handle.
     */
    handle: string;
    /**
     * created_at
     * The collection's creation date.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The collection's update date.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The collection's deletion date.
     * @format date-time
     */
    deleted_at: string;
    /** The collection's products. */
    products?: BaseProduct[];
    /** The collection's metadata, used to store custom key-value pairs. */
    metadata: object;
}
/** The details of the deleted collection. */
export interface AdminCollectionDeleteResponse {
    /**
     * id
     * The collection's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "collection"
     */
    object: string;
    /**
     * deleted
     * Whether the collection was deleted.
     */
    deleted: boolean;
}
/** The paginated list of product collections. */
export interface AdminCollectionListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned results.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of product collections. */
    collections: AdminCollection[];
}
/** The collection's details. */
export interface AdminCollectionResponse {
    /** The product collection's details. */
    collection: AdminCollection;
}
/** The API key's details. */
export interface AdminCreateApiKey {
    /**
     * title
     * The API key's title.
     */
    title: string;
    /** The API key's type. Use `secret` for a user's API key; Use `publishable` for Publishable API keys. */
    type: "publishable" | "secret";
}
/** the product collection's details. */
export interface AdminCreateCollection {
    /**
     * title
     * The collection's title.
     */
    title: string;
    /**
     * handle
     * The collection's handle.
     */
    handle?: string;
    /** The collection's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The customer group's details. */
export interface AdminCreateCustomerGroup {
    /**
     * name
     * The customer group's name.
     */
    name: string;
    /** The customer group's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The filfillment's details. */
export interface AdminCreateFulfillment {
    /**
     * location_id
     * The ID of the location the items are fulfilled from.
     */
    location_id: string;
    /**
     * provider_id
     * The ID of the provider handling this fulfillment.
     */
    provider_id: string;
    /** The address to deliver the items to. */
    delivery_address: {
        /**
         * first_name
         * The customer's first name.
         */
        first_name?: string;
        /**
         * last_name
         * The customer's last name.
         */
        last_name?: string;
        /**
         * phone
         * The customer's phone.
         */
        phone?: string;
        /**
         * company
         * The delivery address's company.
         */
        company?: string;
        /**
         * address_1
         * The delivery address's first line.
         */
        address_1?: string;
        /**
         * address_2
         * The delivery address's second line.
         */
        address_2?: string;
        /**
         * city
         * The delivery address's city.
         */
        city?: string;
        /**
         * country_code
         * The delivery address's country code.
         */
        country_code?: string;
        /**
         * province
         * The delivery address's province.
         */
        province?: string;
        /**
         * postal_code
         * The delivery address's postal code.
         */
        postal_code?: string;
        /** The delivery address's metadata, used to store custom key-value pairs. */
        metadata?: object;
    };
    /** The items to fulfill. */
    items: {
        /**
         * title
         * The item's title.
         */
        title: string;
        /**
         * sku
         * The item's SKU.
         */
        sku: string;
        /**
         * quantity
         * The quantity to fulfill of the item.
         */
        quantity: number;
        /**
         * barcode
         * The item's barcode.
         */
        barcode: string;
        /**
         * line_item_id
         * The ID of the associated line item.
         */
        line_item_id?: string;
        /**
         * inventory_item_id
         * The ID of the inventory item associated with the underlying variant.
         */
        inventory_item_id?: string;
    }[];
    /** The labels for the fulfillment's shipments. */
    labels: {
        /**
         * tracking_number
         * The label's tracking number.
         */
        tracking_number: string;
        /**
         * tracking_url
         * The label's tracking URL.
         */
        tracking_url: string;
        /**
         * label_url
         * The label's URL.
         */
        label_url: string;
    }[];
    /**
     * order_id
     * The ID of the order this fulfillment is created for.
     */
    order_id: string;
    /**
     * shipping_option_id
     * The ID of the shipping option used in the order.
     */
    shipping_option_id?: string;
    /** Any data useful for the fulfillment provider to handle the fulfillment. */
    data: object;
    /**
     * packed_at
     * The date and time the fulfillment was packed.
     * @format date-time
     */
    packed_at?: string;
    /**
     * shipped_at
     * The date and time the fulfillment was shipped.
     * @format date-time
     */
    shipped_at?: string;
    /**
     * delivered_at
     * The date and time the fulfillment was delivered.
     * @format date-time
     */
    delivered_at?: string;
    /**
     * canceled_at
     * The date and time the fulfillment was canceled.
     * @format date-time
     */
    canceled_at?: string;
    /** The fulfillment's metadata, used to store custom key-value pairs. */
    metadata: object;
}
/** The inventory item's details. */
export interface AdminCreateInventoryItem {
    /**
     * sku
     * The inventory item's SKU.
     */
    sku?: string;
    /**
     * hs_code
     * The inventory item's HS code.
     */
    hs_code?: string;
    /**
     * weight
     * The inventory item's weight.
     */
    weight?: number;
    /**
     * length
     * The inventory item's length.
     */
    length?: number;
    /**
     * height
     * The inventory item's height.
     */
    height?: number;
    /**
     * width
     * The inventory item's width.
     */
    width?: number;
    /**
     * origin_country
     * The inventory item's origin country.
     */
    origin_country?: string;
    /**
     * mid_code
     * The inventory item's mid code.
     */
    mid_code?: string;
    /**
     * material
     * The inventory item's material.
     */
    material?: string;
    /**
     * title
     * The inventory item's title.
     */
    title?: string;
    /**
     * description
     * The description of the variant associated with the inventory item.
     */
    description?: string;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping?: boolean;
    /**
     * thumbnail
     * The inventory item's thumbnail.
     */
    thumbnail?: string;
    /** The inventory item's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The price list's details. */
export interface AdminCreatePriceList {
    /**
     * title
     * The price list's title.
     */
    title: string;
    /**
     * description
     * The price list's description.
     */
    description: string;
    /**
     * starts_at
     * The date and time the price list starts at.
     * @format date-time
     */
    starts_at?: string;
    /**
     * ends_at
     * The date and time the price list ends at.
     * @format date-time
     */
    ends_at?: string;
    /** The price list's status. */
    status?: "active" | "draft";
    /** The price list's type. */
    type?: "sale" | "override";
    /**
     * The price list's rules.
     * @example {"product_category_id":"pcat_123"}
     */
    rules?: object;
    /** The price list's prices. */
    prices?: {
        /**
         * currency_code
         * The price's currency code.
         */
        currency_code: string;
        /**
         * amount
         * The price's amount.
         */
        amount: number;
        /**
         * variant_id
         * The ID of the product variant this price is for.
         */
        variant_id: string;
        /**
         * min_quantity
         * The minimum quantity required in the cart for this price to be applied.
         */
        min_quantity?: number;
        /**
         * max_quantity
         * The maximum quantity in the cart that shouldn't be crossed for this price to be applied.
         */
        max_quantity?: number;
        /**
         * The price's rules.
         * @example {"region_id":"reg_123"}
         */
        rules?: object;
    }[];
}
/** The price preference's details. */
export interface AdminCreatePricePreference {
    /**
     * attribute
     * The name of the attribute the price preference applies on.
     * @example "currency_code"
     */
    attribute?: string;
    /**
     * value
     * The attribute's value.
     * @example "usd"
     */
    value?: string;
    /**
     * is_tax_inclusive
     * Whether the price is tax inclusive if the value of the specified attribute matches the specified value.
     */
    is_tax_inclusive?: boolean;
}
/** The product's details. */
export interface AdminCreateProduct {
    /**
     * title
     * The product's title.
     */
    title: string;
    /**
     * subtitle
     * The product's subtitle.
     */
    subtitle?: string;
    /**
     * description
     * The product's description.
     */
    description?: string;
    /**
     * is_giftcard
     * Whether the product is a gift card.
     */
    is_giftcard?: boolean;
    /**
     * discountable
     * Whether the product is discountable.
     */
    discountable?: boolean;
    /** The product's images. */
    images?: {
        /**
         * url
         * The image's URL.
         */
        url: string;
    }[];
    /**
     * thumbnail
     * The URL of the product's thumbnail.
     */
    thumbnail?: string;
    /**
     * handle
     * The product's handle.
     */
    handle?: string;
    /** The product's status. */
    status?: "draft" | "proposed" | "published" | "rejected";
    /**
     * type_id
     * The ID of the type the product belongs to.
     */
    type_id?: string;
    /**
     * collection_id
     * The ID of the collection the product belongs to.
     */
    collection_id?: string;
    /** The categories the product belongs to. */
    categories?: {
        /**
         * id
         * The category's ID.
         */
        id: string;
    }[];
    /** The product's tags. */
    tags?: {
        /**
         * id
         * The tag's ID.
         */
        id: string;
    }[];
    /** The product's options. */
    options: AdminCreateProductOption[];
    /** The product's variants. */
    variants?: AdminCreateProductVariant[];
    /** The sales channels the product is available in. */
    sales_channels?: {
        /**
         * id
         * The sales channel's ID.
         */
        id: string;
    }[];
    /**
     * weight
     * The product's weight.
     */
    weight?: number;
    /**
     * length
     * The product's length.
     */
    length?: number;
    /**
     * height
     * The product's height.
     */
    height?: number;
    /**
     * width
     * The product's width.
     */
    width?: number;
    /**
     * hs_code
     * The product's HS code.
     */
    hs_code?: string;
    /**
     * mid_code
     * The product's MID code.
     */
    mid_code?: string;
    /**
     * origin_country
     * The product's origin country.
     */
    origin_country?: string;
    /**
     * material
     * The product's material.
     */
    material?: string;
    /** The product's metadata, used to store custom key-value pairs. */
    metadata?: object;
    /**
     * external_id
     * The ID of the product in an external or third-party system.
     */
    external_id?: string;
    /**
     * shipping_profile_id
     * The ID of the product's shipping profile.
     */
    shipping_profile_id?: string;
}
/** The product category's details. */
export interface AdminCreateProductCategory {
    /**
     * name
     * The product category's name.
     */
    name: string;
    /**
     * description
     * The product category's description.
     */
    description?: string;
    /**
     * handle
     * The product category's handle.
     */
    handle?: string;
    /**
     * is_internal
     * Whether the product category is only used and seen by admin users.
     */
    is_internal?: boolean;
    /**
     * is_active
     * Whether the product category is active.
     */
    is_active?: boolean;
    /**
     * parent_category_id
     * The ID of a category that's the parent of this one.
     */
    parent_category_id?: string;
    /**
     * rank
     * The sorting order of the product category among sibling categories.
     */
    rank?: number;
    /** The product category's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The product option's details. */
export interface AdminCreateProductOption {
    /**
     * title
     * The product option's title.
     */
    title: string;
    /** The product option's values. */
    values: string[];
}
/** The product tag's details. */
export interface AdminCreateProductTag {
    /**
     * value
     * The product tag's value.
     */
    value: string;
    /** The product tag's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The details of the product type to create. */
export interface AdminCreateProductType {
    /** The product's metadata, used to store custom key-value pairs. */
    metadata?: object;
    /**
     * value
     * The product type's value.
     */
    value: string;
}
/** The product variant's details. */
export interface AdminCreateProductVariant {
    /**
     * title
     * The variant's title.
     */
    title: string;
    /**
     * sku
     * The variant's SKU.
     */
    sku?: string;
    /**
     * ean
     * The variant's EAN.
     */
    ean?: string;
    /**
     * upc
     * The variant's UPC.
     */
    upc?: string;
    /**
     * barcode
     * The variant's barcode.
     */
    barcode?: string;
    /**
     * hs_code
     * The variant's HS code.
     */
    hs_code?: string;
    /**
     * mid_code
     * The variant's MID code.
     */
    mid_code?: string;
    /**
     * allow_backorder
     * Whether it's allowed to order this variant when it's out of stock.
     */
    allow_backorder?: boolean;
    /**
     * manage_inventory
     * Whether Medusa manages the variant's inventory quantity. If disabled, the product variant is always considered in stock.
     */
    manage_inventory?: boolean;
    /**
     * variant_rank
     * The sorting order of the variant among other variants in the product.
     */
    variant_rank?: number;
    /**
     * weight
     * The variant's weight.
     */
    weight?: number;
    /**
     * length
     * The variant's length.
     */
    length?: number;
    /**
     * height
     * The variant's height.
     */
    height?: number;
    /**
     * width
     * The variant's width.
     */
    width?: number;
    /**
     * origin_country
     * The variant's origin country.
     */
    origin_country?: string;
    /**
     * material
     * The variant's material.
     */
    material?: string;
    /** The variant's metadata, used to store custom key-value pairs. */
    metadata?: object;
    /** The variant's prices. */
    prices: AdminCreateProductVariantPrice[];
    /**
     * The variant's options, where the key is an option's name, and the value is the option's value.
     * @example {"Color":"Black"}
     */
    options?: object;
    /** The variant's inventory items to create. */
    inventory_items?: AdminCreateProductVariantInventoryKit[];
}
/** The details of a variant's inventory item. */
export interface AdminCreateProductVariantInventoryKit {
    /**
     * inventory_item_id
     * The inventory item's ID.
     */
    inventory_item_id: string;
    /**
     * required_quantity
     * The number of units a single quantity is equivalent to. For example, if a customer orders one quantity of the variant, Medusa checks the availability of the quantity multiplied by the value set for `required_quantity`. When the customer orders the quantity, Medusa reserves the ordered quantity multiplied by the value set for `required_quantity`.
     */
    required_quantity?: number;
}
/** The details of a variant's price. */
export interface AdminCreateProductVariantPrice {
    /**
     * currency_code
     * The price's currency code.
     */
    currency_code: string;
    /**
     * amount
     * The price's amount.
     */
    amount: number;
    /**
     * min_quantity
     * The minimum quantity that must be available in the cart for this price to apply.
     */
    min_quantity?: number;
    /**
     * max_quantity
     * The maximum quantity that must not be surpassed in the cart for this price to apply.
     */
    max_quantity?: number;
    /**
     * The price's rules.
     * @example {"region_id":"reg_123"}
     */
    rules?: {
        /**
         * region_id
         * The ID of a region.
         */
        region_id: string;
    };
}
/** The promotion rule's details. */
export interface AdminCreatePromotionRule {
    /** The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value. */
    operator: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
    /**
     * description
     * The rule's description.
     */
    description?: string;
    /**
     * attribute
     * The attribute to compare against when checking whether a promotion can be applied on a cart.
     * @example "items.product.id"
     */
    attribute: string;
    /** The attribute's value. */
    values: string | string[];
}
/** The refund reason's details. */
export interface AdminCreateRefundReason {
    /**
     * label
     * The refund reason's label.
     */
    label: string;
    /**
     * description
     * The refund reason's description.
     */
    description?: string;
}
/** The region's details. */
export interface AdminCreateRegion {
    /**
     * name
     * The region's name.
     */
    name: string;
    /**
     * currency_code
     * The region's currency code.
     * @example "usd"
     */
    currency_code: string;
    /** The region's countries. */
    countries?: string[];
    /**
     * automatic_taxes
     * Whether taxes are calculated automatically during checkout in this region.
     */
    automatic_taxes?: boolean;
    /**
     * is_tax_inclusive
     * Whether prices in this region are tax inclusive.
     */
    is_tax_inclusive?: boolean;
    /** The payment providers enabled in this region. */
    payment_providers?: string[];
    /** The region's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The reservation's details. */
export interface AdminCreateReservation {
    /**
     * line_item_id
     * The ID of the line item this reservation is created for.
     */
    line_item_id?: string;
    /**
     * location_id
     * The ID of the location the quantity is reserved from.
     */
    location_id: string;
    /**
     * inventory_item_id
     * The ID of the inventory item associated with the line item's variant.
     */
    inventory_item_id: string;
    /**
     * quantity
     * The reserved quantity.
     */
    quantity: number;
    /**
     * description
     * The reservation's description.
     */
    description?: string;
    /** The reservation's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The details of the return reason to create. */
export interface AdminCreateReturnReason {
    /**
     * value
     * The return reason's value.
     */
    value: string;
    /**
     * label
     * The return reason's label.
     */
    label: string;
    /**
     * description
     * The return reason's description.
     */
    description?: string;
    /**
     * parent_return_reason_id
     * The ID of the parent return reason.
     */
    parent_return_reason_id?: string;
    /** The return reason's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The sales channel's details. */
export interface AdminCreateSalesChannel {
    /**
     * name
     * The sales channel's name.
     */
    name: string;
    /**
     * description
     * The sales channel's description.
     */
    description?: string;
    /**
     * is_disabled
     * Whether the sales channel is disabled.
     */
    is_disabled?: boolean;
    /** The sales channel's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The shipment's details. */
export interface AdminCreateShipment {
    /** The shipment's labels. */
    labels: {
        /**
         * tracking_number
         * The label's tracking number.
         */
        tracking_number: string;
        /**
         * tracking_url
         * The label's tracking URL.
         */
        tracking_url: string;
        /**
         * label_url
         * The label's URL.
         */
        label_url: string;
    }[];
}
/** The shipping option's details. */
export interface AdminCreateShippingOption {
    /**
     * name
     * The shipping option's name.
     */
    name: string;
    /**
     * service_zone_id
     * The ID of the associated service zone.
     */
    service_zone_id: string;
    /**
     * shipping_profile_id
     * The ID of the associated shipping profile.
     */
    shipping_profile_id: string;
    /** The shipping option's data, useful for the fulfillment provider handling its processing. */
    data?: object;
    /** The shipping option's price type. If `flat`, the shipping option has a fixed price set in `prices`. Otherwise, the shipping option's price is calculated by the fulfillment provider. */
    price_type: "flat" | "calculated";
    /**
     * provider_id
     * The ID of the fulfillment provider handling this shipping option.
     */
    provider_id: string;
    /** The shipping option type's details. */
    type: AdminCreateShippingOptionType;
    /** The shipping option's prices. */
    prices: ({
        /**
         * currency_code
         * The price's currency code.
         * @example "usd"
         */
        currency_code: string;
        /**
         * amount
         * The price's amount.
         */
        amount: number;
    } | {
        /**
         * region_id
         * The ID of the region this price is used in.
         */
        region_id: string;
        /**
         * amount
         * The price's amount.
         */
        amount: number;
    })[];
    /** The shipping option's rules. */
    rules?: AdminCreateShippingOptionRule[];
}
/** The details of the shipping option rule. */
export interface AdminCreateShippingOptionRule {
    /** The operator used to check whether a rule applies. */
    operator: "gt" | "lt" | "eq" | "ne" | "in" | "lte" | "gte" | "nin";
    /**
     * attribute
     * The name of a property or table that the rule applies to.
     * @example "customer_group"
     */
    attribute: string;
    /** A value of the attribute that enables this rule. */
    value: string | string[];
}
/** The shipping option type's details. */
export interface AdminCreateShippingOptionType {
    /**
     * label
     * The type's label.
     */
    label: string;
    /**
     * description
     * The type's description.
     */
    description: string;
    /**
     * code
     * The type's code.
     */
    code: string;
}
/** The shipping profile's details. */
export interface AdminCreateShippingProfile {
    /**
     * name
     * The shipping profile's name.
     */
    name: string;
    /**
     * type
     * The shipping profile's type.
     */
    type: string;
    /** The shipping profile's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The stock location's details. */
export interface AdminCreateStockLocation {
    /**
     * name
     * The stock location's name.
     */
    name: string;
    /**
     * address_id
     * The ID of the stock location's address.
     */
    address_id?: string;
    /** The details of the stock location address to create. */
    address?: AdminUpsertStockLocationAddress;
    /** The stock location's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The tax rate's details. */
export interface AdminCreateTaxRate {
    /**
     * name
     * The tax rate's name.
     * @example "VAT"
     */
    name: string;
    /**
     * tax_region_id
     * The ID of the tax region this rate belongs to.
     */
    tax_region_id: string;
    /**
     * rate
     * The rate to charge.
     * @example 10
     */
    rate?: number;
    /**
     * code
     * The code the tax rate is identified by.
     */
    code: string;
    /** The tax rate's rules. */
    rules?: AdminCreateTaxRateRule[];
    /**
     * is_default
     * Whether the tax rate is the default in its tax region.
     */
    is_default?: boolean;
    /**
     * is_combinable
     * Whether the tax rate should be combined with parent rates.
     */
    is_combinable?: boolean;
    /** The tax rate's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The tax rate rule's details. */
export interface AdminCreateTaxRateRule {
    /**
     * reference
     * The name of a table in the database that this rule points to.
     * @example "product_type"
     */
    reference: string;
    /**
     * reference_id
     * The ID of a record in the table specified in reference.
     * @example "ptype_123"
     */
    reference_id: string;
}
/** The tax region's details. */
export interface AdminCreateTaxRegion {
    /**
     * country_code
     * The tax region's country code.
     * @example "us"
     */
    country_code: string;
    /**
     * province_code
     * The tax region's province code.
     */
    province_code?: string;
    /**
     * parent_id
     * The ID of the parent tax region.
     */
    parent_id?: string;
    /** The tax region's default tax rate. */
    default_tax_rate?: {
        /**
         * rate
         * The rate to charge.
         * @example 10
         */
        rate?: number;
        /**
         * code
         * The code the tax rate is identified by
         */
        code: string;
        /**
         * name
         * The default tax rate's name.
         * @example "VAT"
         */
        name: string;
        /** Whether the tax rate should be combined with parent rates. */
        is_combinable?: boolean;
        /** The default tax rate's metadata, used to store custom key-value pairs. */
        metadata?: object;
    };
    /** The tax region's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
/** The details of the variant-inventory item association. */
export interface AdminCreateVariantInventoryItem {
    /**
     * required_quantity
     * The quantity of the variant in the inventory item.
     */
    required_quantity: number;
    /**
     * inventory_item_id
     * The inventory item's ID.
     */
    inventory_item_id: string;
}
/** The details of changing a workflow execution's step status. */
export interface AdminCreateWorkflowsAsyncResponse {
    /**
     * transaction_id
     * The workflows execution's transaction ID.
     */
    transaction_id: string;
    /**
     * step_id
     * The ID of the step whose status was changed.
     */
    step_id: string;
    /** Sets the step's response. It accepts any type. */
    response?: any;
    /** Sets the compensation function's input. It accepts any response. */
    compensate_input?: any;
    /** Whether to invoke or compensate the step. */
    action?: "invoke" | "compensate";
}
/** The details of the workflow to execute. */
export interface AdminCreateWorkflowsRun {
    /** The input to pass to the workflow. Can be of any type. */
    input?: any;
    /**
     * transaction_id
     * The ID of the workflow execution's transaction.
     */
    transaction_id?: string;
}
/** The currency's currencies. */
export interface AdminCurrency {
    /**
     * code
     * The currency's code.
     * @example "usd"
     */
    code: string;
    /**
     * symbol
     * The currency's symbol.
     * @example "$"
     */
    symbol: string;
    /**
     * symbol_native
     * The currency's native symbol, if different than the symbol.
     * @example "$"
     */
    symbol_native: string;
    /**
     * name
     * The currency's name.
     */
    name: string;
    /**
     * decimal_digits
     * The number of digits after the decimal for prices in this currency.
     */
    decimal_digits: number;
    /**
     * rounding
     * The rounding percision applied on prices in this currency.
     */
    rounding: number;
    /**
     * created_at
     * The currency's creation date.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The currency's update date.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The currency's deletion date.
     * @format date-time
     */
    deleted_at: string;
}
/** The paginated list of currencies. */
export interface AdminCurrencyListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of currencies. */
    currencies: AdminCurrency[];
}
/** The currency's details. */
export interface AdminCurrencyResponse {
    /** The currency's currencies. */
    currency: AdminCurrency;
}
/** The customer's details. */
export interface AdminCustomer {
    /**
     * id
     * The customer's ID.
     */
    id: string;
    /**
     * has_account
     * Whether the customer is registered.
     */
    has_account: boolean;
    /** The customer's groups. */
    groups?: AdminCustomerGroup[];
    /**
     * email
     * The customer's email.
     * @format email
     */
    email: string;
    /**
     * default_billing_address_id
     * The ID of the address used as the default billing address.
     */
    default_billing_address_id: string;
    /**
     * default_shipping_address_id
     * The ID of the address used as the default shipping address.
     */
    default_shipping_address_id: string;
    /**
     * company_name
     * The customer's company name.
     */
    company_name: string;
    /**
     * first_name
     * The customer's first name.
     */
    first_name: string;
    /**
     * last_name
     * The customer's last name.
     */
    last_name: string;
    /** The customer's addresses. */
    addresses: AdminCustomerAddress[];
    /**
     * phone
     * The customer's phone.
     */
    phone?: string;
    /** The customer's metadata, used to store custom key-value pairs. */
    metadata?: object;
    /**
     * created_by
     * The ID of the user that created this customer, if available.
     */
    created_by?: string;
    /**
     * created_at
     * The customer's creation date.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The customer's update date.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The customer's deletion date.
     * @format date-time
     */
    deleted_at?: string;
}
/** The customer's address. */
export interface AdminCustomerAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * address_name
     * The address's name.
     */
    address_name: string;
    /**
     * is_default_shipping
     * Whether the address is the default shipping address.
     */
    is_default_shipping: boolean;
    /**
     * is_default_billing
     * Whether the address is the default billing address.
     */
    is_default_billing: boolean;
    /**
     * customer_id
     * The ID of the customer that this address belongs to.
     */
    customer_id: string;
    /**
     * company
     * The customer's company.
     */
    company: string;
    /**
     * first_name
     * The customer's first name.
     */
    first_name: string;
    /**
     * last_name
     * The customer's last name.
     */
    last_name: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2: string;
    /**
     * city
     * The address's city.
     */
    city: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code: string;
    /**
     * province
     * The address's province.
     */
    province: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code: string;
    /**
     * phone
     * The address's phone.
     */
    phone: string;
    /** The address's metadata, used to store custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The address's creation date.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The address's update date.
     * @format date-time
     */
    updated_at: string;
}
/** The address's details. */
export interface AdminCustomerAddressResponse {
    /** The customer's address. */
    address: AdminCustomerAddress;
}
/** The customer group's details. */
export interface AdminCustomerGroup {
    /**
     * id
     * The customer group's ID.
     */
    id: string;
    /**
     * name
     * The customer group's name.
     */
    name: string;
    /** The customer group's customers. */
    customers: object[];
    /** The customer group's metadata, used to store custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The customer group's creation date.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The customer group's update date.
     * @format date-time
     */
    updated_at: string;
}
/** The customer group's details. */
export interface AdminCustomerGroupResponse {
    /** The customer group's details. */
    customer_group: AdminCustomerGroup;
}
/** Filters to apply on customers to retrieve their groups. */
export interface AdminCustomerInGroupFilters {
    /** Filter by a customer's ID. */
    id?: string | string[];
    /** Filter by a customer's email. */
    email?: string | string[] | {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
    /** Filter by the ID of a customer's default billing address. */
    default_billing_address_id?: string | string[];
    /** Filter by the ID of a customer's default shipping address. */
    default_shipping_address_id?: string | string[];
    /** Filter by a customer's company name. */
    company_name?: string | string[];
    /** Filter by a customer's first name. */
    first_name?: string | string[];
    /** Filter by a customer's last name. */
    last_name?: string | string[];
    /** Filter by the ID of a user to retrieve the groups of the customers they created. */
    created_by?: string | string[];
    /** Filter the customer's creation date. */
    created_at?: {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
    /** Filter the customer's update date. */
    updated_at?: {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
    /** Filter the customer's deletion date. */
    deleted_at?: {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
}
/** The customer's details. */
export interface AdminCustomerResponse {
    /** The customer's details. */
    customer: AdminCustomer;
}
/** The result of deleting the payment collection. */
export interface AdminDeletePaymentCollectionResponse {
    /**
     * id
     * The payment collection's ID.
     */
    id: string;
    /**
     * object
     * The name of the object that was deleted.
     * @default "payment-collection"
     */
    object: string;
    /**
     * deleted
     * Whether the object was deleted.
     */
    deleted: boolean;
}
/** The draft order's details. */
export interface AdminDraftOrder {
    /** The draft order's payment collections. */
    payment_collections: AdminPaymentCollection[];
    /** The draft order's fulfillments. */
    fulfillments?: AdminOrderFulfillment[];
    /** The sales channel's details. */
    sales_channel?: AdminSalesChannel;
    /** The customer's details. */
    customer?: AdminCustomer;
    /** An order address. */
    shipping_address?: AdminOrderAddress;
    /** An order address. */
    billing_address?: AdminOrderAddress;
    /** The draft order's items. */
    items: AdminOrderLineItem[];
    /** The draft order's shipping methods. */
    shipping_methods: AdminOrderShippingMethod[];
    /**
     * status
     * The draft order's status.
     */
    status: string;
    /**
     * currency_code
     * The draft order's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * id
     * The draft order's ID.
     */
    id: string;
    /**
     * version
     * The draft order's version.
     */
    version: number;
    /**
     * region_id
     * The ID of the region associated with the draft order.
     */
    region_id: string;
    /**
     * customer_id
     * The ID of the customer that the draft order belongs to.
     */
    customer_id: string;
    /**
     * sales_channel_id
     * The ID of the sales channel that the draft order is placed in.
     */
    sales_channel_id: string;
    /**
     * email
     * The customer email associated with the draft order.
     * @format email
     */
    email: string;
    /**
     * display_id
     * The draft order's display ID.
     */
    display_id?: number;
    /** The draft order's payment status. */
    payment_status: "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "canceled" | "captured" | "partially_captured" | "partially_refunded" | "refunded" | "requires_action";
    /** The draft order's fulfillment status. */
    fulfillment_status: "canceled" | "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_delivered" | "delivered";
    /** The draft order's transactions. */
    transactions?: BaseOrderTransaction[];
    /** The order's summary details. */
    summary: BaseOrderSummary;
    /** The draft order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the draft order was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the draft order was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_item_total
     * The total of the draft order's items including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The total of the draft order's items excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The tax total of the draft order's items excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The total of the draft order's items including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The total of the draft order's items excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The tax total of the draft order's items including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The draft order's total excluding promotions, including taxes.
     */
    original_total: number;
    /**
     * original_subtotal
     * The draft order's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The draft order's tax total, excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The draft order's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The draft order's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The draft order's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The draft order's discount or promotions total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The tax total of draft order's discount or promotion.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The draft order's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The tax total of the draft order's gift card.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The draft order's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The draft order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The tax total of the draft order's shipping.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The draft order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The draft order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The tax total of the draft order's shipping excluding promotions.
     */
    original_shipping_tax_total: number;
}
/** The list of draft orders with pagination fields. */
export interface AdminDraftOrderListResponse {
    /**
     * limit
     * The maximum number of items retrieved.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total count of items available.
     */
    count: number;
    /** The list of draft orders. */
    draft_orders: AdminDraftOrder[];
}
/** The draft order's details. */
export interface AdminDraftOrderResponse {
    /** The draft order's details. */
    draft_order: AdminDraftOrder;
}
/** The exchange's details. */
export interface AdminExchange {
    /**
     * order_id
     * The ID of the order the exchange is created for.
     */
    order_id: string;
    /** The items returned (inbound) by the exchange. */
    return_items: AdminReturnItem[];
    /** The new items (outbound) sent by the exchange. */
    additional_items: BaseExchangeItem[];
    /**
     * no_notification
     * Whether to send the customer notifications when the exchange is updated.
     */
    no_notification?: boolean;
    /**
     * difference_due
     * The amount to be exchanged or refunded. If the amount is negative, it must be refunded. If positive, additional payment is required from the customer.
     */
    difference_due?: number;
    /** The return's details. */
    return?: AdminReturn;
    /**
     * return_id
     * The ID of the associated exchange.
     */
    return_id?: string;
    /**
     * id
     * The exchange's ID.
     */
    id: string;
    /**
     * display_id
     * The exchange's display ID.
     */
    display_id?: string;
    /** The shipping methods used to send the new (outbound) items. */
    shipping_methods?: BaseOrderShippingMethod[];
    /** The exchange's transactions. */
    transactions?: BaseOrderTransaction[];
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date that the exchange was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date that the exchange was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * order_version
     * The version of the order once the exchange is applied.
     */
    order_version?: string;
    /**
     * created_by
     * The ID of the user that created the exchange.
     */
    created_by?: string;
    /**
     * canceled_at
     * The date the exchange was canceled.
     * @format date-time
     */
    canceled_at: string;
    /**
     * deleted_at
     * The date the exchange was deleted.
     * @format date-time
     */
    deleted_at: string;
    /** The order's details. */
    order?: BaseOrder;
    /**
     * allow_backorder
     * Whether variants that are out-of-stock can still be added as additional or outbound items.
     */
    allow_backorder?: boolean;
}
/** The details of deleting an exchange. */
export interface AdminExchangeDeleteResponse {
    /**
     * id
     * The exchange's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "exchange"
     */
    object: string;
    /**
     * deleted
     * Whether the exchange was deleted.
     */
    deleted: boolean;
}
/** The exchange's details. */
export interface AdminExchangeOrderResponse {
    /** The order change's order. */
    order: Order;
    /** The exchange's details. */
    exchange: AdminExchange;
}
/** A preview of the order once the exchange is applied. */
export interface AdminExchangePreviewResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The exchange's details. */
    exchange: AdminExchange;
}
/** The details of a requested exchange. */
export interface AdminExchangeRequestResponse {
    /** The return's details. */
    return: AdminReturn;
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The exchange's details. */
    exchange: AdminExchange;
}
/** The exchange's details. */
export interface AdminExchangeResponse {
    /** The exchange's details. */
    exchange: AdminExchange;
}
/** The details of an exchange's return. */
export interface AdminExchangeReturnResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The return's details. */
    return: AdminReturn;
}
/** The details of the product export. */
export interface AdminExportProductResponse {
    /**
     * transaction_id
     * The ID of the workflow execution's transaction. Use it to check the status of the export by sending a GET request to `/admin/workflows-executions/export-products/:transaction-id`
     */
    transaction_id: string;
}
/** A file's details. */
export interface AdminFile {
    /**
     * id
     * The file's ID.
     */
    id: string;
    /**
     * url
     * The file's URL.
     */
    url: string;
}
/** The list of uploaded files. */
export interface AdminFileListResponse {
    /** The list of uploaded files. */
    files: AdminFile[];
}
/** A file's details. */
export interface AdminFileResponse {
    /** A file's details. */
    file: AdminFile;
}
/** The fulfillment's details. */
export interface AdminFulfillment {
    /**
     * id
     * The fulfillment's ID.
     */
    id: string;
    /**
     * location_id
     * The ID of the location the fulfillment's items are shipped from.
     */
    location_id: string;
    /**
     * provider_id
     * The ID of the fulfillment provider handling this fulfillment.
     */
    provider_id: string;
    /**
     * shipping_option_id
     * The ID of the shipping option this fulfillment is created for.
     */
    shipping_option_id: string;
    /** The fulfillment provider's details. */
    provider: AdminFulfillmentProvider;
    /** An address's details. */
    delivery_address: AdminFulfillmentAddress;
    /** The fulfillment's items. */
    items: AdminFulfillmentItem[];
    /** The fulfillment's shipment labels. */
    labels: AdminFulfillmentLabel[];
    /**
     * packed_at
     * The date the fulfillment was packed at.
     */
    packed_at: string;
    /**
     * shipped_at
     * The date the fulfillment was shipped at.
     */
    shipped_at: string;
    /**
     * delivered_at
     * The date the fulfillment was delivered at.
     */
    delivered_at: string;
    /**
     * canceled_at
     * The date the fulfillment was canceled at.
     */
    canceled_at: string;
    /** The fulfillment's data, useful for the third-party provider handling the fulfillment. */
    data: object;
    /** The fulfillment's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the fulfillment was created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the fulfillment was updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the fulfillment was deleted at.
     * @format date-time
     */
    deleted_at: string;
}
/** An address's details. */
export interface AdminFulfillmentAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * fulfillment_id
     * The ID of the fulfillment that the address belongs to.
     */
    fulfillment_id: string;
    /**
     * company
     * The address's company.
     */
    company: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2: string;
    /**
     * city
     * The address's city.
     */
    city: string;
    /**
     * country_code
     * The address's country code.
     */
    country_code: string;
    /**
     * province
     * The address's province.
     */
    province: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code: string;
    /**
     * phone
     * The address's phone.
     */
    phone: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the address was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of a fulfillment's item. */
export interface AdminFulfillmentItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * quantity
     * The item's quantity to be fulfilled.
     */
    quantity: number;
    /**
     * sku
     * The item's SKU.
     */
    sku: string;
    /**
     * barcode
     * The item's barcode.
     */
    barcode: string;
    /**
     * line_item_id
     * The ID of the order's line item to be fulfilled.
     */
    line_item_id: string;
    /**
     * inventory_item_id
     * The ID of the inventory item of the underlying product variant.
     */
    inventory_item_id: string;
    /**
     * fulfillment_id
     * The ID of the fulfillment the item belongs to.
     */
    fulfillment_id: string;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the item was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of a fulfillmet's shipment label. */
export interface AdminFulfillmentLabel {
    /**
     * id
     * The label's ID.
     */
    id: string;
    /**
     * tracking_number
     * The label's tracking number.
     */
    tracking_number: string;
    /**
     * tracking_url
     * The label's tracking URL.
     */
    tracking_url: string;
    /**
     * label_url
     * The label's URL.
     */
    label_url: string;
    /**
     * fulfillment_id
     * The ID of the fulfillment the label is associated with.
     */
    fulfillment_id: string;
    /**
     * created_at
     * The date the label was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the label was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the label was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The fulfillment provider's details. */
export interface AdminFulfillmentProvider {
    /**
     * id
     * The provider's ID.
     */
    id: string;
    /**
     * is_enabled
     * The provider's is enabled.
     */
    is_enabled: boolean;
}
/** The paginated list of fulfillment providers. */
export interface AdminFulfillmentProviderListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total count of items.
     */
    count: number;
    /** The list of fulfillment providers. */
    fulfillment_providers: AdminFulfillmentProvider[];
}
/** The fulfillment option's details. */
export interface AdminFulfillmentProviderOption {
    /**
     * id
     * The fulfillment option's ID.
     */
    id: string;
    /**
     * is_return
     * Whether the fulfillment option is used for returns.
     */
    is_return: boolean;
}
/** The paginated list of fulfillment options. */
export interface AdminFulfillmentProviderOptionsListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of fulfillment options. */
    fulfillment_options: AdminFulfillmentProviderOption[];
}
/** A fulfillment's details. */
export interface AdminFulfillmentResponse {
    /** The fulfillment's details. */
    fulfillment: AdminFulfillment;
}
/** The service zone's fulfillment set. */
export interface AdminFulfillmentSet {
    /**
     * id
     * The fulfillment set's ID.
     */
    id: string;
    /**
     * name
     * The fulfillment set's name.
     */
    name: string;
    /**
     * type
     * The fulfillment set's type.
     */
    type: string;
    /** The stock location's details. */
    location: AdminStockLocation;
    /** The fulfillment set's service zones. */
    service_zones: AdminServiceZone[];
    /**
     * created_at
     * The fulfillment set's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The fulfillment set's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The fulfillment set's deleted at.
     * @format date-time
     */
    deleted_at: string;
}
/** The deletion details. */
export interface AdminFulfillmentSetDeleteResponse {
    /**
     * id
     * The fulfillment set's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "fulfillment_set"
     */
    object: string;
    /**
     * deleted
     * Whether the fulfillment set was deleted.
     */
    deleted: boolean;
}
/** The fulfillment set's details. */
export interface AdminFulfillmentSetResponse {
    /** The service zone's fulfillment set. */
    fulfillment_set: AdminFulfillmentSet;
}
/** The geo zone's geo zones. */
export interface AdminGeoZone {
    /**
     * id
     * The geo zone's ID.
     */
    id: string;
    /** The geo zone's type. */
    type: "country" | "province" | "city" | "zip";
    /**
     * country_code
     * The geo zone's country code.
     */
    country_code: string;
    /**
     * province_code
     * The geo zone's province code.
     */
    province_code: string;
    /**
     * city
     * The geo zone's city.
     */
    city: string;
    /** The geo zone's postal expression. */
    postal_expression: object;
    /**
     * created_at
     * The geo zone's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The geo zone's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The geo zone's deleted at.
     * @format date-time
     */
    deleted_at: string;
}
/** The import's details. */
export interface AdminImportProductRequest {
    /**
     * file
     * A File to upload.
     */
    file: object;
}
/** The import process's details. */
export interface AdminImportProductResponse {
    /**
     * transaction_id
     * The ID of the workflow execution's transaction. This is useful to confirm the import using the `/admin/products/:transaction-id/import` API route.
     */
    transaction_id: string;
    /** The import's summary. */
    summary: {
        /**
         * toCreate
         * The number of products that will be created by this import.
         */
        toCreate: number;
        /**
         * toUpdate
         * The number of products that will be updated by this import.
         */
        toUpdate: number;
    };
}
/** The inventory item's details. */
export interface AdminInventoryItem {
    /**
     * id
     * The inventory item's ID.
     */
    id: string;
    /**
     * sku
     * The inventory item's sku.
     */
    sku?: string;
    /**
     * origin_country
     * The inventory item's origin country.
     */
    origin_country?: string;
    /**
     * hs_code
     * The inventory item's HS code.
     */
    hs_code?: string;
    /**
     * requires_shipping
     * Whether the inventory item requires shipping.
     */
    requires_shipping: boolean;
    /**
     * mid_code
     * The inventory item's MID code.
     */
    mid_code?: string;
    /**
     * material
     * The inventory item's material.
     */
    material?: string;
    /**
     * weight
     * The inventory item's weight.
     */
    weight?: number;
    /**
     * length
     * The inventory item's length.
     */
    length?: number;
    /**
     * height
     * The inventory item's height.
     */
    height?: number;
    /**
     * width
     * The inventory item's width.
     */
    width?: number;
    /**
     * title
     * The inventory item's title.
     */
    title?: string;
    /**
     * description
     * The inventory item's description.
     */
    description?: string;
    /**
     * thumbnail
     * The thumbnail URL of the inventory item.
     */
    thumbnail?: string;
    /** Custom key-value pairs, used to store additional information about the inventory item. */
    metadata?: object;
    /** The inventory item's location levels. */
    location_levels?: AdminInventoryLevel[];
}
/** The inventory item's details. */
export interface AdminInventoryItemResponse {
    /** The inventory item's details. */
    inventory_item: AdminInventoryItem;
}
/** The location level's location levels. */
export interface AdminInventoryLevel {
    /**
     * id
     * The location level's ID.
     */
    id: string;
    /**
     * created_at
     * The location level's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The location level's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The location level's deleted at.
     * @format date-time
     */
    deleted_at: string;
    /**
     * inventory_item_id
     * The location level's inventory item id.
     */
    inventory_item_id: string;
    /**
     * location_id
     * The location level's location id.
     */
    location_id: string;
    /**
     * stocked_quantity
     * The location level's stocked quantity.
     */
    stocked_quantity: number;
    /**
     * reserved_quantity
     * The location level's reserved quantity.
     */
    reserved_quantity: number;
    /**
     * incoming_quantity
     * The location level's incoming quantity.
     */
    incoming_quantity: number;
    /** The location level's metadata. */
    metadata: object;
    inventory_item?: object;
    /**
     * available_quantity
     * The location level's available quantity.
     */
    available_quantity: number;
}
/** The invite's details. */
export interface AdminInvite {
    /**
     * id
     * The invite's ID.
     */
    id: string;
    /**
     * email
     * The invite's email.
     * @format email
     */
    email: string;
    /**
     * accepted
     * Whether the invite has been accepted.
     */
    accepted: boolean;
    /**
     * token
     * The invite's token.
     */
    token: string;
    /**
     * expires_at
     * The invite's expiry date.
     * @format date-time
     */
    expires_at: string;
    /** The invite's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the invite was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the invite was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The invite's details. */
export interface AdminInviteResponse {
    /** The invite's details. */
    invite: AdminInvite;
}
/** The products removal details. */
export interface AdminLinkPriceListProducts {
    /** The products to remove from the price list. */
    remove?: string[];
}
/** The notification's details. */
export interface AdminNotification {
    /**
     * id
     * The notification's ID.
     */
    id: string;
    /**
     * to
     * Where to send the notification to. For example, if `channel` is `email`, this can be an email number.
     */
    to: string;
    /**
     * channel
     * Through which channel is the notification sent through.
     * @example "email"
     */
    channel: string;
    /**
     * template
     * The ID of the template in a third-party service used as the notification's shape.
     */
    template: string;
    /** Data payload to send with the notification. */
    data?: object;
    /**
     * trigger_type
     * What triggered this notification.
     * @example "order.created"
     */
    trigger_type?: string;
    /**
     * resource_id
     * The ID of the associated resource. For example, if the notification was triggered because an order was created, this would be the ID of the order.
     */
    resource_id?: string;
    /**
     * resource_type
     * The type of the resource that triggered the notification.
     * @example "order"
     */
    resource_type?: string;
    /**
     * receiver_id
     * The ID of the user or customer that's receiving this notification.
     */
    receiver_id?: string;
    /**
     * original_notification_id
     * The ID of the original notification, if this notification is resent.
     */
    original_notification_id?: string;
    /**
     * external_id
     * The ID of the notification in an external or third-party system.
     */
    external_id?: string;
    /**
     * provider_id
     * The ID of the provider used to send the notification.
     */
    provider_id: string;
    /**
     * created_at
     * The date the notification was created.
     * @format date-time
     */
    created_at: string;
}
/** The paginated list of notifications. */
export interface AdminNotificationListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total count of items.
     */
    count: number;
    /** The list of notifications. */
    notifications: AdminNotification[];
}
/** The notification's details. */
export interface AdminNotificationResponse {
    /** The notification's details. */
    notification: AdminNotification;
}
/** The order's details. */
export interface AdminOrder {
    /** The order's payment collections. */
    payment_collections: AdminPaymentCollection[];
    /** The order's fulfillments. */
    fulfillments?: AdminOrderFulfillment[];
    /** The sales channel's details. */
    sales_channel?: AdminSalesChannel;
    /** The customer's details. */
    customer?: AdminCustomer;
    /** An order address. */
    shipping_address?: AdminOrderAddress;
    /** An order address. */
    billing_address?: AdminOrderAddress;
    /**
     * id
     * The order's ID.
     */
    id: string;
    /**
     * version
     * The order's version.
     */
    version: number;
    /**
     * region_id
     * The ID of the region associated with the order.
     */
    region_id: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id: string;
    /**
     * sales_channel_id
     * The ID of the sales channel the order is placed in.
     */
    sales_channel_id: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email: string;
    /**
     * currency_code
     * The order's currency code.
     */
    currency_code: string;
    /**
     * display_id
     * The order's display ID.
     */
    display_id?: number;
    /** The order's items. */
    items: AdminOrderLineItem[];
    /** The order's shipping methods. */
    shipping_methods: AdminOrderShippingMethod[];
    /** The order's payment status. */
    payment_status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "captured" | "partially_captured" | "partially_refunded" | "refunded" | "requires_action";
    /** The order's fulfillment status. */
    fulfillment_status: "canceled" | "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_delivered" | "delivered";
    /** The order's transactions. */
    transactions?: BaseOrderTransaction[];
    /** The order's summary details. */
    summary: BaseOrderSummary;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_item_total
     * The total of the order's items including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The tax total of the order's items excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The total of the order's items including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The tax total of the order's items including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The order's total excluding promotions, including taxes.
     */
    original_total: number;
    /**
     * original_subtotal
     * The order's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The order's tax total, excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The order's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The order's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The order's discount or promotions total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The tax total of order's discount or promotion.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The order's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The tax total of the order's gift card.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The order's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The tax total of the order's shipping.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The tax total of the order's shipping excluding promotions.
     */
    original_shipping_tax_total: number;
    /**
     * status
     * The order's status.
     */
    status: string;
}
/** An order address. */
export interface AdminOrderAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * customer_id
     * The ID of the customer this address belongs to.
     */
    customer_id?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /** The country's details. */
    country?: AdminRegionCountry;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order change's details. */
export interface AdminOrderChange {
    /**
     * id
     * The order change's ID.
     */
    id: string;
    /**
     * version
     * The order change's version. This will be the order's version when the change is applied.
     */
    version: number;
    /** The order change's type. */
    change_type?: "return" | "exchange" | "claim" | "edit";
    /**
     * order_id
     * The ID of the order this change applies on.
     */
    order_id: string;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id: string;
    /**
     * exchange_id
     * The ID of the associated exchange.
     */
    exchange_id: string;
    /**
     * claim_id
     * The ID of the associated claim.
     */
    claim_id: string;
    /** The order's details. */
    order: AdminOrder;
    /** The return's details. */
    return_order: AdminReturn;
    /** The exchange's details. */
    exchange: AdminExchange;
    /** The claim's details. */
    claim: AdminClaim;
    /** The order change's actions. */
    actions: AdminOrderChangeAction[];
    /** The order change's status. */
    status: "canceled" | "requested" | "pending" | "confirmed" | "declined";
    /**
     * requested_by
     * The ID of the user that requested the change.
     */
    requested_by: string;
    /**
     * requested_at
     * The date the order change was requested.
     * @format date-time
     */
    requested_at: string;
    /**
     * confirmed_by
     * The ID of the user that confirmed the order change.
     */
    confirmed_by: string;
    /**
     * confirmed_at
     * The date the order change was confirmed.
     * @format date-time
     */
    confirmed_at: string;
    /**
     * declined_by
     * The ID of the user that declined the order change.
     */
    declined_by: string;
    /**
     * declined_reason
     * The reason the order change was declined.
     */
    declined_reason: string;
    /** The order change's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * declined_at
     * The date the order change was declined.
     * @format date-time
     */
    declined_at: string;
    /**
     * canceled_by
     * The ID of the user that canceled the order change.
     */
    canceled_by: string;
    /**
     * canceled_at
     * The date the order change was canceled.
     * @format date-time
     */
    canceled_at: string;
    /**
     * created_at
     * The date the order change was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order change was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order change action's details. */
export interface AdminOrderChangeAction {
    /**
     * id
     * The action's ID.
     */
    id: string;
    /**
     * order_change_id
     * The ID of the order change that the action belongs to.
     */
    order_change_id: string;
    order_change: object;
    /**
     * order_id
     * The ID of the order the associated change is for.
     */
    order_id: string;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id: string;
    /**
     * claim_id
     * The ID of the associated claim.
     */
    claim_id: string;
    /**
     * exchange_id
     * The ID of the associated exchange.
     */
    exchange_id: string;
    /** The order's details. */
    order: AdminOrder;
    /**
     * reference
     * The name of the table this action applies on.
     */
    reference: "claim" | "exchange" | "return" | "order_shipping_method";
    /**
     * reference_id
     * The ID of the record in the referenced table.
     */
    reference_id: string;
    /** The applied action. */
    action: "CANCEL_RETURN_ITEM" | "FULFILL_ITEM" | "DELIVER_ITEM" | "CANCEL_ITEM_FULFILLMENT" | "ITEM_ADD" | "ITEM_REMOVE" | "ITEM_UPDATE" | "RECEIVE_DAMAGED_RETURN_ITEM" | "RECEIVE_RETURN_ITEM" | "RETURN_ITEM" | "SHIPPING_ADD" | "SHIPPING_REMOVE" | "SHIP_ITEM" | "WRITE_OFF_ITEM" | "REINSTATE_ITEM";
    /**
     * The action's details.
     * @example {"reference_id":123,"quantity":1}
     */
    details: object;
    /**
     * internal_note
     * A note that's viewed only by admin users.
     */
    internal_note: string;
    /**
     * created_at
     * The date the action was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the action was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The details of an order's changes. */
export interface AdminOrderChangesResponse {
    /** An order's changes. */
    order_changes: AdminOrderChange[];
}
/** The preview of an order edit. */
export interface AdminOrderEditPreviewResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
}
/** An order edit's details. */
export interface AdminOrderEditResponse {
    /** The order change's details. */
    order_change: AdminOrderChange;
}
/** The fulfillment's details. */
export interface AdminOrderFulfillment {
    /**
     * id
     * The fulfillment's ID.
     */
    id: string;
    /**
     * location_id
     * The ID of the location the items are fulfilled from.
     */
    location_id: string;
    /**
     * packed_at
     * The date the items were packed.
     * @format date-time
     */
    packed_at: string;
    /**
     * shipped_at
     * The date the items were shipped.
     * @format date-time
     */
    shipped_at: string;
    /**
     * delivered_at
     * The date the items were delivered.
     * @format date-time
     */
    delivered_at: string;
    /**
     * canceled_at
     * The date the items were canceled.
     * @format date-time
     */
    canceled_at: string;
    /** Data useful for the fulfillment provider handling it. This is taken from the associated shipping option. */
    data: object;
    /**
     * provider_id
     * The ID of the fulfillment provider used to handle the fulfillment.
     */
    provider_id: string;
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /** The fulfillment's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the fulfillment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the fulfillment was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * requires_shipping
     * Whether the fulfillment requires shipping.
     */
    requires_shipping: boolean;
}
/** The order item's details. */
export interface AdminOrderItem {
    /**
     * order_id
     * The ID of the order this item belongs to.
     */
    order_id: string;
    /**
     * item_id
     * The ID of the associated line item.
     */
    item_id: string;
    /**
     * version
     * The order item's version.
     */
    version: number;
    /** The order item's history. */
    history: {
        /** The version changes of the item. */
        version: {
            /**
             * from
             * The original version.
             */
            from: number;
            /**
             * to
             * The new version.
             */
            to: number;
        };
    };
    /** The item's details. */
    item: AdminOrderLineItem;
}
/** The item's details. */
export interface AdminOrderLineItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle: string;
    /**
     * thumbnail
     * The URL of the item's thumbnail.
     */
    thumbnail: string;
    /** The product variant's details. */
    variant?: AdminProductVariant;
    /**
     * variant_id
     * The ID of the associated variant.
     */
    variant_id: string;
    /** The product's details. */
    product?: AdminProduct;
    /**
     * product_id
     * The ID of the associated product.
     */
    product_id: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle: string;
    /**
     * product_type
     * The item's product type.
     */
    product_type: string;
    /**
     * product_collection
     * The ID of the collection the item's product belongs to.
     */
    product_collection: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle: string;
    /**
     * variant_sku
     * The item's variant SKU.
     */
    variant_sku: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title: string;
    /**
     * The values of the item variant's options.
     * @example {"Color":"Blue"}
     */
    variant_option_values: object;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping: boolean;
    /**
     * is_discountable
     * Whether the item is discountable.
     */
    is_discountable: boolean;
    /**
     * is_tax_inclusive
     * Whether the item is tax inclusive.
     */
    is_tax_inclusive: boolean;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price: number;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's tax lines. */
    tax_lines?: BaseOrderLineItemTaxLine[];
    /** The item's adjustments. */
    adjustments?: BaseOrderLineItemAdjustment[];
    detail: object;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * original_total
     * The item's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The item's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the item, excluding promotions.
     */
    original_tax_total: number;
    /**
     * item_total
     * The total taxes of the item, including promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The item's total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The total taxes of the item, including promotions.
     */
    item_tax_total: number;
    /**
     * total
     * The item's total, including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's subtotal excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The tax total of the item including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discount amount of the item.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * refundable_total
     * The total refundable amount of the item's total.
     */
    refundable_total: number;
    /**
     * refundable_total_per_unit
     * The total refundable amount of the item's total for a single quantity.
     */
    refundable_total_per_unit: number;
    /**
     * product_type_id
     * The ID of the associated product's type.
     */
    product_type_id: string;
}
/** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
export interface AdminOrderPreview {
    /**
     * return_requested_total
     * The total of the requested return.
     */
    return_requested_total: number;
    /** The order change's details. */
    order_change: AdminOrderChange;
    /** The order's items. */
    items?: ({
        /**
         * id
         * The item's ID.
         */
        id: string;
        /**
         * title
         * The item's title.
         */
        title: string;
        /**
         * subtitle
         * The item's subtitle.
         */
        subtitle: string;
        /**
         * thumbnail
         * The URL of the item's thumbnail.
         */
        thumbnail: string;
        /** The product variant's details. */
        variant?: BaseProductVariant;
        /**
         * variant_id
         * The ID of the associated variant.
         */
        variant_id: string;
        /** The product's details. */
        product?: AdminProduct;
        /**
         * product_id
         * The ID of the associated product.
         */
        product_id: string;
        /**
         * product_title
         * The title of the item's product.
         */
        product_title: string;
        /**
         * product_description
         * The description of the item's product.
         */
        product_description: string;
        /**
         * product_subtitle
         * The subtitle of the item's product.
         */
        product_subtitle: string;
        /**
         * product_type
         * The ID of type of the item's product.
         */
        product_type: string;
        /**
         * product_collection
         * The ID of collection of the item's product.
         */
        product_collection: string;
        /**
         * product_handle
         * The handle of the item's product.
         */
        product_handle: string;
        /**
         * variant_sku
         * The SKU of the item's variant.
         */
        variant_sku: string;
        /**
         * variant_barcode
         * The barcode of the item's variant.
         */
        variant_barcode: string;
        /**
         * variant_title
         * The title of the item's variant.
         */
        variant_title: string;
        /** The option values of the item's variant as key-value pairs. The key is the title of an option, and the value is the option's value. */
        variant_option_values: object;
        /**
         * requires_shipping
         * Whether the item requires shipping.
         */
        requires_shipping: boolean;
        /**
         * is_discountable
         * Whether the item is discountable.
         */
        is_discountable: boolean;
        /**
         * is_tax_inclusive
         * Whether the item's price includes taxes.
         */
        is_tax_inclusive: boolean;
        /**
         * compare_at_unit_price
         * The original price of the item before a promotion or sale.
         */
        compare_at_unit_price?: number;
        /**
         * unit_price
         * The item's unit price.
         */
        unit_price: number;
        /**
         * quantity
         * The item's quantity.
         */
        quantity: number;
        /** The item's tax lines. */
        tax_lines?: BaseOrderLineItemTaxLine[];
        /** The item's adjustments. */
        adjustments?: BaseOrderLineItemAdjustment[];
        /** The item's detail. */
        detail: BaseOrderItemDetail;
        /**
         * created_at
         * The date the item was created.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The date the item was updated.
         * @format date-time
         */
        updated_at: string;
        /** The item's metadata, can hold custom key-value pairs. */
        metadata: object;
        /**
         * original_total
         * The item's total including taxes, excluding promotions.
         */
        original_total: number;
        /**
         * original_subtotal
         * The item's total excluding taxes, including promotions.
         */
        original_subtotal: number;
        /**
         * original_tax_total
         * The tax total of the item excluding promotions.
         */
        original_tax_total: number;
        /**
         * item_total
         * The item's total for a single unit including taxes and promotions.
         */
        item_total: number;
        /**
         * item_subtotal
         * The item's total for a single unit excluding taxes, including promotions.
         */
        item_subtotal: number;
        /**
         * item_tax_total
         * The tax total for a single unit of the item including promotions.
         */
        item_tax_total: number;
        /**
         * total
         * The item's total including taxes and promotions.
         */
        total: number;
        /**
         * subtotal
         * The item's total excluding taxes, including promotions.
         */
        subtotal: number;
        /**
         * tax_total
         * The tax total of the item including promotions.
         */
        tax_total: number;
        /**
         * discount_total
         * The total of the item's discount / promotion.
         */
        discount_total: number;
        /**
         * discount_tax_total
         * The tax total of the item's discount / promotion
         */
        discount_tax_total: number;
        /**
         * refundable_total
         * The total refundable amount of the item's total.
         */
        refundable_total: number;
        /**
         * refundable_total_per_unit
         * The total refundable amount of the item's total for a single unit.
         */
        refundable_total_per_unit: number;
    } & {
        /** The actions applied on an item. */
        actions?: object[];
    })[];
    /** The order's shipping methods. */
    shipping_methods?: ({
        /**
         * id
         * The shipping method's ID.
         */
        id: string;
        /**
         * order_id
         * The ID of the order this shipping method belongs to.
         */
        order_id: string;
        /**
         * name
         * The shipping method's name.
         */
        name: string;
        /**
         * description
         * The shipping method's description.
         */
        description?: string;
        /**
         * amount
         * The shipping method's amount.
         */
        amount: number;
        /**
         * is_tax_inclusive
         * Whether the shipping method's amount is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * shipping_option_id
         * The ID of the shipping option this method was created from.
         */
        shipping_option_id: string;
        /** The data relevant for the fulfillment provider to process this shipment. */
        data: object;
        /** The shipping method's metadata, can hold custom key-value pairs. */
        metadata: object;
        /** The shipping method's tax lines. */
        tax_lines?: BaseOrderShippingMethodTaxLine[];
        /** The shipping method's adjustments. */
        adjustments?: BaseOrderShippingMethodAdjustment[];
        /** The shipping method's total including taxes, excluding promotions. */
        original_total: string | number;
        /** The shipping method's total excluding taxes, including promotions. */
        original_subtotal: string | number;
        /** The tax total of the shipping method excluding promotions. */
        original_tax_total: string | number;
        /** The shipping method's total including taxes and promotions. */
        total: string | number;
        /** The shipping method's total excluding taxes, including promotions. */
        subtotal: string | number;
        /** The tax total of the shipping method including promotions. */
        tax_total: string | number;
        /** The total of the shipping method's promotion. */
        discount_total: string | number;
        /** The tax total of the shipping method's promotion. */
        discount_tax_total: string | number;
        /**
         * created_at
         * The date the shipping method was created.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The date the shipping method was updated.
         * @format date-time
         */
        updated_at: string;
    } & {
        /** The actions applied on the shipping method. */
        actions?: object[];
    })[];
    /**
     * currency_code
     * The order's currency code.
     */
    currency_code: string;
    /**
     * version
     * The order's version when this preview is applied.
     */
    version: number;
    /**
     * id
     * The order's ID.
     */
    id: string;
    /**
     * region_id
     * The ID of the order's associated region.
     */
    region_id: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id: string;
    /**
     * sales_channel_id
     * The ID of the sales channel that the order was placed in.
     */
    sales_channel_id: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email: string;
    /**
     * display_id
     * The order's display ID.
     */
    display_id?: number;
    /** An order address. */
    shipping_address?: AdminOrderAddress;
    /** An order address. */
    billing_address?: AdminOrderAddress;
    /** The order's payment collections. */
    payment_collections: AdminPaymentCollection[];
    /** The order's payment status. */
    payment_status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "captured" | "partially_captured" | "partially_refunded" | "refunded" | "requires_action";
    /** The order's fulfillments. */
    fulfillments?: AdminOrderFulfillment[];
    /** The order's fulfillment status. */
    fulfillment_status: "canceled" | "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_delivered" | "delivered";
    /** The order's transactions. */
    transactions?: BaseOrderTransaction[];
    /** The order's summary details. */
    summary: BaseOrderSummary;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_item_total
     * The total of the order's items including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The tax total of the order's items excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The total of the order's items including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The tax total of the order's items including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The order's total excluding promotions, including taxes.
     */
    original_total: number;
    /**
     * original_subtotal
     * The order's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The order's tax total, excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The order's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The order's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The order's discount or promotions total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The tax total of order's discount or promotion.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The order's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The tax total of the order's gift card.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The order's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The tax total of the order's shipping.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The tax total of the order's shipping excluding promotions.
     */
    original_shipping_tax_total: number;
    /** The customer's details. */
    customer?: AdminCustomer;
    /** The sales channel's details. */
    sales_channel?: AdminSalesChannel;
    /**
     * status
     * The order's status.
     */
    status: string;
}
/** The preview of an order. */
export interface AdminOrderPreviewResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order: AdminOrderPreview;
}
/** An order's details. */
export interface AdminOrderResponse {
    /** The order's details. */
    order: AdminOrder;
}
/** The order return details. */
export interface AdminOrderReturnResponse {
    /** The order change's order. */
    order: Order;
    /** The return's details. */
    return: AdminReturn;
}
/** The shipping method's details. */
export interface AdminOrderShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order the shipping method belongs to.
     */
    order_id: string;
    /**
     * name
     * The shipping method's name.
     */
    name: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount includes applied taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id: string;
    /** The shipping method's data, useful for fulfillment provider handling its fulfillment. */
    data: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata: object;
    /** The shipping method's tax lines. */
    tax_lines?: BaseOrderShippingMethodTaxLine[];
    /** The shipping method's adjustments. */
    adjustments?: BaseOrderShippingMethodAdjustment[];
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The shipping method's total taxes excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The shipping method's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discounts applied on the shipping method.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The taxes applied on the discount amount.
     */
    discount_tax_total: number;
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at: string;
    /** Details of changes to a shipping method. */
    detail?: BaseOrderShippingDetail;
}
/** The payment's details. */
export interface AdminPayment {
    /**
     * id
     * The payment's ID.
     */
    id: string;
    /**
     * amount
     * The payment's amount.
     */
    amount: number;
    /**
     * authorized_amount
     * The amount authorized of the payment.
     */
    authorized_amount?: number;
    /**
     * currency_code
     * The payment's currency code.
     */
    currency_code: string;
    /**
     * provider_id
     * The ID of the payment provider used to process this payment.
     */
    provider_id: string;
    /** The payment's data, useful for processing by the payment provider. */
    data?: object;
    /**
     * created_at
     * The date the payment was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the payment was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * captured_at
     * The date the payment was captured.
     * @format date-time
     */
    captured_at?: string;
    /**
     * canceled_at
     * The date the payment was canceled.
     * @format date-time
     */
    canceled_at?: string;
    /**
     * captured_amount
     * The captured amount of the payment.
     */
    captured_amount?: number;
    /**
     * captured_amount
     * The refunded amount of the payment.
     */
    refunded_amount?: number;
    /** The details of payment captures. */
    captures?: BaseCapture[];
    /** The details of payment refunds. */
    refunds?: AdminRefund[];
    payment_collection?: object;
    /** The payment session's details. */
    payment_session?: AdminPaymentSession;
}
/** The payment collection's details. */
export interface AdminPaymentCollection {
    /**
     * id
     * The payment collection's ID.
     */
    id: string;
    /**
     * currency_code
     * The payment collection's currency code.
     */
    currency_code: string;
    /**
     * amount
     * The total amount to be paid.
     */
    amount: number;
    /**
     * authorized_amount
     * The total authorized amount of the collection's payments.
     */
    authorized_amount?: number;
    /**
     * captured_amount
     * The total captured amount of the collection's payments.
     */
    captured_amount?: number;
    /**
     * refunded_amount
     * The total refunded amount of the collection's payments.
     */
    refunded_amount?: number;
    /**
     * completed_at
     * The date the payment collection was completed.
     * @format date-time
     */
    completed_at?: string;
    /**
     * created_at
     * The date the payment collection was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the payment collection was updated.
     * @format date-time
     */
    updated_at?: string;
    /** The payment collection's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The payment collection's status. */
    status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized";
    /** The payment provider used to process the collection's payments and sessions. */
    payment_providers: AdminPaymentProvider[];
    /** The payment collection's payment sessions. */
    payment_sessions?: AdminPaymentSession[];
    /** The payment collection's payments. */
    payments?: AdminPayment[];
}
/** The payment collection's details. */
export interface AdminPaymentCollectionResponse {
    /** The payment collection's details. */
    payment_collection: AdminPaymentCollection;
}
/** The payment provider's details. */
export interface AdminPaymentProvider {
    /**
     * id
     * The payment provider's ID.
     */
    id: string;
    /**
     * is_enabled
     * Whether the payment provider is enabled.
     */
    is_enabled: boolean;
}
/** The payment's details. */
export interface AdminPaymentResponse {
    /** The payment's details. */
    payment: AdminPayment;
}
/** The payment session's details. */
export interface AdminPaymentSession {
    /**
     * id
     * The payment session's ID.
     */
    id: string;
    /**
     * amount
     * The payment session's amount.
     */
    amount: number;
    /**
     * currency_code
     * The payment session's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * provider_id
     * The ID of the payment provider processing this session.
     */
    provider_id: string;
    /** The payment session's data, useful for the payment provider processing the payment. */
    data: object;
    /**
     * The context around the payment, such as the customer's details.
     * @example {"customer":{"id":"cus_123"}}
     */
    context?: object;
    /** The payment session's status. */
    status: "authorized" | "captured" | "canceled" | "pending" | "requires_more" | "error";
    /**
     * authorized_at
     * The date the payment session was authorized.
     * @format date-time
     */
    authorized_at?: string;
    payment_collection?: object;
    /** The payment's details. */
    payment?: BasePayment;
}
/** The details of canceling a claim. */
export interface AdminPostCancelClaimReqSchema {
    /**
     * no_notification
     * Whether to send the customer a notification about the claim's cancelation.
     */
    no_notification?: boolean;
}
/** The details of canceling an exchange. */
export interface AdminPostCancelExchangeReqSchema {
    /**
     * no_notification
     * Whether to send a notification to the customer about the exchange's cancelation.
     */
    no_notification?: boolean;
}
/** The details of canceling a return. */
export interface AdminPostCancelReturnReqSchema {
    /**
     * no_notification
     * Whether to send the customer a notification about the return's cancelation.
     */
    no_notification?: boolean;
}
/** The details of the order items to add to the claim. */
export interface AdminPostClaimItemsReqSchema {
    /** The item's details. */
    items?: {
        /**
         * id
         * The ID of the order's item.
         */
        id: string;
        /**
         * quantity
         * The quantity of the order's item to add to the claim.
         */
        quantity: number;
        /** The reason the item is claimed. */
        reason?: "missing_item" | "wrong_item" | "production_failure" | "other";
        /**
         * description
         * The item's description.
         */
        description?: string;
        /**
         * internal_note
         * A note that's only viewed by admin users.
         */
        internal_note?: string;
    }[];
}
/** The details of the outbound items to add to the claim. */
export interface AdminPostClaimsAddItemsReqSchema {
    /** The outbound item's details. */
    items?: {
        /**
         * variant_id
         * The ID of the associated product variant.
         */
        variant_id: string;
        /**
         * quantity
         * The quantity to send to the customer.
         */
        quantity: number;
        /**
         * unit_price
         * The item's unit price.
         */
        unit_price?: number;
        /**
         * internal_note
         * A note viewed only by admin users.
         */
        internal_note?: string;
        /** The item's metadata, can hold custom key-value pairs. */
        metadata?: object;
    }[];
}
/** The details to update in the item. */
export interface AdminPostClaimsItemsActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * reason_id
     * The ID of the return reason associated with the item.
     */
    reason_id?: string;
    /**
     * internal_note
     * A note that's only viewed by admin users.
     */
    internal_note?: string;
}
/** The details to update in the shipping method. */
export interface AdminPostClaimsShippingActionReqSchema {
    /**
     * custom_amount
     * The shipping method's custom amount.
     */
    custom_amount?: number;
    /**
     * internal_note
     * A note only viewed by admin users.
     */
    internal_note?: string;
    /** The claim's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of the shipping method used to ship outbound items. */
export interface AdminPostClaimsShippingReqSchema {
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /**
     * custom_amount
     * Set a custom price for the shipping method.
     */
    custom_amount?: number;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * internal_note
     * A note only viewed by admin users.
     */
    internal_note?: string;
    /** The claim's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of outbound items. */
export interface AdminPostExchangesAddItemsReqSchema {
    /** The details of outbound items. */
    items?: {
        /**
         * variant_id
         * The ID of the associated product variant.
         */
        variant_id: string;
        /**
         * quantity
         * The item's quantity.
         */
        quantity: number;
        /**
         * unit_price
         * The item's unit price.
         */
        unit_price?: number;
        /**
         * internal_note
         * A note viewed only by admin users.
         */
        internal_note?: string;
        /**
         * allow_backorder
         * Whether the item can be added even if it's not in stock.
         */
        allow_backorder?: boolean;
        /** The item's metadata, can hold custom key-value pairs. */
        metadata?: object;
    }[];
}
/** The details to update in an outbound item. */
export interface AdminPostExchangesItemsActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * internal_note
     * A note only viewed by admin users.
     */
    internal_note?: string;
}
/** The details to update in an inbound (returned) item. */
export interface AdminPostExchangesRequestItemsReturnActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * reason_id
     * The ID of the associated return reason.
     */
    reason_id?: string;
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of the inbound (return) items. */
export interface AdminPostExchangesReturnRequestItemsReqSchema {
    /** The details of the inbound (return) items. */
    items?: {
        /**
         * id
         * The ID of the order's item.
         */
        id: string;
        /**
         * quantity
         * The item's quantity.
         */
        quantity: number;
        /**
         * description
         * The item's description.
         */
        description?: string;
        /**
         * internal_note
         * A note viewed only by admin users.
         */
        internal_note?: string;
        /**
         * reason_id
         * The ID of the return reason to associate with the item.
         */
        reason_id?: string;
        /** The item's metadata, can hold custom key-value pairs. */
        metadata?: object;
    }[];
}
/** The details of the shipping method to update. */
export interface AdminPostExchangesShippingActionReqSchema {
    /**
     * custom_amount
     * The shipping method's custom amount.
     */
    custom_amount?: number;
    /**
     * internal_note
     * A note viewed by admin users only.
     */
    internal_note?: string;
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The outbound shipping method's details. */
export interface AdminPostExchangesShippingReqSchema {
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /**
     * custom_amount
     * Set a custom amount for the shipping method.
     */
    custom_amount?: number;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed by admin users only.
     */
    internal_note?: string;
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The claim's details. */
export interface AdminPostOrderClaimsReqSchema {
    /** The claim's type. */
    type: "refund" | "replace";
    /**
     * order_id
     * The ID of the order the claim is created for.
     */
    order_id: string;
    /**
     * description
     * The claim's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * reason_id
     * The ID of the associated return reason.
     */
    reason_id?: string;
    /** The claim's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of items to be edited. */
export interface AdminPostOrderEditsAddItemsReqSchema {
    /** The details of items to be edited. */
    items?: {
        /**
         * variant_id
         * The ID of the associated product variant.
         */
        variant_id: string;
        /**
         * quantity
         * The item's quantity.
         */
        quantity: number;
        /**
         * unit_price
         * The item's unit price.
         */
        unit_price?: number;
        /**
         * internal_note
         * A note viewed only by admin users.
         */
        internal_note?: string;
        /**
         * allow_backorder
         * Whether the item can be added even if there's no available invenotory quantity of the variant.
         */
        allow_backorder?: boolean;
        /** The item's metadata, can hold custom key-value pairs. */
        metadata?: object;
        /**
         * compare_at_unit_price
         * The original price of the item before a promotion or sale.
         */
        compare_at_unit_price?: number;
    }[];
}
/** The details to update in the item. */
export interface AdminPostOrderEditsItemsActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price?: number;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
}
/** The order edit's details. */
export interface AdminPostOrderEditsReqSchema {
    /**
     * order_id
     * The ID of the order this edit is for.
     */
    order_id: string;
    /**
     * description
     * The order edit's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /** The order edit's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The shipping method's details. */
export interface AdminPostOrderEditsShippingActionReqSchema {
    /**
     * custom_amount
     * Set a custom price for the shipping method.
     */
    custom_amount?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /** The order edit's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The shipping method's details. */
export interface AdminPostOrderEditsShippingReqSchema {
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /**
     * custom_amount
     * Set a custom price for the shipping method.
     */
    custom_amount?: number;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The order item's details to update. */
export interface AdminPostOrderEditsUpdateItemQuantityReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price?: number;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
}
/** The exchange's details. */
export interface AdminPostOrderExchangesReqSchema {
    /**
     * order_id
     * The ID of the order this exchange is created for.
     */
    order_id: string;
    /**
     * description
     * The exchange's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The return receival details. */
export interface AdminPostReceiveReturnsReqSchema {
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * description
     * The return's description.
     */
    description?: string;
    /** The return's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The confirmation's details. */
export interface AdminPostReturnsConfirmRequestReqSchema {
    /**
     * no_notification
     * Whether to send the customer a notification about the confirmation.
     */
    no_notification?: boolean;
}
/** The details to update of the damaged item. */
export interface AdminPostReturnsDismissItemsActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
}
/** The details of the received item. */
export interface AdminPostReturnsReceiveItemsActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
}
/** The items details. */
export interface AdminPostReturnsReceiveItemsReqSchema {
    /** The items details. */
    items?: {
        /**
         * id
         * The ID of the item in the order.
         */
        id: string;
        /**
         * quantity
         * The item's quantity.
         */
        quantity: number;
        /**
         * description
         * The item's description.
         */
        description?: string;
        /**
         * internal_note
         * A note viewed only by admin users.
         */
        internal_note?: string;
    }[];
}
/** The return's details. */
export interface AdminPostReturnsReqSchema {
    /**
     * order_id
     * The ID of the order the return belongs to.
     */
    order_id: string;
    /**
     * location_id
     * The ID of the location the items are returned to.
     */
    location_id?: string;
    /**
     * description
     * The return's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * no_notification
     * Whether to send the customer a notification about the created return.
     */
    no_notification?: boolean;
    /** The return's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in the item. */
export interface AdminPostReturnsRequestItemsActionReqSchema {
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * reason_id
     * The ID of the associated return reason.
     */
    reason_id?: string;
    /** The claim's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The items' details. */
export interface AdminPostReturnsRequestItemsReqSchema {
    /** The items' details. */
    items?: {
        /**
         * id
         * The item's ID.
         */
        id: string;
        /**
         * quantity
         * The item's quantity.
         */
        quantity: number;
        /**
         * description
         * The item's description.
         */
        description?: string;
        /**
         * internal_note
         * A note viewed only by admin users.
         */
        internal_note?: string;
        /**
         * reason_id
         * The ID of the associated return reason.
         */
        reason_id?: string;
        /** The item's metadata, can hold custom key-value pairs. */
        metadata?: object;
    }[];
}
/** The return's details. */
export interface AdminPostReturnsReturnReqSchema {
    /**
     * location_id
     * The ID of the location to return items to.
     */
    location_id?: string;
    /**
     * no_notification
     * Whether the customer should receive notifications about updates to the return.
     */
    no_notification?: boolean;
    /** The return's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The shipping method's details. */
export interface AdminPostReturnsShippingActionReqSchema {
    /**
     * custom_amount
     * Set a custom price for the shipping method.
     */
    custom_amount?: number;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /** The return's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The shipping method's details. */
export interface AdminPostReturnsShippingReqSchema {
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /**
     * custom_amount
     * Set the price of the shipping method.
     */
    custom_amount?: number;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * internal_note
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The price's details. */
export interface AdminPrice {
    /**
     * id
     * The price's ID.
     */
    id: string;
    /**
     * title
     * The price's title.
     */
    title: string;
    /**
     * currency_code
     * The price's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * amount
     * The price's amount.
     */
    amount: number;
    /** The price's raw amount. */
    raw_amount: object;
    /**
     * min_quantity
     * The minimum quantity that must be available in the cart for the price to be applied.
     */
    min_quantity: number;
    /**
     * max_quantity
     * The maximum quantity allowed to be available in the cart for the price to be applied.
     */
    max_quantity: number;
    /**
     * price_set_id
     * The ID of the associated price set.
     */
    price_set_id: string;
    /**
     * created_at
     * The date the price was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The price list's details. */
export interface AdminPriceList {
    /**
     * id
     * The price list's ID.
     */
    id: string;
    /**
     * title
     * The price list's title.
     */
    title: string;
    /**
     * description
     * The price list's description.
     */
    description: string;
    /** The price list's rules. */
    rules: object;
    /**
     * starts_at
     * The date the price list starts.
     */
    starts_at: string;
    /**
     * ends_at
     * The date the price list ends.
     */
    ends_at: string;
    /** The price list's status. */
    status: "draft" | "active";
    /** The price list's type. */
    type: "sale" | "override";
    /** The price list's prices. */
    prices: AdminPriceListPrice[];
    /**
     * created_at
     * The date the price list was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price list was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price list was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the created, updated, and deleted prices in a price list. */
export interface AdminPriceListBatchResponse {
    /** The created prices. */
    created: AdminPrice[];
    /** The updated prices. */
    updated: AdminPrice[];
    /** The details of the deleted prices. */
    deleted: {
        /** The IDs of the deleted prices. */
        ids: string[];
        /**
         * object
         * The name of the deleted object.
         * @default "price"
         */
        object: string;
        /**
         * deleted
         * Whether the prices were deleted.
         */
        deleted: boolean;
    };
}
/** The details of the deleted price list. */
export interface AdminPriceListDeleteResponse {
    /**
     * id
     * The price list's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "price_list"
     */
    object: string;
    /**
     * deleted
     * Whether the price list was deleted.
     */
    deleted: boolean;
}
/** The paginated list of price lists. */
export interface AdminPriceListListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of price lists. */
    price_lists: AdminPriceList[];
}
/** The details of a price list's price. */
export interface AdminPriceListPrice {
    /**
     * variant_id
     * The ID of the product variant this price list is for.
     */
    variant_id: string;
    /** The price's rules. */
    rules: object;
    /**
     * id
     * The price's ID.
     */
    id: string;
    /**
     * title
     * The price's title.
     */
    title: string;
    /**
     * currency_code
     * The price's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * amount
     * The price's amount.
     */
    amount: number;
    /** The price's raw amount. */
    raw_amount: object;
    /**
     * min_quantity
     * The minimum quantity that must be available in the cart for the price to be applied.
     */
    min_quantity: number;
    /**
     * max_quantity
     * The maximum quantity allowed to be available in the cart for the price to be applied.
     */
    max_quantity: number;
    /**
     * price_set_id
     * The ID of the price set this price belongs to.
     */
    price_set_id: string;
    /**
     * created_at
     * The date the price was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The price list's details. */
export interface AdminPriceListResponse {
    /** The price list's details. */
    price_list: AdminPriceList;
}
/** The price preference's details. */
export interface AdminPricePreference {
    /**
     * id
     * The price preference's ID.
     */
    id: string;
    /**
     * attribute
     * The price preference's attribute.
     * @example "region_id"
     */
    attribute: string;
    /**
     * value
     * The price preference's value.
     * @example "reg_123"
     */
    value: string;
    /**
     * is_tax_inclusive
     * Whether prices matching this preference include taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * created_at
     * The date the price preference was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price preference was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price preference was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the deleted price preference. */
export interface AdminPricePreferenceDeleteResponse {
    /**
     * id
     * The price preference's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "price_preference"
     */
    object: string;
    /**
     * deleted
     * Whether the price preference was deleted.
     */
    deleted: boolean;
}
/** The paginated list of price preferences. */
export interface AdminPricePreferenceListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total count of items.
     */
    count: number;
    /** The list of price preferences. */
    price_preferences: AdminPricePreference[];
}
/** The price preference's details. */
export interface AdminPricePreferenceResponse {
    /** The price preference's details. */
    price_preference: AdminPricePreference;
}
/** The product's details. */
export interface AdminProduct {
    /** The product collection's details. */
    collection?: AdminCollection;
    /** The product's categories. */
    categories?: AdminProductCategory[];
    /** The sales channels that the product is available in. */
    sales_channels?: AdminSalesChannel[];
    /** The product's variants. */
    variants: AdminProductVariant[];
    /** The product type's details. */
    type: AdminProductType;
    /** The product's tags. */
    tags?: AdminProductTag[];
    /**
     * length
     * The product's length.
     */
    length: number;
    /**
     * title
     * The product's title.
     */
    title: string;
    /** The product's status. */
    status: "draft" | "proposed" | "published" | "rejected";
    /** The product's options. */
    options: AdminProductOption[];
    /**
     * description
     * The product's description.
     */
    description: string;
    /**
     * id
     * The product's ID.
     */
    id: string;
    /** The product's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the product was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * handle
     * The product's unique handle.
     */
    handle: string;
    /**
     * subtitle
     * The product's subtitle.
     */
    subtitle: string;
    /**
     * is_giftcard
     * Whether the product is a gift card.
     */
    is_giftcard: boolean;
    /**
     * thumbnail
     * The product's thumbnail.
     */
    thumbnail: string;
    /**
     * width
     * The product's width.
     */
    width: number;
    /**
     * weight
     * The product's weight.
     */
    weight: number;
    /**
     * height
     * The product's height.
     */
    height: number;
    /**
     * origin_country
     * The product's origin country.
     */
    origin_country: string;
    /**
     * hs_code
     * The product's HS code.
     */
    hs_code: string;
    /**
     * mid_code
     * The product's MID code.
     */
    mid_code: string;
    /**
     * material
     * The product's material.
     */
    material: string;
    /**
     * collection_id
     * The ID of the collection that the product belongs to.
     */
    collection_id: string;
    /**
     * type_id
     * The ID of the product's type.
     */
    type_id: string;
    /** The product's images. */
    images: AdminProductImage[];
    /**
     * discountable
     * Whether discounts can be applied on the product.
     */
    discountable: boolean;
    /**
     * external_id
     * The ID of a product in an external system, such as an ERP or CMS.
     */
    external_id: string;
    /**
     * deleted_at
     * The date the product was deleted.
     * @format date-time
     */
    deleted_at: string;
    /** The shipping profile's details.. */
    shipping_profile?: AdminShippingProfile;
}
/** The product category's details. */
export interface AdminProductCategory {
    /** The category's children. */
    category_children: object[];
    parent_category: object;
    /** The category's products. */
    products?: object[];
    /**
     * name
     * The category's name.
     */
    name: string;
    /**
     * description
     * The category's description.
     */
    description: string;
    /**
     * id
     * The category's ID.
     */
    id: string;
    /** The category's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the category was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the category was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * handle
     * The category's unique handle.
     */
    handle: string;
    /**
     * deleted_at
     * The date the category was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * is_active
     * Whether the category is active. If disabled, the category isn't shown in the storefront.
     */
    is_active: boolean;
    /**
     * is_internal
     * Whether the category is internal. If enabled, the category is only seen by admin users.
     */
    is_internal: boolean;
    /**
     * rank
     * The category's rank among sibling categories.
     */
    rank: number;
    /**
     * parent_category_id
     * The ID of the category's parent.
     */
    parent_category_id: string;
}
/** The details of deleting the category. */
export interface AdminProductCategoryDeleteResponse {
    /**
     * id
     * The product category's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "product_category"
     */
    object: string;
    /**
     * deleted
     * Whether the product category was deleted.
     */
    deleted: boolean;
}
/** The paginated list of product categories. */
export interface AdminProductCategoryListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of product categories. */
    product_categories: AdminProductCategory[];
}
/** The product category's details. */
export interface AdminProductCategoryResponse {
    /** The product category's details. */
    product_category: AdminProductCategory;
}
/** The details of the product deletion. */
export interface AdminProductDeleteResponse {
    /**
     * id
     * The product's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "product"
     */
    object: string;
    /**
     * deleted
     * Whether the product was deleted.
     */
    deleted: boolean;
}
/** The image's details. */
export interface AdminProductImage {
    /**
     * id
     * The image's ID.
     */
    id: string;
    /**
     * url
     * The image's URL.
     */
    url: string;
    /**
     * created_at
     * The date the image was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the image was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the image was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The image's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * rank
     * The image's rank among sibling images.
     */
    rank: number;
}
/** The product option's details. */
export interface AdminProductOption {
    /**
     * id
     * The product option's ID.
     */
    id: string;
    /**
     * title
     * The product option's title.
     */
    title: string;
    product?: object;
    /**
     * product_id
     * The ID of the product this option belongs to.
     */
    product_id?: string;
    /** The product option's values. */
    values?: object[];
    /** The product option's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product option was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the product option was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the product option was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The details of the product option deletion. */
export interface AdminProductOptionDeleteResponse {
    /**
     * id
     * The product option's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "product_option"
     */
    object: string;
    /**
     * deleted
     * Whether the product option was deleted.
     */
    deleted: boolean;
    /** The product's details. */
    parent?: AdminProduct;
}
/** The product option's details. */
export interface AdminProductOptionResponse {
    /** The product option's details. */
    product_option: AdminProductOption;
}
/** The product option value's details. */
export interface AdminProductOptionValue {
    /**
     * id
     * The value's ID.
     */
    id: string;
    /**
     * value
     * The value.
     */
    value: string;
    /** The product option's details. */
    option?: AdminProductOption;
    /**
     * option_id
     * The ID of the option this value belongs to.
     */
    option_id?: string;
    /** The value's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the value was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the value was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the value was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The product's details. */
export interface AdminProductResponse {
    /** The product's details. */
    product: AdminProduct;
}
/** The product tag's details. */
export interface AdminProductTag {
    /**
     * id
     * The tag's ID.
     */
    id: string;
    /**
     * value
     * The tag's value.
     */
    value: string;
    /**
     * created_at
     * The date the tag was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tag was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the tag was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The tag's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of the product tag deletion. */
export interface AdminProductTagDeleteResponse {
    /**
     * id
     * The product tag's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "product_tag"
     */
    object: string;
    /**
     * deleted
     * Whether the product tag was deleted.
     */
    deleted: boolean;
}
/** The paginated list of product tags. */
export interface AdminProductTagListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of product tags. */
    product_tags: AdminProductTag[];
}
/** The product tag's details. */
export interface AdminProductTagResponse {
    /** The product tag's details. */
    product_tag: AdminProductTag;
}
/** The product type's details. */
export interface AdminProductType {
    /**
     * id
     * The type's ID.
     */
    id: string;
    /**
     * value
     * The type's value.
     */
    value: string;
    /**
     * created_at
     * The date the type was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the type was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the type was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The type's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of the product type deletion. */
export interface AdminProductTypeDeleteResponse {
    /**
     * id
     * The product type's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "product_type"
     */
    object: string;
    /**
     * deleted
     * Whether the product type was deleted.
     */
    deleted: boolean;
}
/** The paginated list of product types. */
export interface AdminProductTypeListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of product types. */
    product_types: AdminProductType[];
}
/** The product type's details. */
export interface AdminProductTypeResponse {
    /** The product type's details. */
    product_type: AdminProductType;
}
/** The product variant's details. */
export interface AdminProductVariant {
    /** The variant's prices. */
    prices: AdminPrice[];
    /**
     * id
     * The variant's ID.
     */
    id: string;
    /**
     * title
     * The variant's title.
     */
    title: string;
    /**
     * sku
     * The variant's SKU.
     */
    sku: string;
    /**
     * barcode
     * The variant's barcode.
     */
    barcode: string;
    /**
     * ean
     * The variant's EAN code.
     */
    ean: string;
    /**
     * upc
     * The variant's UPC.
     */
    upc: string;
    /**
     * allow_backorder
     * Whether the variant can be ordered even if it's out of stock.
     */
    allow_backorder: boolean;
    /**
     * manage_inventory
     * Whether the Medusa application manages the variant's inventory quantity and availablility. If disabled, the variant is always considered in stock.
     */
    manage_inventory: boolean;
    /**
     * inventory_quantity
     * The variant's inventory quantity. This is only included if you pass in the `fields` query parameter a `+variants.inventory_quantity` parameter.
     */
    inventory_quantity?: number;
    /**
     * hs_code
     * The variant's HS code.
     */
    hs_code: string;
    /**
     * origin_country
     * The variant's origin country.
     */
    origin_country: string;
    /**
     * mid_code
     * The variant's MID code.
     */
    mid_code: string;
    /**
     * material
     * The variant's material.
     */
    material: string;
    /**
     * weight
     * The variant's weight.
     */
    weight: number;
    /**
     * length
     * The variant's length.
     */
    length: number;
    /**
     * height
     * The variant's height.
     */
    height: number;
    /**
     * width
     * The variant's width.
     */
    width: number;
    /**
     * variant_rank
     * The variant's rank among its sibling variants.
     */
    variant_rank?: number;
    /** The variant's option values. */
    options: AdminProductOptionValue[];
    product?: object;
    /**
     * product_id
     * The ID of the product that the variant belongs to.
     */
    product_id?: string;
    /** The calculated price's details. */
    calculated_price?: BaseCalculatedPriceSet;
    /**
     * created_at
     * The date the variant was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the variant was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the variant was deleted.
     * @format date-time
     */
    deleted_at: string;
    /** The variant's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The variant's inventory items. */
    inventory_items?: AdminProductVariantInventoryItemLink[];
}
/** The details of the product variant's deletion. */
export interface AdminProductVariantDeleteResponse {
    /**
     * id
     * The product variant's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     */
    object: string;
    /**
     * deleted
     * Whether the product variant was deleted.
     * @default "variant"
     */
    deleted: boolean;
    /** The product's details. */
    parent?: AdminProduct;
}
/** The created, updated, and deleted associations between variants and inventory items. */
export interface AdminProductVariantInventoryBatchResponse {
    /** The created associations between product variants and inventory items. */
    created: AdminProductVariantInventoryLink | {
        /** The product variant's details. */
        productService: {
            /**
             * variant_id
             * The ID of the product variant.
             */
            variant_id: string;
        };
        /** The inventory item's details. */
        inventoryService: {
            /**
             * inventory_item_id
             * The ID of the inventory item.
             */
            inventory_item_id: string;
        };
    }[];
    /** The updated associations between product variants and inventory items. */
    updated: AdminProductVariantInventoryLink | {
        /** The product variant's details. */
        productService: {
            /**
             * variant_id
             * The ID of the product variant.
             */
            variant_id: string;
        };
        /** The inventory item's details. */
        inventoryService: {
            /**
             * inventory_item_id
             * The ID of the inventory item.
             */
            inventory_item_id: string;
        };
    }[];
    /** The deleted associations between product variants and inventory items. */
    deleted: AdminProductVariantInventoryLink | {
        /** The product variant's details. */
        productService: {
            /**
             * variant_id
             * The ID of the product variant.
             */
            variant_id: string;
        };
        /** The inventory item's details. */
        inventoryService: {
            /**
             * inventory_item_id
             * The ID of the inventory item.
             */
            inventory_item_id: string;
        };
    }[];
}
/** An association between a product variant and an inventory item. */
export interface AdminProductVariantInventoryItemLink {
    /**
     * id
     * The ID of the association.
     */
    id: string;
    /**
     * variant_id
     * The associated product variant's ID.
     */
    variant_id: string;
    variant?: object;
    /**
     * inventory_item_id
     * The associated inventory item's ID.
     */
    inventory_item_id: string;
    /** The inventory item's details. */
    inventory?: AdminInventoryItem;
}
/** The details of an association between a product variant and an inventory item. */
export interface AdminProductVariantInventoryLink {
    /** The product variant's details. */
    Product: {
        /**
         * variant_id
         * The ID of the product variant.
         */
        variant_id: string;
    };
    /** The inventory item's details. */
    Inventory: {
        /**
         * inventory_item_id
         * The ID of the inventory item.
         */
        inventory_item_id: string;
    };
}
/** The details of the deleted associated between a product variant and an inventory item. */
export interface AdminProductVariantInventoryLinkDeleteResponse {
    /** The details of an association between a product variant and an inventory item. */
    id: AdminProductVariantInventoryLink;
    /**
     * object
     * The name of the deleted object.
     * @default "variant-inventory-item-link"
     */
    object: string;
    /**
     * deleted
     * Whether the association was deleted.
     */
    deleted: boolean;
    /** The product variant's details. */
    parent: AdminProductVariant;
}
/** The product variant's details. */
export interface AdminProductVariantResponse {
    /** The product variant's details. */
    variant: AdminProductVariant;
}
/** The promotion's details. */
export interface AdminPromotion {
    /** The application method's details. */
    application_method?: AdminApplicationMethod;
    /** The promotion's rules. */
    rules?: AdminPromotionRule[];
    /**
     * id
     * The promotion's ID.
     */
    id: string;
    /**
     * code
     * The promotion's code.
     * @example "OFF50"
     */
    code?: string;
    /** The promotion's type. */
    type?: "standard" | "buyget";
    /**
     * is_automatic
     * Whether the promotion is applied on a cart automatically if it matches the promotion's rules.
     */
    is_automatic?: boolean;
    /**
     * campaign_id
     * The ID of the campaign this promotion belongs to.
     */
    campaign_id?: string;
    /** The campaign's details. */
    campaign?: AdminCampaign;
    /**
     * created_at
     * The date the promotion was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the promotion was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the promotion was deleted.
     * @format date-time
     */
    deleted_at: string;
    /** The promotion's status. */
    status?: "draft" | "active" | "inactive";
}
/** The promotion's details. */
export interface AdminPromotionResponse {
    /** The promotion's details. */
    promotion: AdminPromotion;
}
/** The promotion rule's details. */
export interface AdminPromotionRule {
    /**
     * id
     * The promotion rule's ID.
     */
    id: string;
    /**
     * description
     * The promotion rule's description.
     */
    description?: string;
    /**
     * attribute
     * The promotion rule's attribute.
     * @example "customer_group_id"
     */
    attribute?: string;
    /** The rule's operator. */
    operator?: "gt" | "lt" | "eq" | "ne" | "in" | "lte" | "gte";
    /**
     * The rule's values.
     * @example ["cusgroup_123"]
     */
    values: BasePromotionRuleValue[];
}
/** The refund's details. */
export interface AdminRefund {
    /**
     * id
     * The refund's ID.
     */
    id: string;
    /**
     * amount
     * The refund's amount.
     */
    amount: number;
    /**
     * refund_reason_id
     * The ID of the refund reason.
     */
    refund_reason_id?: string;
    /**
     * note
     * More details about the refund.
     */
    note?: string;
    /**
     * created_at
     * The date the refund was created.
     * @format date-time
     */
    created_at: string;
    /**
     * created_by
     * The ID of the user that created the refund.
     */
    created_by?: string;
    /** The payment's details. */
    payment: BasePayment;
    /** The refund reason's details. */
    refund_reason?: RefundReason;
}
/** The refund reason's details. */
export interface AdminRefundReason {
    /**
     * id
     * The refund reason's ID.
     */
    id: string;
    /**
     * label
     * The refund reason's label.
     */
    label: string;
    /**
     * description
     * The refund reason's description.
     */
    description?: string;
    /** The refund reason's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the refund reason was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the refund reason was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The region's details. */
export interface AdminRegion {
    /**
     * id
     * The region's ID.
     */
    id: string;
    /**
     * name
     * The region's name.
     */
    name: string;
    /**
     * currency_code
     * The region's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * automatic_taxes
     * Whether taxes are applied automatically during checkout.
     */
    automatic_taxes?: boolean;
    /** The region's countries. */
    countries?: AdminRegionCountry[];
    /** The region's payment providers. */
    payment_providers?: AdminPaymentProvider[];
    /** The region's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the region was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the region was updated.
     * @format date-time
     */
    updated_at?: string;
}
/** The country's details. */
export interface AdminRegionCountry {
    /**
     * id
     * The country's ID.
     */
    id: string;
    /**
     * iso_2
     * The country's iso 2.
     * @example "us"
     */
    iso_2?: string;
    /**
     * iso_3
     * The country's iso 3.
     * @example "usa"
     */
    iso_3?: string;
    /**
     * num_code
     * The country's num code.
     * @example 840
     */
    num_code?: string;
    /**
     * name
     * The country's name.
     */
    name?: string;
    /**
     * display_name
     * The country's display name.
     */
    display_name?: string;
}
/** The region's details. */
export interface AdminRegionResponse {
    /** The region's details. */
    region: AdminRegion;
}
/** The reservation's details. */
export interface AdminReservation {
    /**
     * id
     * The reservation's ID.
     */
    id: string;
    /**
     * line_item_id
     * The ID of the line item this reservation is for.
     */
    line_item_id: string;
    /**
     * location_id
     * The ID of the location the quantity is reserved from.
     */
    location_id: string;
    /**
     * quantity
     * The reservation's quantity.
     */
    quantity: number;
    /**
     * external_id
     * An ID in an external system
     */
    external_id: string;
    /**
     * description
     * The reservation's description.
     */
    description: string;
    /**
     * inventory_item_id
     * The ID of the inventory item this reservation is associated with.
     */
    inventory_item_id: string;
    /** The inventory item's details. */
    inventory_item?: AdminInventoryItem;
    /** The reservation's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_by
     * The ID of the user that created this reservation.
     */
    created_by?: string;
    /**
     * deleted_at
     * The date this reservation was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * created_at
     * The date this reservation was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date this reservation was updated.
     * @format date-time
     */
    updated_at?: string;
}
/** The reservation's details. */
export interface AdminReservationResponse {
    /** The reservation's details. */
    reservation: AdminReservation;
}
/** The return's details. */
export interface AdminReturn {
    /**
     * id
     * The return's ID.
     */
    id: string;
    /** The return's status. */
    status?: "canceled" | "requested" | "received" | "partially_received";
    /**
     * refund_amount
     * The amount refunded by this return.
     */
    refund_amount?: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    /** The return's items. */
    items: AdminReturnItem[];
    /**
     * created_at
     * The date the return was created.
     * @format date-time
     */
    created_at: string;
    /**
     * canceled_at
     * The date the return was canceled.
     * @format date-time
     */
    canceled_at: string;
    /**
     * exchange_id
     * The return's exchange id.
     */
    exchange_id?: string;
    /**
     * location_id
     * The return's location id.
     */
    location_id?: string;
    /**
     * claim_id
     * The return's claim id.
     */
    claim_id?: string;
    /**
     * order_version
     * The return's order version.
     */
    order_version: number;
    /**
     * display_id
     * The return's display id.
     */
    display_id: number;
    /**
     * no_notification
     * Whether the customer should receive notifications about the return's updates.
     */
    no_notification?: boolean;
    /**
     * received_at
     * The date the return was received.
     */
    received_at: string;
}
/** The return item's details. */
export interface AdminReturnItem {
    /**
     * id
     * The return item's ID.
     */
    id: string;
    /**
     * quantity
     * The return item's quantity.
     */
    quantity: number;
    /**
     * received_quantity
     * The received quantity of the item. This quantity is added to the stocked inventory quantity of the item.
     */
    received_quantity: number;
    /**
     * damaged_quantity
     * The received damaged quantity of the item, which isn't added to the stocked inventory quantity of the item.
     */
    damaged_quantity: number;
    /**
     * reason_id
     * The ID of the return reason associated with the item.
     */
    reason_id?: string;
    /**
     * note
     * A note about why the item was returned.
     */
    note?: string;
    /**
     * item_id
     * The ID of the associated order item.
     */
    item_id: string;
    /**
     * return_id
     * The ID of the return this return item belongs to.
     */
    return_id: string;
    /** The return item's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of a return and a preview of the order once the return is applied. */
export interface AdminReturnPreviewResponse {
    /** A preview of an order if a change, such as exchange, return, edit, or claim is applied on it. */
    order_preview: AdminOrderPreview;
    /** The return's details. */
    return: AdminReturn;
}
/** The return reason's details. */
export interface AdminReturnReason {
    /**
     * id
     * The return reason's ID.
     */
    id: string;
    /**
     * value
     * The return reason's value.
     */
    value: string;
    /**
     * label
     * The return reason's label.
     */
    label: string;
    /**
     * description
     * The return reason's description.
     */
    description?: string;
    /** The return reason's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the return reason was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the return reason was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The details of the return reason deletion. */
export interface AdminReturnReasonDeleteResponse {
    /**
     * id
     * The return reason's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "return_reason"
     */
    object: string;
    /**
     * deleted
     * Whether the return reason was deleted.
     */
    deleted: boolean;
}
/** The paginated list of return reasons. */
export interface AdminReturnReasonListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of return reasons. */
    return_reasons: AdminReturnReason[];
}
/** The return reason's details. */
export interface AdminReturnReasonResponse {
    /** The return reason's details. */
    return_reason: AdminReturnReason;
}
/** The return's details. */
export interface AdminReturnResponse {
    /** The return's details. */
    return: AdminReturn;
}
/** The details of revoking the API key. */
export interface AdminRevokeApiKey {
    /**
     * revoke_in
     * The time in seconds to revoke the API key after. If not set, the API key is revoked immediately.
     */
    revoke_in?: number;
}
/** The details of a potential rule attribute. */
export interface AdminRuleAttributeOption {
    /**
     * id
     * The rule attribute's ID, which is a rule's `attribute` it refers to.
     * @example "customer_group"
     */
    id: string;
    /**
     * value
     * The rule attribute's value.
     * @example "customer.groups.id"
     */
    value: string;
    /**
     * label
     * The rule attribute option's label.
     * @example "Customer Group"
     */
    label: string;
    /** The attribute's operators. */
    operators: BaseRuleOperatorOptions[];
}
/** The details of a potential rule value. */
export interface AdminRuleValueOption {
    /**
     * value
     * The rule value's value.
     * @example "reg_123"
     */
    value: string;
    /**
     * label
     * The rule value's label.
     * @example "Europe Region"
     */
    label: string;
}
/** The sales channel's details. */
export interface AdminSalesChannel {
    /**
     * id
     * The sales channel's ID.
     */
    id: string;
    /**
     * name
     * The sales channel's name.
     */
    name: string;
    /**
     * description
     * The sales channel's description.
     */
    description: string;
    /**
     * is_disabled
     * Whether the sales channel is disabled.
     */
    is_disabled: boolean;
    /** The sales channel's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the sales channel was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the sales channel was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the sales channel was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of deleting a sales channel. */
export interface AdminSalesChannelDeleteResponse {
    /**
     * id
     * The sales channel's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "sales-channel"
     */
    object: string;
    /**
     * deleted
     * Whether the sales channel was deleted.
     */
    deleted: boolean;
}
/** The sales channel's details. */
export interface AdminSalesChannelResponse {
    /** The sales channel's details. */
    sales_channel: AdminSalesChannel;
}
/** The shipping option's service zone. */
export interface AdminServiceZone {
    /**
     * id
     * The service zone's ID.
     */
    id: string;
    /**
     * name
     * The service zone's name.
     */
    name: string;
    /**
     * fulfillment_set_id
     * The service zone's fulfillment set id.
     */
    fulfillment_set_id: string;
    fulfillment_set: object;
    /** The service zone's geo zones. */
    geo_zones: AdminGeoZone[];
    /** The service zone's shipping options. */
    shipping_options: AdminShippingOption[];
    /**
     * created_at
     * The service zone's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The service zone's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The service zone's deleted at.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the service zone deletion. */
export interface AdminServiceZoneDeleteResponse {
    /**
     * id
     * The service zone's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "service_zone"
     */
    object: string;
    /**
     * deleted
     * Whether the service zone was deleted.
     */
    deleted: boolean;
    /** The service zone's fulfillment set. */
    parent?: AdminFulfillmentSet;
}
/** The service zone's details. */
export interface AdminServiceZoneResponse {
    /** The shipping option's service zone. */
    service_zone: AdminServiceZone;
}
/** The shipping option's details. */
export interface AdminShippingOption {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * name
     * The shipping option's name.
     */
    name: string;
    /** The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider. */
    price_type: "calculated" | "flat";
    /**
     * service_zone_id
     * The ID of the service zone this option belongs to.
     */
    service_zone_id: string;
    service_zone: object;
    /**
     * provider_id
     * The ID of the provider handling fulfillments created from this shipping option.
     */
    provider_id: string;
    /** The fulfillment provider's details. */
    provider: AdminFulfillmentProvider;
    /**
     * shipping_option_type_id
     * The ID of the associated shipping option type.
     */
    shipping_option_type_id: string;
    /** The shipping option's details. */
    type: AdminShippingOptionType;
    /**
     * shipping_profile_id
     * The ID of the associated shipping profile.
     */
    shipping_profile_id: string;
    /** The shipping profile's details.. */
    shipping_profile: AdminShippingProfile;
    /** The shipping option's rules. */
    rules: AdminShippingOptionRule[];
    /** The shipping option's prices. If the `price_type` is `calculated`, this array will be empty since the price is calculated by the fulfillment provider during checkout. */
    prices: AdminShippingOptionPrice[];
    /** The shipping option's data, useful for the fulfillment provider handling fulfillments created from this option. */
    data: object;
    /** The shipping option's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the shipping option was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping option was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the shipping option was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the shipping option's deletion. */
export interface AdminShippingOptionDeleteResponse {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "shipping_option"
     */
    object: string;
    /**
     * deleted
     * Whether the shipping option was deleted.
     */
    deleted: boolean;
}
/** The details of the shipping option's price. */
export interface AdminShippingOptionPrice {
    /** The price's rules. */
    price_rules: AdminShippingOptionPriceRule[];
    /**
     * rules_count
     * The number of rules the price has.
     */
    rules_count: number;
    /**
     * id
     * The price's ID.
     */
    id: string;
    /**
     * title
     * The price's title.
     */
    title: string;
    /**
     * currency_code
     * The price's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * amount
     * The price's amount.
     */
    amount: number;
    /** The price's raw amount. */
    raw_amount: object;
    /**
     * min_quantity
     * The minimum quantity required in the cart for this price to apply.
     */
    min_quantity: number;
    /**
     * max_quantity
     * The maximum quantity that the cart's items must not surpass for this price to apply.
     */
    max_quantity: number;
    /**
     * price_set_id
     * The ID of the price set this price belongs to.
     */
    price_set_id: string;
    /**
     * created_at
     * The date the price was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of a shipping option price's rule. */
export interface AdminShippingOptionPriceRule {
    /**
     * id
     * The price rule's ID.
     */
    id: string;
    /** The price rule's value. */
    value: string | number;
    /** The price rule's operator. */
    operator: "gt" | "lt" | "eq" | "ne" | "in" | "lte" | "gte" | "nin";
    /**
     * attribute
     * The price rule's attribute.
     */
    attribute: string;
    /**
     * price_id
     * The ID of the price this rule applies to.
     */
    price_id: string;
    /**
     * priority
     * The price rule's priority.
     */
    priority: number;
    /**
     * created_at
     * The date the price rule was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price rule was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price rule was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The shipping option's details. */
export interface AdminShippingOptionResponse {
    /** The shipping option's details. */
    shipping_option: AdminShippingOption;
}
/** The shipping option rule's details. */
export interface AdminShippingOptionRule {
    /**
     * id
     * The shipping option rule's ID.
     */
    id: string;
    /**
     * attribute
     * The shipping option rule's attribute.
     * @example "is_return"
     */
    attribute: string;
    /** The rule's operator. */
    operator: "gt" | "lt" | "eq" | "ne" | "in" | "lte" | "gte" | "nin";
    /** value */
    value: string;
    /**
     * shipping_option_id
     * The ID of the shipping option this rule is for.
     */
    shipping_option_id: string;
    /**
     * created_at
     * The date the shipping option rule was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping option rule was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the shipping option rule was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The shipping option's details. */
export interface AdminShippingOptionType {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * created_at
     * The date the shipping option was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping option was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the shipping option was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * label
     * The type's label.
     */
    label: string;
    /**
     * description
     * The type's description.
     */
    description: string;
    /**
     * code
     * The type's code.
     */
    code: string;
    /**
     * shipping_option_id
     * The type's shipping option id.
     */
    shipping_option_id: string;
}
/** The shipping profile's details.. */
export interface AdminShippingProfile {
    /**
     * id
     * The shipping profile's ID.
     */
    id: string;
    /**
     * name
     * The shipping profile's name.
     */
    name: string;
    /**
     * type
     * The shipping profile's type.
     */
    type: string;
    /** The shipping profile's metadata, holds custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the shipping profile was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping profile was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the shipping profile was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the shipping profile's deletion. */
export interface AdminShippingProfileDeleteResponse {
    /**
     * id
     * The shipping profile's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "shipping_profile"
     */
    object: string;
    /**
     * deleted
     * Whether the shipping profile was deleted.
     */
    deleted: boolean;
}
/** The shipping profile's details. */
export interface AdminShippingProfileResponse {
    /** The shipping profile's details.. */
    shipping_profile: AdminShippingProfile;
}
/** The stock location's details. */
export interface AdminStockLocation {
    /**
     * id
     * The location's ID.
     */
    id: string;
    /**
     * name
     * The location's name.
     */
    name: string;
    /**
     * address_id
     * The ID of the associated address.
     */
    address_id: string;
    /** The details of the stock location address. */
    address?: AdminStockLocationAddress;
    /** The sales channels associated with the location. */
    sales_channels?: AdminSalesChannel[];
    /** The fulfillment providers associated with the location. */
    fulfillment_providers?: AdminFulfillmentProvider[];
    /** The fulfillment sets associated with the location. */
    fulfillment_sets?: object[];
}
/** The details of the stock location address. */
export interface AdminStockLocationAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2: string;
    /**
     * company
     * The address's company.
     */
    company: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code: string;
    /**
     * city
     * The address's city.
     */
    city: string;
    /**
     * phone
     * The address's phone.
     */
    phone: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code: string;
    /**
     * province
     * The address's province.
     */
    province: string;
}
/** The details of the stock location's deletion. */
export interface AdminStockLocationDeleteResponse {
    /**
     * id
     * The stock location's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "stock_location"
     */
    object: string;
    /**
     * deleted
     * Whether the stock location was deleted.
     */
    deleted: boolean;
}
/** The paginated list of stock locations. */
export interface AdminStockLocationListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of stock locations. */
    stock_locations: AdminStockLocation[];
}
/** The stock location's details. */
export interface AdminStockLocationResponse {
    /** The stock location's details. */
    stock_location: AdminStockLocation;
}
/** The store's details. */
export interface AdminStore {
    /**
     * id
     * The store's ID.
     */
    id: string;
    /**
     * name
     * The store's name.
     */
    name: string;
    /** The store's supported currencies. */
    supported_currencies: AdminStoreCurrency[];
    /**
     * default_sales_channel_id
     * The ID of the sales channel used by default in the store.
     */
    default_sales_channel_id: string;
    /**
     * default_region_id
     * The ID of the region used by default in the store.
     */
    default_region_id: string;
    /**
     * default_location_id
     * The ID of the stock location used by default in the store.
     */
    default_location_id: string;
    /** The store's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the store was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the store was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The details of a store's currency. */
export interface AdminStoreCurrency {
    /**
     * id
     * The currency's ID.
     */
    id: string;
    /**
     * currency_code
     * The currency's code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * store_id
     * The ID of the store this currency belongs to.
     */
    store_id: string;
    /**
     * is_default
     * Whether this currency is the default in the store.
     */
    is_default: boolean;
    /** The currency's currencies. */
    currency: AdminCurrency;
    /**
     * created_at
     * The date the currency was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the currency was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the currency was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The paginated list of stores. */
export interface AdminStoreListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of stores. */
    stores: AdminStore[];
}
/** The store's details. */
export interface AdminStoreResponse {
    /** The store's details. */
    store: AdminStore;
}
/** The tax rate's details. */
export interface AdminTaxRate {
    /**
     * id
     * The tax rate's ID.
     */
    id: string;
    /**
     * rate
     * The rate to charge.
     * @example 10
     */
    rate: number;
    /**
     * code
     * The code the tax rate is identified by.
     */
    code: string;
    /**
     * name
     * The tax rate's name.
     */
    name: string;
    /** The tax rate's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * tax_region_id
     * The ID of the tax region this rate belongs to.
     */
    tax_region_id: string;
    /**
     * is_combinable
     * Whether the tax rate should be combined with parent rates.
     */
    is_combinable: boolean;
    /**
     * is_default
     * Whether this tax rate is the default in the tax region.
     */
    is_default: boolean;
    /**
     * created_at
     * The date the tax rate was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax rate was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the tax rate was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * created_by
     * The ID of the user that created the tax rate.
     */
    created_by: string;
    /** The tax region's details. */
    tax_region: AdminTaxRegion;
    /** The tax rate's rules. */
    rules: AdminTaxRateRule[];
}
/** The details of the tax rate deletion. */
export interface AdminTaxRateDeleteResponse {
    /**
     * id
     * The tax rate's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "tax_rate"
     */
    object: string;
    /**
     * deleted
     * Whether the tax rate was deleted.
     */
    deleted: boolean;
}
/** The tax rate's details. */
export interface AdminTaxRateResponse {
    /** The tax rate's details. */
    tax_rate: AdminTaxRate;
}
/** The tax rate rule's details. */
export interface AdminTaxRateRule {
    /**
     * reference
     * The name of the table this rule references.
     * @example "product_type"
     */
    reference: string;
    /**
     * reference_id
     * The ID of a record in the table that this rule references.
     * @example "ptyp_1"
     */
    reference_id: string;
}
/** The tax region's details. */
export interface AdminTaxRegion {
    /**
     * id
     * The tax region's ID.
     */
    id: string;
    /**
     * country_code
     * The tax region's country code.
     * @example "us"
     */
    country_code: string;
    /**
     * province_code
     * The tax region's province code.
     */
    province_code: string;
    /** The tax region's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * parent_id
     * The ID of the parent tax region.
     */
    parent_id: string;
    /**
     * created_at
     * The date the tax region was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax region was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the tax region was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * created_by
     * The ID of the user that created the tax region.
     */
    created_by: string;
    /** The tax region's rates. */
    tax_rates: object[];
    parent: object;
    /** The tax region's children. */
    children: object[];
}
/** The details of the tax region deletion. */
export interface AdminTaxRegionDeleteResponse {
    /**
     * id
     * The tax region's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "tax_region"
     */
    object: string;
    /**
     * deleted
     * Whether the tax region was deleted.
     */
    deleted: boolean;
}
/** The tax region's details. */
export interface AdminTaxRegionResponse {
    /** The tax region's details. */
    tax_region: AdminTaxRegion;
}
/** The details of the request to transfer the order. */
export interface AdminTransferOrder {
    /**
     * customer_id
     * The ID of the customer to transfer the order to.
     */
    customer_id: string;
    /**
     * description
     * The description of the order transfer, which can be shown to the customer receiving the order transfer request.
     */
    description?: string;
    /**
     * internal_note
     * An internal note viewable only by admin users.
     */
    internal_note?: string;
}
/** The details to update in an API key. */
export interface AdminUpdateApiKey {
    /**
     * title
     * The API key's title.
     */
    title: string;
}
/** The details to update in a collection. */
export interface AdminUpdateCollection {
    /**
     * title
     * The collection's title.
     */
    title?: string;
    /**
     * handle
     * The collection's handle.
     */
    handle?: string;
    /** The collection's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in a customer group. */
export interface AdminUpdateCustomerGroup {
    /**
     * name
     * The customer group's name.
     */
    name?: string;
    /** The customer group's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The data to update in the draft order. */
export interface AdminUpdateDraftOrder {
    /**
     * email
     * The customer email associated with the draft order.
     * @format email
     */
    email?: string;
    /** The draft order's shipping address. */
    shipping_address?: {
        /**
         * first_name
         * The shipping address's first name.
         */
        first_name?: string;
        /**
         * last_name
         * The shipping address's last name.
         */
        last_name?: string;
        /**
         * phone
         * The shipping address's phone.
         */
        phone?: string;
        /**
         * company
         * The shipping address's company.
         */
        company?: string;
        /**
         * address_1
         * The first address line.
         */
        address_1?: string;
        /**
         * address_2
         * The second address line.
         */
        address_2?: string;
        /**
         * city
         * The shipping address's city.
         */
        city?: string;
        /**
         * country_code
         * The shipping address's country code.
         * @example "us"
         */
        country_code?: string;
        /**
         * province
         * The shipping address's province.
         */
        province?: string;
        /**
         * postal_code
         * The shipping address's postal code.
         */
        postal_code?: string;
        /** The shipping address's metadata, can hold custom key-value pairs. */
        metadata?: object;
    };
    /** The draft order's billing address. */
    billing_address?: {
        /**
         * first_name
         * The billing address's first name.
         */
        first_name?: string;
        /**
         * last_name
         * The billing address's last name.
         */
        last_name?: string;
        /**
         * phone
         * The billing address's phone.
         */
        phone?: string;
        /**
         * company
         * The billing address's company.
         */
        company?: string;
        /**
         * address_1
         * The first address line.
         */
        address_1?: string;
        /**
         * address_2
         * The second address line.
         */
        address_2?: string;
        /**
         * city
         * The billing address's city.
         */
        city?: string;
        /**
         * country_code
         * The billing address's country code.
         * @example "us"
         */
        country_code?: string;
        /**
         * province
         * The billing address's province.
         */
        province?: string;
        /**
         * postal_code
         * The billing address's postal code.
         */
        postal_code?: string;
        /** The billing address's metadata, can hold custom key-value pairs. */
        metadata?: object;
    };
    /** The draft order's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in the order. */
export interface AdminUpdateOrder {
    /**
     * email
     * The order's email.
     * @format email
     */
    email?: string;
    /** The order's shipping address. */
    shipping_address?: {
        /**
         * first_name
         * The address's first name.
         */
        first_name?: string;
        /**
         * last_name
         * The address's last name.
         */
        last_name?: string;
        /**
         * phone
         * The address's phone.
         */
        phone?: string;
        /**
         * company
         * The address's company.
         */
        company?: string;
        /**
         * address_1
         * The address's first line.
         */
        address_1?: string;
        /**
         * address_2
         * The address's second line.
         */
        address_2?: string;
        /**
         * city
         * The address's city.
         */
        city?: string;
        /**
         * country_code
         * The address's country code.
         * @example "us"
         */
        country_code?: string;
        /**
         * province
         * The address's province.
         */
        province?: string;
        /**
         * postal_code
         * The address's postal code.
         */
        postal_code?: string;
        /** The address's metadata, can hold custom key-value pairs. */
        metadata?: object;
    };
    /** The order's billing address. */
    billing_address?: {
        /**
         * first_name
         * The address's first name.
         */
        first_name?: string;
        /**
         * last_name
         * The address's last name.
         */
        last_name?: string;
        /**
         * phone
         * The address's phone.
         */
        phone?: string;
        /**
         * company
         * The address's company.
         */
        company?: string;
        /**
         * address_1
         * The address's first line.
         */
        address_1?: string;
        /**
         * address_2
         * The address's second line.
         */
        address_2?: string;
        /**
         * city
         * The address's city.
         */
        city?: string;
        /**
         * country_code
         * The address's country code.
         * @example "us"
         */
        country_code?: string;
        /**
         * province
         * The address's province.
         */
        province?: string;
        /**
         * postal_code
         * The address's postal code.
         */
        postal_code?: string;
        /** The address's metadata, can hold custom key-value pairs. */
        metadata?: object;
    };
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** the details to update in a price list. */
export interface AdminUpdatePriceList {
    /**
     * title
     * The price list's title.
     */
    title?: string;
    /**
     * description
     * The price list's description.
     */
    description?: string;
    /**
     * starts_at
     * The date the price list starts.
     */
    starts_at?: string;
    /**
     * ends_at
     * The date the price list ends.
     */
    ends_at?: string;
    /** The price list's status. */
    status?: "active" | "draft";
    /** The price list's type. */
    type?: "sale" | "override";
    /**
     * The price list's rules.
     * @example {"customer_group_id":["cusgrp_123"]}
     */
    rules?: object;
}
/** The details to update in the price preference. */
export interface AdminUpdatePricePreference {
    /**
     * attribute
     * The price preference's attribute.
     * @example "region_id"
     */
    attribute?: string;
    /**
     * value
     * The price preference's value.
     * @example "reg_123"
     */
    value?: string;
    /**
     * is_tax_inclusive
     * Whether prices are tax inclusive for this price preference.
     */
    is_tax_inclusive?: boolean;
}
/** The product's details. */
export interface AdminUpdateProduct {
    /**
     * title
     * The product's title.
     */
    title?: string;
    /**
     * subtitle
     * The product's subtitle.
     */
    subtitle?: string;
    /**
     * description
     * The product's description.
     */
    description?: string;
    /**
     * is_giftcard
     * Whether the product is a gift card.
     */
    is_giftcard?: boolean;
    /**
     * discountable
     * Whether discounts can be applied on the product.
     */
    discountable?: boolean;
    /** The product's images. */
    images?: {
        /**
         * url
         * The image's URL.
         */
        url: string;
    }[];
    /**
     * thumbnail
     * The product's thumbnail URL.
     */
    thumbnail?: string;
    /**
     * handle
     * The product's unique handle.
     */
    handle?: string;
    /** The product's status. */
    status?: "draft" | "proposed" | "published" | "rejected";
    /**
     * type_id
     * The ID of the product's type.
     */
    type_id?: string;
    /**
     * collection_id
     * The ID of the product's collection.
     */
    collection_id?: string;
    /** The product's categories. */
    categories?: {
        /**
         * id
         * The category's ID.
         */
        id: string;
    }[];
    /** The product's tags. */
    tags?: {
        /**
         * id
         * The tag's ID.
         */
        id: string;
    }[];
    /** The product's options. */
    options?: AdminUpdateProductOption[];
    /** The product's variants. You can add new variants or update existing ones, passing their IDs in the object. */
    variants?: (AdminCreateProductVariant | AdminUpdateProductVariant)[];
    /** The sales channels that the product is available in. */
    sales_channels?: {
        /**
         * id
         * The sales channel's ID.
         */
        id: string;
    }[];
    /**
     * weight
     * The product's weight.
     */
    weight?: number;
    /**
     * length
     * The product's length.
     */
    length?: number;
    /**
     * height
     * The product's height.
     */
    height?: number;
    /**
     * width
     * The product's width.
     */
    width?: number;
    /**
     * hs_code
     * The product's HS code.
     */
    hs_code?: string;
    /**
     * mid_code
     * The product's MID code.
     */
    mid_code?: string;
    /**
     * origin_country
     * The product's origin country.
     */
    origin_country?: string;
    /**
     * material
     * The product's material.
     */
    material?: string;
    /** The product's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * external_id
     * The ID of the product in an external or third-party system.
     */
    external_id?: string;
}
/** The details to update in a product option. */
export interface AdminUpdateProductOption {
    /**
     * title
     * The option's title.
     */
    title?: string;
    /** The option's values. */
    values?: string[];
}
/** The properties to update of a product variant. */
export interface AdminUpdateProductVariant {
    /**
     * title
     * The product variant's title.
     */
    title?: string;
    /**
     * sku
     * The product variant's SKU.
     */
    sku?: string;
    /**
     * ean
     * The product variant's EAN.
     */
    ean?: string;
    /**
     * upc
     * The product variant's UPC.
     */
    upc?: string;
    /**
     * barcode
     * The product variant's barcode.
     */
    barcode?: string;
    /**
     * hs_code
     * The product variant's HS code.
     */
    hs_code?: string;
    /**
     * mid_code
     * The product variant's MID code.
     */
    mid_code?: string;
    /**
     * allow_backorder
     * Whether customers can order the variant even if it's not in stock.
     */
    allow_backorder?: boolean;
    /**
     * manage_inventory
     * Whether the Medusa application manages the variant's inventory. If disabled, the product variant is always considered in stock.
     */
    manage_inventory?: boolean;
    /**
     * variant_rank
     * The product variant's rank among its siblings.
     */
    variant_rank?: number;
    /**
     * weight
     * The product variant's weight.
     */
    weight?: number;
    /**
     * length
     * The product variant's length.
     */
    length?: number;
    /**
     * height
     * The product variant's height.
     */
    height?: number;
    /**
     * width
     * The product variant's width.
     */
    width?: number;
    /**
     * origin_country
     * The product variant's origin country.
     */
    origin_country?: string;
    /**
     * material
     * The product variant's material.
     */
    material?: string;
    /** The product variant's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The product variant's prices. */
    prices?: AdminCreateProductVariantPrice[];
    /** The product variant's options. */
    options?: object;
}
/** The properties to update in a buy rule. */
export interface AdminUpdatePromotionRule {
    /**
     * id
     * The buy rule's ID.
     */
    id: string;
    /** The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value. */
    operator?: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
    /**
     * description
     * The buy rule's description.
     */
    description?: string;
    /**
     * attribute
     * The attribute to compare against when checking whether a promotion can be applied on a cart.
     * @example "items.product.id"
     */
    attribute?: string;
    /** The attribute's value. */
    values: string | string[];
}
/** The details to update in a return reason. */
export interface AdminUpdateReturnReason {
    /**
     * label
     * The return reason's label.
     */
    label: string;
    /**
     * value
     * The return reason's value.
     */
    value: string;
    /**
     * description
     * The return reason's description.
     */
    description?: string;
    /** The return reason's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The properties to update in the sales channel. */
export interface AdminUpdateSalesChannel {
    /**
     * name
     * The sales channel's name.
     */
    name?: string;
    /**
     * description
     * The sales channel's description.
     */
    description?: string;
    /**
     * is_disabled
     * Whether the sales channel is disabled.
     */
    is_disabled?: boolean;
    /** The sales channel's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The properties to update in the shipping option rule. */
export interface AdminUpdateShippingOptionRule {
    /**
     * id
     * The rule's ID.
     */
    id: string;
    /** The operator used to check whether a rule applies. */
    operator: "in" | "eq" | "ne" | "gt" | "gte" | "lt" | "lte" | "nin";
    /**
     * attribute
     * The name of a property or table that the rule applies to.
     * @example "customer_group"
     */
    attribute: string;
    /** A value of the attribute that enables this rule. */
    value: string | string[];
}
/** The properties to update in a stock location. */
export interface AdminUpdateStockLocation {
    /**
     * name
     * The stock location's name.
     */
    name?: string;
    /** The stock location's address. Pass this property if you're creating a new address to associate with the location. */
    address?: {
        /**
         * address_1
         * The address's first line.
         */
        address_1: string;
        /**
         * address_2
         * The address's second line.
         */
        address_2?: string;
        /**
         * company
         * The address's company.
         */
        company?: string;
        /**
         * city
         * The address's city.
         */
        city?: string;
        /**
         * country_code
         * The address's country code.
         * @example "us"
         */
        country_code: string;
        /**
         * phone
         * The address's phone.
         */
        phone?: string;
        /**
         * postal_code
         * The address's postal code.
         */
        postal_code?: string;
        /**
         * province
         * The address's province.
         */
        province?: string;
    };
    /**
     * address_id
     * The ID of an existing stock location address to associate the stock location with.
     */
    address_id?: string;
    /** The stock location's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The properties to update in a store. */
export interface AdminUpdateStore {
    /**
     * name
     * The store's name.
     */
    name?: string;
    /** The store's supported currencies. */
    supported_currencies?: {
        /**
         * currency_code
         * The currency's code.
         * @example "usd"
         */
        currency_code: string;
        /**
         * is_default
         * Whether the currency is the default in the store.
         */
        is_default?: boolean;
        /**
         * is_tax_inclusive
         * Whether prices using this currency are tax inclusive.
         */
        is_tax_inclusive?: boolean;
    }[];
    /**
     * default_sales_channel_id
     * The ID of the default sales channel in the store.
     */
    default_sales_channel_id?: string;
    /**
     * default_region_id
     * The ID of the default region in the store.
     */
    default_region_id?: string;
    /**
     * default_location_id
     * The ID of the default stock location in the store.
     */
    default_location_id?: string;
    /** The store's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The properties to update in the tax rate. */
export interface AdminUpdateTaxRate {
    /**
     * rate
     * The rate to charge.
     */
    rate?: number;
    /**
     * code
     * The code that the tax rate is identified by.
     */
    code?: string;
    /** The tax rate's rules. */
    rules?: {
        /**
         * reference
         * The name of the table this rule references.
         * @example "product_type"
         */
        reference: string;
        /**
         * reference_id
         * The ID of the record in the table that the rule references.
         * @example "ptyp_123"
         */
        reference_id: string;
    }[];
    /**
     * name
     * The tax rate's name.
     */
    name?: string;
    /**
     * is_default
     * Whether the tax rate is the default in the store.
     */
    is_default?: boolean;
    /**
     * is_combinable
     * Whether the tax rate should be combined with parent rates.
     */
    is_combinable?: boolean;
    /** The tax rate's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in a tax region. */
export interface AdminUpdateTaxRegion {
    /**
     * province_code
     * The tax region's province code.
     */
    province_code?: string;
    /** The tax region's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The properties to update in a user. */
export interface AdminUpdateUser {
    /**
     * first_name
     * The user's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The user's last name.
     */
    last_name?: string;
    /**
     * avatar_url
     * The URL of the user's avatar.
     */
    avatar_url?: string;
    /** The user's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The properties to update of the variant's inventory item association. */
export interface AdminUpdateVariantInventoryItem {
    /**
     * required_quantity
     * The number of units a single quantity is equivalent to. For example, if a customer orders one quantity of the variant, Medusa checks the availability of the quantity multiplied by the value set for `required_quantity`. When the customer orders the quantity, Medusa reserves the ordered quantity multiplied by the value set for `required_quantity`.
     */
    required_quantity: number;
}
/** The details of the stock location address to create. */
export interface AdminUpsertStockLocationAddress {
    /**
     * address_1
     * The address's first line.
     */
    address_1: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * country_code
     * The address's country code.
     * @example "usd"
     */
    country_code: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
}
/** The user's details. */
export interface AdminUser {
    /**
     * id
     * The user's ID.
     */
    id: string;
    /**
     * email
     * The user's email.
     * @format email
     */
    email: string;
    /**
     * first_name
     * The user's first name.
     */
    first_name: string;
    /**
     * last_name
     * The user's last name.
     */
    last_name: string;
    /**
     * avatar_url
     * The URL of the user's avatar.
     */
    avatar_url: string;
    /** The user's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the user was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the user was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the user was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the deleted user. */
export interface AdminUserDeleteResponse {
    /**
     * id
     * The user's ID.
     */
    id: string;
    /**
     * object
     * The name of the deleted object.
     * @default "user"
     */
    object: string;
    /**
     * deleted
     * Whether the user was deleted.
     */
    deleted: boolean;
}
/** The paginated list of users. */
export interface AdminUserListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of users. */
    users: AdminUser[];
}
/** The user's details. */
export interface AdminUserResponse {
    /** The user's details. */
    user: AdminUser;
}
/** The workflows execution's details. */
export interface AdminWorkflowExecution {
    /**
     * id
     * The workflow execution's ID.
     */
    id: string;
    /**
     * workflow_id
     * The ID of the workflow.
     */
    workflow_id: string;
    /**
     * transaction_id
     * The workflow execution's transaction ID.
     */
    transaction_id: string;
    /** The workflow execution's steps details. */
    execution: AdminWorkflowExecutionExecution;
    /** The workflow execution's context. */
    context: WorkflowExecutionContext;
    /** The workflow execution's state. */
    state: "not_started" | "invoking" | "waiting_to_compensate" | "compensating" | "done" | "reverted" | "failed";
    /**
     * created_at
     * The date the workflow execution was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the workflow execution was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the workflow execution was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The workflow execution's steps details. */
export interface AdminWorkflowExecutionExecution {
    /** The execution's steps. Each object key is a step ID, and the value is the object whose properties are shown below. */
    steps: Record<string, {
        /**
         * id
         * The step's ID.
         */
        id?: string;
        /** The state of the step's invokation function. */
        invoke?: {
            /** The invokation step's state. */
            state: "not_started" | "invoking" | "compensating" | "done" | "reverted" | "failed" | "dormant" | "skipped" | "skipped_failure" | "timeout";
            /** The invokation step's state. */
            status: "idle" | "ok" | "waiting_response" | "temp_failure" | "permanent_failure";
        };
        /** The step's definition details. */
        definition?: {
            /**
             * async
             * Whether the step is async.
             */
            async?: boolean;
            /**
             * compensateAsync
             * Whether the compensation function of the step is async.
             */
            compensateAsync?: boolean;
            /**
             * noCompensation
             * Whether the step doesn't have a compensation function.
             */
            noCompensation?: boolean;
            /**
             * continueOnPermanentFailure
             * Whether the step continues executing even if its status is changed to failed.
             */
            continueOnPermanentFailure?: boolean;
            /**
             * maxRetries
             * The maximum number of times to retry the step.
             */
            maxRetries?: number;
            /**
             * noWait
             * Whether the workflow shouldn't wait for the step to finish before moving to the next step.
             * @default false
             */
            noWait?: boolean;
            /**
             * retryInterval
             * The interval in seconds between retry attempts when the step fails.
             */
            retryInterval?: number;
            /**
             * retryIntervalAwaiting
             * The interval in seconds to retry a step even if its status is `waiting_response`.
             */
            retryIntervalAwaiting?: number;
            /**
             * saveResponse
             * Whether the step's response is stored.
             */
            saveResponse?: boolean;
            /**
             * timeout
             * The maximum time in seconds to wait for this step to complete. If the step exceeds this time, the step's state is changed to `timeout`, but the step continues executing.
             */
            timeout?: number;
        };
        /** The state of the step's compensation function. */
        compensate?: {
            /** The compensation function's state. */
            state: "not_started" | "invoking" | "compensating" | "done" | "reverted" | "failed" | "dormant" | "skipped" | "skipped_failure" | "timeout";
            /** The compensation function's status. */
            status: "idle" | "ok" | "waiting_response" | "temp_failure" | "permanent_failure";
        };
        /**
         * depth
         * The step's depth in the workflow's execution.
         */
        depth?: number;
        /**
         * startedAt
         * The timestamp the step started executing.
         */
        startedAt?: number;
    }>;
}
/** The workflow execution's details. */
export interface AdminWorkflowExecutionResponse {
    /** The workflows execution's details. */
    workflow_execution: AdminWorkflowExecution;
}
/** The API key's details. */
export interface ApiKeyResponse {
    /**
     * id
     * The API key's ID.
     */
    id: string;
    /**
     * token
     * The API key's token.
     */
    token: string;
    /**
     * redacted
     * The redacted form of the API key's token. This is useful when showing portion of the token. For example `sk_...123`.
     */
    redacted: string;
    /**
     * title
     * The API key's title.
     */
    title: string;
    /** The API key's type. `secret` API keys are used for authenticating admin users, and `publishable` API key are used for storefronts and similar clients to scope requests to sales channels. */
    type: "secret" | "publishable";
    /**
     * last_used_at
     * The date the API key was last used.
     * @format date-time
     */
    last_used_at: string;
    /**
     * created_by
     * The ID of the user that created the API key.
     */
    created_by: string;
    /**
     * created_at
     * The date the API key was created.
     * @format date-time
     */
    created_at: string;
    /**
     * revoked_by
     * The ID of the user that revoked the API key.
     */
    revoked_by: string;
    /**
     * revoked_at
     * The date the API key was revoked.
     * @format date-time
     */
    revoked_at: string;
}
/** The authenticated user's details. */
export interface AuthAdminSessionResponse {
    /**
     * user
     * The logged-in user.
     */
    user: AdminUser;
}
/** The authentication's details. */
export interface AuthCallbackResponse {
    /**
     * location
     * The location to redirect the user to for further authentication with the third-party provider.
     */
    location: string;
}
/** The authentication's details. */
export interface AuthResponse {
    /**
     * token
     * The JWT token used for registration or authentication.
     */
    token: string;
}
/** The authenticated customer's details. */
export interface AuthStoreSessionResponse {
    /**
     * user
     * The logged-in customer.
     */
    user: StoreCustomer;
}
/** The calculated price's details. */
export interface BaseCalculatedPriceSet {
    /**
     * id
     * The calculated price's ID.
     */
    id: string;
    /**
     * is_calculated_price_price_list
     * Whether the calculated price belongs to a price list.
     */
    is_calculated_price_price_list?: boolean;
    /**
     * is_calculated_price_tax_inclusive
     * Whether the calculated price is tax inclusive.
     */
    is_calculated_price_tax_inclusive?: boolean;
    /**
     * calculated_amount
     * The amount of the calculated price, or `null` if there isn't a calculated price. This is the amount shown to the customer.
     */
    calculated_amount: number;
    /**
     * calculated_amount_with_tax
     * The calculated price's amount with taxes applied.
     */
    calculated_amount_with_tax?: number;
    /**
     * calculated_amount_without_tax
     * The calculated price's amount without taxes applied.
     */
    calculated_amount_without_tax?: number;
    /**
     * is_original_price_price_list
     * Whether the original price belongs to a price list.
     */
    is_original_price_price_list?: boolean;
    /**
     * is_original_price_tax_inclusive
     * Whether the original price is tax inclusive.
     */
    is_original_price_tax_inclusive?: boolean;
    /**
     * original_amount
     * The amount of the original price, or `null` if there isn't an original price. This amount is useful to compare with the `calculated_amount`, such as to check for discounted value.
     */
    original_amount: number;
    /**
     * currency_code
     * The calculated price's currency code.
     * @example "usd"
     */
    currency_code: string;
    /** The calculated price's details. */
    calculated_price?: object;
    /** The original price's details. */
    original_price?: object;
    /**
     * original_amount_with_tax
     * The amount of the original price with taxes applied.
     */
    original_amount_with_tax: number;
    /**
     * original_amount_without_tax
     * The amount of the original price without taxes.
     */
    original_amount_without_tax: number;
}
/** The details of a captured payment. */
export interface BaseCapture {
    /**
     * id
     * The payment capture's ID.
     */
    id: string;
    /**
     * amount
     * The captured amount.
     */
    amount: number;
    /**
     * created_at
     * The date the capture was created.
     * @format date-time
     */
    created_at: string;
    /**
     * created_by
     * The ID of the user that captured the payment.
     */
    created_by?: string;
    payment: object;
}
/** The item's cart. */
export interface BaseCart {
    /**
     * id
     * The cart's ID.
     */
    id: string;
    /** The region's details. */
    region?: BaseRegion;
    /**
     * region_id
     * The cart's region id.
     */
    region_id?: string;
    /**
     * customer_id
     * The cart's customer id.
     */
    customer_id?: string;
    /**
     * sales_channel_id
     * The cart's sales channel id.
     */
    sales_channel_id?: string;
    /**
     * email
     * The cart's email.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The cart's currency code.
     */
    currency_code: string;
    /** The cart's shipping address. */
    shipping_address?: BaseCartAddress;
    /** The cart's shipping address. */
    billing_address?: BaseCartAddress;
    /** The cart's items. */
    items?: object[];
    /** The cart's shipping methods. */
    shipping_methods?: BaseCartShippingMethod[];
    /** The payment collection's details. */
    payment_collection?: BasePaymentCollection;
    /** The cart's metadata. */
    metadata?: object;
    /**
     * created_at
     * The cart's created at.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The cart's updated at.
     * @format date-time
     */
    updated_at?: string;
    /**
     * original_item_total
     * The cart's original item total.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The cart's original item subtotal.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The cart's original item tax total.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The cart's item total.
     */
    item_total: number;
    /**
     * item_subtotal
     * The cart's item subtotal.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The cart's item tax total.
     */
    item_tax_total: number;
    /**
     * original_total
     * The cart's original total.
     */
    original_total: number;
    /**
     * original_subtotal
     * The cart's original subtotal.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The cart's original tax total.
     */
    original_tax_total: number;
    /**
     * total
     * The cart's total.
     */
    total: number;
    /**
     * subtotal
     * The cart's subtotal.
     */
    subtotal: number;
    /**
     * tax_total
     * The cart's tax total.
     */
    tax_total: number;
    /**
     * discount_total
     * The cart's discount total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The cart's discount tax total.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The cart's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The cart's gift card tax total.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The cart's shipping total.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The cart's shipping subtotal.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The cart's shipping tax total.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The cart's original shipping total.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The cart's original shipping subtotal.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The cart's original shipping tax total.
     */
    original_shipping_tax_total: number;
}
/** The cart's shipping address. */
export type BaseCartAddress = object;
/** The tax line's item. */
export interface BaseCartLineItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle?: string;
    /**
     * thumbnail
     * The item's thumbnail.
     */
    thumbnail?: string;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The product's details. */
    product?: BaseProduct;
    /**
     * product_id
     * The item's product id.
     */
    product_id?: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title?: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description?: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle?: string;
    /**
     * product_type
     * The item's product type.
     */
    product_type?: string;
    /**
     * product_collection
     * The item's product collection.
     */
    product_collection?: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle?: string;
    /** The product variant's details. */
    variant?: BaseProductVariant;
    /**
     * variant_id
     * The item's variant id.
     */
    variant_id?: string;
    /**
     * variant_sku
     * The item's variant sku.
     */
    variant_sku?: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode?: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title?: string;
    /** The item's variant option values. */
    variant_option_values?: object;
    /**
     * requires_shipping
     * The item's requires shipping.
     */
    requires_shipping: boolean;
    /**
     * is_discountable
     * The item's is discountable.
     */
    is_discountable: boolean;
    /**
     * is_tax_inclusive
     * The item's is tax inclusive.
     */
    is_tax_inclusive: boolean;
    /**
     * compare_at_unit_price
     * The item's compare at unit price.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price: number;
    /** The item's tax lines. */
    tax_lines?: object[];
    /** The item's adjustments. */
    adjustments?: BaseLineItemAdjustment[];
    /** The item's cart. */
    cart: BaseCart;
    /**
     * cart_id
     * The item's cart id.
     */
    cart_id: string;
    /** The item's metadata. */
    metadata?: object;
    /**
     * created_at
     * The item's created at.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The item's updated at.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The item's deleted at.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * original_total
     * The item's original total.
     */
    original_total: number;
    /**
     * original_subtotal
     * The item's original subtotal.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The item's original tax total.
     */
    original_tax_total: number;
    /**
     * item_total
     * The item's item total.
     */
    item_total: number;
    /**
     * item_subtotal
     * The item's item subtotal.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The item's item tax total.
     */
    item_tax_total: number;
    /**
     * total
     * The item's total.
     */
    total: number;
    /**
     * subtotal
     * The item's subtotal.
     */
    subtotal: number;
    /**
     * tax_total
     * The item's tax total.
     */
    tax_total: number;
    /**
     * discount_total
     * The item's discount total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The item's discount tax total.
     */
    discount_tax_total: number;
}
/** A cart's shipping method. */
export interface BaseCartShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id: string;
    /**
     * cart_id
     * The ID of the cart this shipping method belongs to.
     */
    cart_id: string;
    /**
     * name
     * The shipping method's name.
     */
    name: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount is tax inclusive.
     */
    is_tax_inclusive: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id?: string;
    /** The shipping method's data, useful for fulfillment handling by third-party services. */
    data?: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The shipping method's tax lines. */
    tax_lines?: BaseShippingMethodTaxLine[];
    /** The shipping method's adjustments, such as applied promotions. */
    adjustments?: BaseShippingMethodAdjustment[];
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes applied on the shipping method's amount including promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The shipping method's total amount including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total amount excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The total taxes applied on the shipping method's amount including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total amount discounted.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The taxes applied on the discounted amount.
     */
    discount_tax_total: number;
}
/** The claim item's details. */
export interface BaseClaimItem {
    /**
     * id
     * The claim item's ID.
     */
    id: string;
    /**
     * claim_id
     * The ID of the claim this item belongs to.
     */
    claim_id: string;
    /**
     * order_id
     * The ID of the order this item belongs to.
     */
    order_id: string;
    /**
     * item_id
     * The ID of the item in the order.
     */
    item_id: string;
    /**
     * quantity
     * The quantity claimed.
     */
    quantity: number;
    /** The claim's reason. */
    reason: "missing_item" | "wrong_item" | "production_failure" | "other";
    /** The quantity claimed. */
    raw_quantity: {
        /** The raw quantity's value. */
        value: string | number;
    };
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the claim was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the claim was updated.
     * @format date-time
     */
    updated_at?: string;
}
/** The product collection's details. */
export interface BaseCollection {
    /**
     * id
     * The collection's ID.
     */
    id: string;
    /**
     * title
     * The collection's title.
     */
    title: string;
    /**
     * handle
     * The collection's handle.
     */
    handle: string;
    /**
     * created_at
     * The collection's creation date.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The collection's update date.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The collection's deletion date.
     * @format date-time
     */
    deleted_at: string;
    /** The collection's products. */
    products?: object[];
    /** The collection's metadata, used to store custom key-value pairs. */
    metadata: object;
}
/** The item's details. */
export interface BaseExchangeItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * exchange_id
     * The ID of the exchange this item belongs to.
     */
    exchange_id: string;
    /**
     * order_id
     * The ID of the order this item belongs to.
     */
    order_id: string;
    /**
     * item_id
     * The ID of the item in the order.
     */
    item_id: string;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The fulfillment provider's details. */
export interface BaseFulfillmentProvider {
    /**
     * id
     * The provider's ID.
     */
    id: string;
    /**
     * is_enabled
     * Whether the provider is enabled.
     */
    is_enabled: boolean;
}
/** The adjustment's details. */
export interface BaseLineItemAdjustment {
    item: object;
    /**
     * item_id
     * The ID of the item this adjustment applies on.
     */
    item_id: string;
    /**
     * id
     * The adjustment's ID.
     */
    id: string;
    /**
     * code
     * The adjustment's code.
     */
    code?: string;
    /**
     * amount
     * The adjustment's amount.
     */
    amount: number;
    /**
     * cart_id
     * The ID of the cart this adjustment belongs to.
     */
    cart_id: string;
    /**
     * description
     * The adjustment's description.
     */
    description?: string;
    /**
     * promotion_id
     * The ID of the promotion applied by this adjustment.
     */
    promotion_id?: string;
    /**
     * provider_id
     * The adjustment's provider ID.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the adjustment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the adjustment was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The tax line's details */
export interface BaseLineItemTaxLine {
    /** The tax line's item. */
    item: BaseCartLineItem;
    /**
     * item_id
     * The ID of the item the tax line applies on.
     */
    item_id: string;
    /**
     * total
     * The item's total, including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's subtotal excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * id
     * The tax line's ID.
     */
    id: string;
    /**
     * description
     * The tax line's description.
     */
    description?: string;
    /**
     * tax_rate_id
     * The ID of the associated tax rate.
     */
    tax_rate_id?: string;
    /**
     * code
     * The code the tax rate is identified by.
     */
    code: string;
    /**
     * rate
     * The rate to charge.
     */
    rate: number;
    /**
     * provider_id
     * The ID of the tax provider.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the tax line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax line was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order's details. */
export interface BaseOrder {
    /** The order's payment collections. */
    payment_collections?: BasePaymentCollection[];
    /** The order's fulfillments. */
    fulfillments?: BaseOrderFulfillment[];
    /** An order address. */
    shipping_address?: BaseOrderAddress;
    /** An order address. */
    billing_address?: BaseOrderAddress;
    /**
     * id
     * The order's ID.
     */
    id: string;
    /**
     * version
     * The order's version.
     */
    version: number;
    /**
     * region_id
     * The ID of the region associated with the order.
     */
    region_id: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id: string;
    /**
     * sales_channel_id
     * The ID of the sales channel the order is placed in.
     */
    sales_channel_id: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email: string;
    /**
     * currency_code
     * The order's currency code.
     */
    currency_code: string;
    /**
     * display_id
     * The order's display ID.
     */
    display_id?: number;
    /** The order's items. */
    items: BaseOrderLineItem[];
    /** The order's shipping methods. */
    shipping_methods: BaseOrderShippingMethod[];
    /** The order's payment status. */
    payment_status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "captured" | "partially_captured" | "partially_refunded" | "refunded" | "requires_action";
    /** The order's fulfillment status. */
    fulfillment_status: "canceled" | "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_delivered" | "delivered";
    /** The order's transactions. */
    transactions?: BaseOrderTransaction[];
    /** The order's summary details. */
    summary: BaseOrderSummary;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_item_total
     * The total of the order's items including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The tax total of the order's items excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The total of the order's items including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The tax total of the order's items including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The order's total excluding promotions, including taxes.
     */
    original_total: number;
    /**
     * original_subtotal
     * The order's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The order's tax total, excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The order's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The order's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The order's discount or promotions total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The tax total of order's discount or promotion.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The order's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The tax total of the order's gift card.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The order's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The tax total of the order's shipping.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The tax total of the order's shipping excluding promotions.
     */
    original_shipping_tax_total: number;
    /**
     * status
     * The order's status.
     */
    status: string;
}
/** An order address. */
export interface BaseOrderAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * customer_id
     * The ID of the customer this address belongs to.
     */
    customer_id?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The fulfillment's details. */
export interface BaseOrderFulfillment {
    /**
     * id
     * The fulfillment's ID.
     */
    id: string;
    /**
     * location_id
     * The ID of the location the items are fulfilled from.
     */
    location_id: string;
    /**
     * packed_at
     * The date the items were packed.
     * @format date-time
     */
    packed_at: string;
    /**
     * shipped_at
     * The date the items were shipped.
     * @format date-time
     */
    shipped_at: string;
    /**
     * delivered_at
     * The date the items were delivered.
     * @format date-time
     */
    delivered_at: string;
    /**
     * canceled_at
     * The date the items were canceled.
     * @format date-time
     */
    canceled_at: string;
    /** Data useful for the fulfillment provider handling it. This is taken from the associated shipping option. */
    data: object;
    /**
     * provider_id
     * The ID of the fulfillment provider used to handle the fulfillment.
     */
    provider_id: string;
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /** The fulfillment's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the fulfillment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the fulfillment was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * requires_shipping
     * Whether the fulfillment requires shipping.
     */
    requires_shipping: boolean;
}
/** The item's detail. */
export interface BaseOrderItemDetail {
    /**
     * id
     * the detail's ID.
     */
    id: string;
    /**
     * id
     * the ID of the associated line item.
     */
    item_id: string;
    item: object;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /**
     * fulfilled_quantity
     * The item's fulfilled quantity.
     */
    fulfilled_quantity: number;
    /**
     * fulfilled_quantity
     * The item's delivered quantity.
     */
    delivered_quantity: number;
    /**
     * shipped_quantity
     * The item's shipped quantity.
     */
    shipped_quantity: number;
    /**
     * return_requested_quantity
     * The item's quantity that's requested to be returned.
     */
    return_requested_quantity: number;
    /**
     * return_received_quantity
     * The item's quantity that's returned and added to the underlying variant's stocked quantity.
     */
    return_received_quantity: number;
    /**
     * return_dismissed_quantity
     * The item's quantity that's returned but damaged. So, it's not added to the underlying variant's stocked quantity.
     */
    return_dismissed_quantity: number;
    /**
     * written_off_quantity
     * The item's quantity that's removed from the order.
     */
    written_off_quantity: number;
    /**
     * metadata
     * The item's metadata, can hold custom key-value pairs.
     */
    metadata: object;
    /**
     * created_at
     * The date the detail was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the detail was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The item's items. */
export interface BaseOrderLineItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle: string;
    /**
     * thumbnail
     * The URL of the item's thumbnail.
     */
    thumbnail: string;
    /** The product variant's details. */
    variant?: BaseProductVariant;
    /**
     * variant_id
     * The ID of the associated variant.
     */
    variant_id: string;
    /** The product's details. */
    product?: BaseProduct;
    /**
     * product_id
     * The ID of the associated product.
     */
    product_id: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle: string;
    /**
     * product_type
     * The item's product type.
     */
    product_type: string;
    /**
     * product_collection
     * The ID of the collection the item's product belongs to.
     */
    product_collection: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle: string;
    /**
     * variant_sku
     * The item's variant SKU.
     */
    variant_sku: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title: string;
    /**
     * The values of the item variant's options.
     * @example {"Color":"Blue"}
     */
    variant_option_values: object;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping: boolean;
    /**
     * is_discountable
     * Whether the item is discountable.
     */
    is_discountable: boolean;
    /**
     * is_tax_inclusive
     * Whether the item is tax inclusive.
     */
    is_tax_inclusive: boolean;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price: number;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's tax lines. */
    tax_lines?: BaseOrderLineItemTaxLine[];
    /** The item's adjustments. */
    adjustments?: BaseOrderLineItemAdjustment[];
    /** The item's detail. */
    detail: BaseOrderItemDetail;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * original_total
     * The item's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The item's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the item, excluding promotions.
     */
    original_tax_total: number;
    /**
     * item_total
     * The total taxes of the item, including promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The item's total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The total taxes of the item, including promotions.
     */
    item_tax_total: number;
    /**
     * total
     * The item's total, including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's subtotal excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The tax total of the item including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discount amount of the item.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * refundable_total
     * The total refundable amount of the item's total.
     */
    refundable_total: number;
    /**
     * refundable_total_per_unit
     * The total refundable amount of the item's total for a single quantity.
     */
    refundable_total_per_unit: number;
    /**
     * product_type_id
     * The ID of the associated product's type.
     */
    product_type_id: string;
}
/** The adjustment's details. */
export interface BaseOrderLineItemAdjustment {
    item: object;
    /**
     * item_id
     * The ID of the item this adjustment applies to.
     */
    item_id: string;
    /**
     * id
     * The adjustment's ID.
     */
    id: string;
    /**
     * code
     * The adjustment's code.
     */
    code?: string;
    /**
     * amount
     * The adjustment's amount.
     */
    amount: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    /**
     * description
     * The adjustment's description.
     */
    description?: string;
    /**
     * promotion_id
     * The ID of the promotion that this applies on the order's item.
     */
    promotion_id?: string;
    /**
     * provider_id
     * The adjustment's provider ID.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the adjustment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the adjustment was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The tax line's tax lines. */
export interface BaseOrderLineItemTaxLine {
    item: object;
    /**
     * item_id
     * The ID of the associated line item.
     */
    item_id: string;
    /**
     * total
     * The tax line's total including promotions.
     */
    total: number;
    /**
     * subtotal
     * The tax line's subtotal excluding promotions.
     */
    subtotal: number;
    /**
     * id
     * The tax line's ID.
     */
    id: string;
    /**
     * description
     * The tax line's description.
     */
    description?: string;
    /**
     * tax_rate_id
     * The ID of the applied tax rate.
     */
    tax_rate_id?: string;
    /**
     * code
     * The code that the tax rate is identified by.
     */
    code: string;
    /**
     * rate
     * The rate to charge.
     */
    rate: number;
    /**
     * provider_id
     * The ID of the tax provider used to calculate the tax line.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the tax line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax line was updated.
     * @format date-time
     */
    updated_at: string;
}
/** Details of changes to a shipping method. */
export interface BaseOrderShippingDetail {
    /**
     * id
     * The ID of the new changes to the shipping method.
     */
    id: string;
    /**
     * shipping_method_id
     * The ID of the shipping method.
     */
    shipping_method_id: string;
    shipping_method: object;
    /**
     * claim_id
     * The ID of the associated claim.
     */
    claim_id?: string;
    /**
     * exchange_id
     * The ID of the associated exchange.
     */
    exchange_id?: string;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id?: string;
    /**
     * created_at
     * The date the shipping method change was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method change was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The shipping method's details. */
export interface BaseOrderShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order the shipping method belongs to.
     */
    order_id: string;
    /**
     * name
     * The shipping method's name.
     */
    name: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount includes applied taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id: string;
    /** The shipping method's data, useful for fulfillment provider handling its fulfillment. */
    data: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata: object;
    /** The shipping method's tax lines. */
    tax_lines?: BaseOrderShippingMethodTaxLine[];
    /** The shipping method's adjustments. */
    adjustments?: BaseOrderShippingMethodAdjustment[];
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The shipping method's total taxes excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The shipping method's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discounts applied on the shipping method.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The taxes applied on the discount amount.
     */
    discount_tax_total: number;
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at: string;
    /** Details of changes to a shipping method. */
    detail?: BaseOrderShippingDetail;
}
/** The adjustment's adjustments. */
export interface BaseOrderShippingMethodAdjustment {
    shipping_method: object;
    /**
     * shipping_method_id
     * The ID of the shipping method this adjustment applies on.
     */
    shipping_method_id: string;
    /**
     * id
     * The adjustment's ID.
     */
    id: string;
    /**
     * code
     * The adjustment's code.
     */
    code?: string;
    /**
     * amount
     * The adjustment's amount.
     */
    amount: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    /**
     * description
     * The adjustment's description.
     */
    description?: string;
    /**
     * promotion_id
     * The ID of the promotion applied by this adjustment.
     */
    promotion_id?: string;
    /**
     * provider_id
     * The adjustment's provider ID.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the adjustment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the adjustment was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The tax line's details. */
export interface BaseOrderShippingMethodTaxLine {
    shipping_method: object;
    /**
     * shipping_method_id
     * The ID of the shipping method this tax line belongs to.
     */
    shipping_method_id: string;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * id
     * The tax line's ID.
     */
    id: string;
    /**
     * description
     * The tax line's description.
     */
    description?: string;
    /**
     * tax_rate_id
     * The ID of the applied tax rate.
     */
    tax_rate_id?: string;
    /**
     * code
     * The code that the tax rate is identified by.
     */
    code: string;
    /**
     * rate
     * The rate to charge.
     */
    rate: number;
    /**
     * provider_id
     * The ID of the tax provider handling the tax calculation.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the tax line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax line was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order's summary details. */
export interface BaseOrderSummary {
    /**
     * paid_total
     * The total amount paid.
     */
    paid_total: number;
    /**
     * refunded_total
     * The total amount refunded.
     */
    refunded_total: number;
    /**
     * pending_difference
     * The difference pending to be processed. If negative, the customer needs a refund. Otherwise, additional payment is required from the customer.
     */
    pending_difference: number;
    /**
     * current_order_total
     * The order's current total, could be the total after a change in the order.
     */
    current_order_total: number;
    /**
     * original_order_total
     * The order's original total.
     */
    original_order_total: number;
    /**
     * transaction_total
     * The total of the transactions made on the order.
     */
    transaction_total: number;
    /**
     * accounting_total
     * The order's total without the credit-line total.
     */
    accounting_total: number;
}
/** An order transaction's details. */
export interface BaseOrderTransaction {
    /**
     * id
     * The transaction's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order this transaction belongs to.
     */
    order_id: string;
    /**
     * amount
     * The transaction's amount.
     */
    amount: number;
    /**
     * currency_code
     * The transaction's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * reference
     * The name of a table that this transaction references. If this transaction is for captured payment, its value is `capture`. If this transaction is for refunded payment, its value is `refund`.
     */
    reference: "capture" | "refund";
    /**
     * reference_id
     * The ID of the referenced record in the referenced table.
     */
    reference_id: string;
    /** The transaction's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date that the transaction was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date that the transaction was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The payment's details. */
export interface BasePayment {
    /**
     * id
     * The payment's ID.
     */
    id: string;
    /**
     * amount
     * The payment's amount.
     */
    amount: number;
    /**
     * authorized_amount
     * The amount authorized of the payment.
     */
    authorized_amount?: number;
    /**
     * currency_code
     * The payment's currency code.
     */
    currency_code: string;
    /**
     * provider_id
     * The ID of the payment provider used to process this payment.
     */
    provider_id: string;
    /** The payment's data, useful for processing by the payment provider. */
    data?: object;
    /**
     * created_at
     * The date the payment was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the payment was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * captured_at
     * The date the payment was captured.
     * @format date-time
     */
    captured_at?: string;
    /**
     * canceled_at
     * The date the payment was canceled.
     * @format date-time
     */
    canceled_at?: string;
    /**
     * captured_amount
     * The captured amount of the payment.
     */
    captured_amount?: number;
    /**
     * captured_amount
     * The refunded amount of the payment.
     */
    refunded_amount?: number;
    /** The details of payment captures. */
    captures?: BaseCapture[];
    /** The details of payment refunds. */
    refunds?: BaseRefund[];
    payment_collection?: object;
    payment_session?: object;
}
/** The payment collection's details. */
export interface BasePaymentCollection {
    /**
     * id
     * The payment collection's ID.
     */
    id: string;
    /**
     * currency_code
     * The payment collection's currency code.
     */
    currency_code: string;
    /**
     * amount
     * The total amount to be paid.
     */
    amount: number;
    /**
     * authorized_amount
     * The total authorized amount of the collection's payments.
     */
    authorized_amount?: number;
    /**
     * captured_amount
     * The total captured amount of the collection's payments.
     */
    captured_amount?: number;
    /**
     * refunded_amount
     * The total refunded amount of the collection's payments.
     */
    refunded_amount?: number;
    /**
     * completed_at
     * The date the payment collection was completed.
     * @format date-time
     */
    completed_at?: string;
    /**
     * created_at
     * The date the payment collection was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the payment collection was updated.
     * @format date-time
     */
    updated_at?: string;
    /** The payment collection's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The payment collection's status. */
    status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "completed" | "failed";
    /** The payment provider used to process the collection's payments and sessions. */
    payment_providers: BasePaymentProvider[];
    /** The payment collection's payment sessions. */
    payment_sessions?: BasePaymentSession[];
    /** The payment collection's payments. */
    payments?: BasePayment[];
}
/** The payment provider's details. */
export interface BasePaymentProvider {
    /**
     * id
     * The payment provider's ID.
     */
    id: string;
}
/** The payment session's details. */
export interface BasePaymentSession {
    /**
     * id
     * The payment session's ID.
     */
    id: string;
    /**
     * amount
     * The payment session's amount.
     */
    amount: number;
    /**
     * currency_code
     * The payment session's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * provider_id
     * The ID of the payment provider processing this session.
     */
    provider_id: string;
    /** The payment session's data, useful for the payment provider processing the payment. */
    data: object;
    /**
     * The context around the payment, such as the customer's details.
     * @example {"customer":{"id":"cus_123"}}
     */
    context?: object;
    /** The payment session's status. */
    status: "error" | "authorized" | "canceled" | "captured" | "pending" | "requires_more";
    /**
     * authorized_at
     * The date the payment session was authorized.
     * @format date-time
     */
    authorized_at?: string;
    payment_collection?: object;
    /** The payment's details. */
    payment?: BasePayment;
}
/** The product's details. */
export interface BaseProduct {
    /** The product collection's details. */
    collection?: BaseCollection;
    /** The product's categories. */
    categories?: BaseProductCategory[];
    /** The product's variants. */
    variants: object[];
    /** The product type's details. */
    type?: BaseProductType;
    /** The product's tags. */
    tags?: BaseProductTag[];
    /**
     * length
     * The product's length.
     */
    length: number;
    /**
     * title
     * The product's title.
     */
    title: string;
    /** The product's status. */
    status: "draft" | "proposed" | "published" | "rejected";
    /** The product's options. */
    options: BaseProductOption[];
    /**
     * description
     * The product's description.
     */
    description: string;
    /**
     * id
     * The product's ID.
     */
    id: string;
    /** The product's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the product was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * handle
     * The product's unique handle.
     */
    handle: string;
    /**
     * subtitle
     * The product's subtitle.
     */
    subtitle: string;
    /**
     * is_giftcard
     * Whether the product is a gift card.
     */
    is_giftcard: boolean;
    /**
     * thumbnail
     * The product's thumbnail.
     */
    thumbnail: string;
    /**
     * width
     * The product's width.
     */
    width: number;
    /**
     * weight
     * The product's weight.
     */
    weight: number;
    /**
     * height
     * The product's height.
     */
    height: number;
    /**
     * origin_country
     * The product's origin country.
     */
    origin_country: string;
    /**
     * hs_code
     * The product's HS code.
     */
    hs_code: string;
    /**
     * mid_code
     * The product's MID code.
     */
    mid_code: string;
    /**
     * material
     * The product's material.
     */
    material: string;
    /**
     * collection_id
     * The ID of the collection that the product belongs to.
     */
    collection_id: string;
    /**
     * type_id
     * The ID of the product's type.
     */
    type_id: string;
    /** The product's images. */
    images: BaseProductImage[];
    /**
     * discountable
     * Whether discounts can be applied on the product.
     */
    discountable: boolean;
    /**
     * external_id
     * The ID of a product in an external system, such as an ERP or CMS.
     */
    external_id: string;
    /**
     * deleted_at
     * The date the product was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The product category's details. */
export interface BaseProductCategory {
    /** The category's children. */
    category_children: AdminProductCategory[];
    /** The product category's details. */
    parent_category: AdminProductCategory;
    /** The category's products. */
    products?: object[];
    /**
     * name
     * The category's name.
     */
    name: string;
    /**
     * description
     * The category's description.
     */
    description: string;
    /**
     * id
     * The category's ID.
     */
    id: string;
    /** The category's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the category was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the category was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * handle
     * The category's unique handle.
     */
    handle: string;
    /**
     * deleted_at
     * The date the category was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * is_active
     * Whether the category is active. If disabled, the category isn't shown in the storefront.
     */
    is_active: boolean;
    /**
     * is_internal
     * Whether the category is internal. If enabled, the category is only seen by admin users.
     */
    is_internal: boolean;
    /**
     * rank
     * The category's rank among sibling categories.
     */
    rank: number;
    /**
     * parent_category_id
     * The ID of the category's parent.
     */
    parent_category_id: string;
}
/** The image's details. */
export interface BaseProductImage {
    /**
     * id
     * The image's ID.
     */
    id: string;
    /**
     * url
     * The image's URL.
     */
    url: string;
    /**
     * created_at
     * The date the image was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the image was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the image was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The image's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * rank
     * The image's rank among its sibling images.
     */
    rank: number;
}
/** The product option's details. */
export interface BaseProductOption {
    /**
     * id
     * The product option's ID.
     */
    id: string;
    /**
     * title
     * The product option's title.
     */
    title: string;
    product?: object;
    /**
     * product_id
     * The ID of the product this option belongs to.
     */
    product_id?: string;
    /** The product option's values. */
    values?: BaseProductOptionValue[];
    /** The product option's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product option was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the product option was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the product option was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The product option value's details. */
export interface BaseProductOptionValue {
    /**
     * id
     * The value's ID.
     */
    id: string;
    /**
     * value
     * The value.
     */
    value: string;
    option?: object;
    /**
     * option_id
     * The ID of the option this value belongs to.
     */
    option_id?: string;
    /** The value's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the value was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the value was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the value was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The product tag's details. */
export interface BaseProductTag {
    /**
     * id
     * The tag's ID.
     */
    id: string;
    /**
     * value
     * The tag's value.
     */
    value: string;
    /**
     * created_at
     * The date the tag was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tag was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the tag was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The tag's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The product type's details. */
export interface BaseProductType {
    /**
     * id
     * The type's ID.
     */
    id: string;
    /**
     * value
     * The type's value.
     */
    value: string;
    /**
     * created_at
     * The date the type was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the type was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the type was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The type's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The product variant's details. */
export interface BaseProductVariant {
    /**
     * id
     * The variant's ID.
     */
    id: string;
    /**
     * title
     * The variant's title.
     */
    title: string;
    /**
     * sku
     * The variant's SKU.
     */
    sku: string;
    /**
     * barcode
     * The variant's barcode.
     */
    barcode: string;
    /**
     * ean
     * The variant's EAN code.
     */
    ean: string;
    /**
     * upc
     * The variant's UPC.
     */
    upc: string;
    /**
     * allow_backorder
     * Whether the variant can be ordered even if it's out of stock.
     */
    allow_backorder: boolean;
    /**
     * manage_inventory
     * Whether the Medusa application manages the variant's inventory quantity and availablility. If disabled, the variant is always considered in stock.
     */
    manage_inventory: boolean;
    /**
     * inventory_quantity
     * The variant's inventory quantity. This is only included if you pass in the `fields` query parameter a `+variants.inventory_quantity` parameter.
     */
    inventory_quantity?: number;
    /**
     * hs_code
     * The variant's HS code.
     */
    hs_code: string;
    /**
     * origin_country
     * The variant's origin country.
     */
    origin_country: string;
    /**
     * mid_code
     * The variant's MID code.
     */
    mid_code: string;
    /**
     * material
     * The variant's material.
     */
    material: string;
    /**
     * weight
     * The variant's weight.
     */
    weight: number;
    /**
     * length
     * The variant's length.
     */
    length: number;
    /**
     * height
     * The variant's height.
     */
    height: number;
    /**
     * width
     * The variant's width.
     */
    width: number;
    /**
     * variant_rank
     * The variant's rank among its sibling variants.
     */
    variant_rank?: number;
    /** The variant's option values. */
    options: BaseProductOptionValue[];
    /** The product's details. */
    product?: BaseProduct;
    /**
     * product_id
     * The ID of the product that the variant belongs to.
     */
    product_id?: string;
    /** The calculated price's details. */
    calculated_price?: BaseCalculatedPriceSet;
    /**
     * created_at
     * The date the variant was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the variant was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the variant was deleted.
     * @format date-time
     */
    deleted_at: string;
    /** The variant's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The rule value's details. */
export interface BasePromotionRuleValue {
    /**
     * id
     * The value's ID.
     */
    id: string;
    /**
     * value
     * The value.
     */
    value?: string;
}
/** The refund's details. */
export interface BaseRefund {
    /**
     * id
     * The refund's ID.
     */
    id: string;
    /**
     * amount
     * The refund's amount.
     */
    amount: number;
    /**
     * refund_reason_id
     * The ID of the refund reason.
     */
    refund_reason_id?: string;
    /**
     * note
     * More details about the refund.
     */
    note?: string;
    /**
     * created_at
     * The date the refund was created.
     * @format date-time
     */
    created_at: string;
    /**
     * created_by
     * The ID of the user that created the refund.
     */
    created_by?: string;
    payment: object;
    /** The refund reason's details. */
    refund_reason?: RefundReason;
}
/** The region's details. */
export interface BaseRegion {
    /**
     * id
     * The region's ID.
     */
    id: string;
    /**
     * name
     * The region's name.
     */
    name: string;
    /**
     * currency_code
     * The region's currency code.
     */
    currency_code: string;
    /**
     * automatic_taxes
     * The region's automatic taxes.
     */
    automatic_taxes?: boolean;
    /** The region's countries. */
    countries?: BaseRegionCountry[];
    /** The region's payment providers. */
    payment_providers?: AdminPaymentProvider[];
    /** The region's metadata. */
    metadata?: object;
    /**
     * created_at
     * The region's created at.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The region's updated at.
     * @format date-time
     */
    updated_at?: string;
}
/** The country's details. */
export interface BaseRegionCountry {
    /**
     * id
     * The country's ID.
     */
    id: string;
    /**
     * iso_2
     * The country's iso 2.
     * @example "us"
     */
    iso_2?: string;
    /**
     * iso_3
     * The country's iso 3.
     * @example "usa"
     */
    iso_3?: string;
    /**
     * num_code
     * The country's num code.
     * @example 840
     */
    num_code?: string;
    /**
     * name
     * The country's name.
     */
    name?: string;
    /**
     * display_name
     * The country's display name.
     */
    display_name?: string;
}
/** The operator's details. */
export interface BaseRuleOperatorOptions {
    /**
     * id
     * The operator's ID.
     * @example "in"
     */
    id: string;
    /**
     * value
     * The operator's value.
     * @example "in"
     */
    value: string;
    /**
     * label
     * The operator's label.
     * @example "In"
     */
    label: string;
}
/** The adjustment's details. */
export interface BaseShippingMethodAdjustment {
    shipping_method: object;
    /**
     * shipping_method_id
     * The ID of the shipping method the adjustment is applied on.
     */
    shipping_method_id: string;
    /**
     * id
     * The adjustment's ID.
     */
    id: string;
    /**
     * code
     * The adjustment's code.
     */
    code?: string;
    /**
     * amount
     * The adjustment's amount.
     */
    amount: number;
    /**
     * cart_id
     * The ID of the associated cart.
     */
    cart_id: string;
    /**
     * description
     * The adjustment's description.
     */
    description?: string;
    /**
     * promotion_id
     * The ID of the promotion applied by this adjustment.
     */
    promotion_id?: string;
    /**
     * provider_id
     * The adjustment's provider ID.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the adjustment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the adjustment was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The tax line's details. */
export interface BaseShippingMethodTaxLine {
    shipping_method: object;
    /**
     * shipping_method_id
     * The ID of this shipping method the tax line belongs to.
     */
    shipping_method_id: string;
    /**
     * total
     * The method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * id
     * The tax line's ID.
     */
    id: string;
    /**
     * description
     * The tax line's description.
     */
    description?: string;
    /**
     * tax_rate_id
     * The ID of the applied tax rate.
     */
    tax_rate_id?: string;
    /**
     * code
     * The code that the rate is identified by.
     */
    code: string;
    /**
     * rate
     * The rate to charge.
     */
    rate: number;
    /**
     * provider_id
     * The ID of the tax provider that calculated the taxes.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the tax line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax line was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The campaign's details. */
export interface CampaignResponse {
    /**
     * id
     * The campaign's ID.
     */
    id: string;
    /**
     * name
     * The campaign's name.
     */
    name: string;
    /**
     * description
     * The campaign's description.
     */
    description: string;
    /**
     * currency
     * The campaign's currency.
     */
    currency: string;
    /**
     * campaign_identifier
     * The campaign's campaign identifier.
     */
    campaign_identifier: string;
    /**
     * starts_at
     * The campaign's starts at.
     */
    starts_at: string;
    /**
     * ends_at
     * The campaign's ends at.
     */
    ends_at: string;
    /** The campaign's budget. */
    budget: {
        /**
         * id
         * The budget's ID.
         */
        id: string;
        type: "spend" | "usage";
        /**
         * currency_code
         * The budget's currency code.
         */
        currency_code: string;
        /**
         * limit
         * The budget's limit.
         */
        limit: number;
        /**
         * used
         * The budget's used.
         */
        used: number;
    };
}
/** The address to create. */
export interface CreateAddress {
    /**
     * customer_id
     * The ID of the customer this address belongs to.
     */
    customer_id?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** Filter by customer groups to get their associated customers. */
export interface CustomerGroupInCustomerFilters {
    /** Filter by a group's ID. */
    id: string | string[];
    /** Filter by a group's name. */
    name: string | string[];
    /** Filter by the group's creation date. */
    created_at: {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
    /** Filter by the group's update date. */
    updated_at: {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
    /** Filter by the group's deletion date. */
    deleted_at: {
        /**
         * $and
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: object[];
        /**
         * $or
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: object[];
        /** Filter by an exact match. */
        $eq?: string | string[];
        /**
         * $ne
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /** Filter by values in this array. */
        $in?: string[];
        /** Filter by values not in this array. */
        $nin?: string[];
        /** Filter by values not matching the conditions in this parameter. */
        $not?: string | object | string[];
        /**
         * $gt
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * $gte
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * $lt
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * $lte
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * $like
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * $re
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * $ilike
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * $fulltext
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /** Filter arrays that have overlapping values with this parameter. */
        $overlap?: string[];
        /** Filter arrays that contain some of the values of this parameter. */
        $contains?: string[];
        /** Filter arrays that contain all values of this parameter. */
        $contained?: string[];
        /**
         * $exists
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
    };
}
/** Response Error */
export interface Error {
    /** A slug code to indicate the type of the error. */
    code?: "invalid_state_error" | "invalid_request_error" | "api_error" | "unknown_error";
    /**
     * Description of the error that occurred.
     * @example "first_name must be a string"
     */
    message?: string;
    /** A slug indicating the type of the error. */
    type?: "QueryRunnerAlreadyReleasedError" | "TransactionAlreadyStartedError" | "TransactionNotStartedError" | "conflict" | "unauthorized" | "payment_authorization_error" | "duplicate_error" | "not_allowed" | "invalid_data" | "not_found" | "database_error" | "unexpected_state" | "invalid_argument" | "unknown_error";
}
/** The inventory level's details */
export interface InventoryLevel {
    /**
     * id
     * The inventory level's ID.
     */
    id: string;
    /**
     * inventory_item_id
     * The ID of the associated inventory item.
     */
    inventory_item_id: string;
    /**
     * location_id
     * The ID of the associated location.
     */
    location_id: string;
    /**
     * stocked_quantity
     * The inventory level's stocked quantity.
     */
    stocked_quantity: number;
    /**
     * reserved_quantity
     * The inventory level's reserved quantity.
     */
    reserved_quantity: number;
    /**
     * available_quantity
     * The inventory level's available quantity.
     */
    available_quantity: number;
    /**
     * incoming_quantity
     * The inventory level's incoming quantity.
     */
    incoming_quantity: number;
    /** The inventory level's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The order change's order. */
export interface Order {
    /**
     * id
     * The order's ID.
     */
    id: string;
    /**
     * version
     * The order's version.
     */
    version: number;
    order_change?: object;
    /** The order's status. */
    status: "canceled" | "requires_action" | "pending" | "completed" | "draft" | "archived";
    /**
     * region_id
     * The ID of the region the order belongs to.
     */
    region_id?: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id?: string;
    /**
     * sales_channel_id
     * The ID of the sales channel the order was placed in.
     */
    sales_channel_id?: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The order's currency code.
     * @example "usd"
     */
    currency_code: string;
    /** The address's details. */
    shipping_address?: OrderAddress;
    /** The address's details. */
    billing_address?: OrderAddress;
    /** The order's items. */
    items?: OrderLineItem[];
    /** The order's shipping methods. */
    shipping_methods?: OrderShippingMethod[];
    /** The order's transactions. */
    transactions?: OrderTransaction[];
    /** The order's summary. */
    summary?: object;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * canceled_at
     * The date the order was canceled.
     * @format date-time
     */
    canceled_at?: string;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_item_total
     * The order items' total including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The order items' total excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The taxes total for order items, excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The order items' total including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The order items' total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The tax total of the order items including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The order's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The order's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The tax total of the order excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The order's subtotal excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The tax total of the order including promotions.
     */
    tax_total: number;
    /**
     * discount_subtotal
     * The total discount excluding taxes.
     */
    discount_subtotal: number;
    /**
     * discount_total
     * The total discount including taxes.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The tax total applied on the discount.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The order's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The order's gift card tax total.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The order's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The total taxes of the order's shipping including taxes.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The total taxes of the order's shipping excluding promotions.
     */
    original_shipping_tax_total: number;
    /**
     * display_id
     * The order's display ID.
     */
    display_id: number;
    /** The order's credit lines, useful to add additional payment amounts for an order. */
    credit_lines?: OrderCreditLine[];
}
/** The address's details. */
export interface OrderAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * customer_id
     * The ID of the customer the address belongs to.
     */
    customer_id?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order change's details. */
export interface OrderChange {
    /**
     * id
     * The order change's ID.
     */
    id: string;
    /**
     * version
     * The order change's version. This will be the order's version when the change is applied.
     */
    version: number;
    /** The order change's type. */
    change_type?: "return" | "exchange" | "claim" | "edit";
    /**
     * order_id
     * The ID of the order this change applies on.
     */
    order_id: string;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id: string;
    /**
     * exchange_id
     * The ID of the associated exchange.
     */
    exchange_id: string;
    /**
     * claim_id
     * The ID of the associated claim.
     */
    claim_id: string;
    order: object;
    return_order: object;
    /** The order change's exchange. */
    exchange: OrderExchange;
    /** The order change's claim. */
    claim: OrderClaim;
    /** The order change's actions. */
    actions: OrderChangeAction[];
    /** The order change's status. */
    status: "canceled" | "requested" | "pending" | "confirmed" | "declined";
    /**
     * requested_by
     * The ID of the user that requested the change.
     */
    requested_by: string;
    /**
     * requested_at
     * The date the order change was requested.
     * @format date-time
     */
    requested_at: string;
    /**
     * confirmed_by
     * The ID of the user that confirmed the order change.
     */
    confirmed_by: string;
    /**
     * confirmed_at
     * The date the order change was confirmed.
     * @format date-time
     */
    confirmed_at: string;
    /**
     * declined_by
     * The ID of the user that declined the order change.
     */
    declined_by: string;
    /**
     * declined_reason
     * The reason the order change was declined.
     */
    declined_reason: string;
    /** The order change's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * declined_at
     * The date the order change was declined.
     * @format date-time
     */
    declined_at: string;
    /**
     * canceled_by
     * The ID of the user that canceled the order change.
     */
    canceled_by: string;
    /**
     * canceled_at
     * The date the order change was canceled.
     * @format date-time
     */
    canceled_at: string;
    /**
     * created_at
     * The date the order change was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order change was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order change action's details. */
export interface OrderChangeAction {
    /**
     * id
     * The action's ID.
     */
    id: string;
    /**
     * order_change_id
     * The ID of the order change that the action belongs to.
     */
    order_change_id: string;
    order_change: object;
    /**
     * order_id
     * The ID of the order the associated change is for.
     */
    order_id: string;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id: string;
    /**
     * claim_id
     * The ID of the associated claim.
     */
    claim_id: string;
    /**
     * exchange_id
     * The ID of the associated exchange.
     */
    exchange_id: string;
    /** The order change's order. */
    order: Order;
    /**
     * reference
     * The name of the table this action applies on.
     */
    reference: "claim" | "exchange" | "return" | "order_shipping_method";
    /**
     * reference_id
     * The ID of the record in the referenced table.
     */
    reference_id: string;
    /** The applied action. */
    action: "CANCEL_RETURN_ITEM" | "FULFILL_ITEM" | "DELIVER_ITEM" | "CANCEL_ITEM_FULFILLMENT" | "ITEM_ADD" | "ITEM_REMOVE" | "ITEM_UPDATE" | "RECEIVE_DAMAGED_RETURN_ITEM" | "RECEIVE_RETURN_ITEM" | "RETURN_ITEM" | "SHIPPING_ADD" | "SHIPPING_REMOVE" | "SHIP_ITEM" | "WRITE_OFF_ITEM" | "REINSTATE_ITEM";
    /**
     * The action's details.
     * @example {"reference_id":123,"quantity":1}
     */
    details: object;
    /**
     * internal_note
     * A note that's viewed only by admin users.
     */
    internal_note: string;
    /**
     * created_at
     * The date the action was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the action was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order change's claim. */
export interface OrderClaim {
    /**
     * id
     * The claim's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order associated with the claim.
     */
    order_id: string;
    /** The order items targetted by the claim. */
    claim_items: BaseClaimItem[];
    /** The outbound or new items of the claim. */
    additional_items: BaseClaimItem[];
    return?: object;
    /**
     * return_id
     * The ID of the associated return.
     */
    return_id?: string;
    /**
     * no_notification
     * Whether the customer should be notified about changes in the claim.
     */
    no_notification?: boolean;
    /**
     * refund_amount
     * The amount to be refunded.
     */
    refund_amount?: number;
    /**
     * display_id
     * The claim's display ID.
     */
    display_id: number;
    /** The claim's shipping methods. */
    shipping_methods?: OrderShippingMethod[];
    /** The claim's transactions. */
    transactions?: OrderTransaction[];
    /** The claim's metadata, used to store custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The claim's creation date.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The claim's update date.
     * @format date-time
     */
    updated_at?: string;
    /** The claim's type. */
    type: "replace" | "refund";
    /** The order change's order. */
    order?: Order;
    /**
     * order_version
     * The claim's order version.
     */
    order_version: number;
    /** The claim's raw refund amount. */
    raw_refund_amount?: string | number;
    /**
     * created_by
     * The ID of the user that created the claim.
     */
    created_by?: string;
    /**
     * deleted_at
     * The date the claim was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * canceled_at
     * The date the claim was canceled.
     * @format date-time
     */
    canceled_at?: string;
}
/** The credit line's details. */
export interface OrderCreditLine {
    /**
     * id
     * The credit line's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    order: object;
    /**
     * reference
     * The table that this credit line references. For example, `payment_collection`.
     */
    reference: string;
    /**
     * reference_id
     * The ID of the record in the referenced table. For example, `paycol_123`.
     */
    reference_id: string;
    /** The credit line's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the credit line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the credit line was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * amount
     * The credit line's amount.
     */
    amount: number;
}
/** The order change's exchange. */
export interface OrderExchange {
    /**
     * order_id
     * The ID of the order the exchange is created for.
     */
    order_id: string;
    /** The new items (outbound) sent by the exchange. */
    additional_items: BaseExchangeItem[];
    /**
     * no_notification
     * Whether to send the customer notifications when the exchange is updated.
     */
    no_notification?: boolean;
    /**
     * difference_due
     * The amount to be exchanged or refunded. If the amount is negative, it must be refunded. If positive, additional payment is required from the customer.
     */
    difference_due?: number;
    /** The return's details. */
    return?: Return;
    /**
     * return_id
     * The ID of the associated exchange.
     */
    return_id?: string;
    /**
     * id
     * The exchange's ID.
     */
    id: string;
    /**
     * display_id
     * The exchange's display ID.
     */
    display_id: number;
    /** The shipping methods used to send the new (outbound) items. */
    shipping_methods?: OrderShippingMethod[];
    /** The exchange's transactions. */
    transactions?: OrderTransaction[];
    /** The exchange's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date that the exchange was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date that the exchange was updated.
     * @format date-time
     */
    updated_at?: string;
    /** The order change's order. */
    order?: Order;
    /**
     * order_version
     * The version of the order when the exchange is applied.
     */
    order_version: number;
    /** The exchange's raw difference due. */
    raw_difference_due?: string | number;
    /**
     * allow_backorder
     * Whether variants that are out of stock can be added to the exchange as outbound items.
     */
    allow_backorder?: boolean;
    /**
     * created_by
     * The ID of the user that created the exchange.
     */
    created_by?: string;
    /**
     * deleted_at
     * The date the exchange was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * canceled_at
     * The date the exchange was canceled.
     * @format date-time
     */
    canceled_at?: string;
}
/** The order item's detail. */
export interface OrderItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * item_id
     * The ID of the associated line item.
     */
    item_id: string;
    item: object;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /**
     * fulfilled_quantity
     * The item's fulfilled quantity.
     */
    fulfilled_quantity: number;
    /**
     * delivered_quantity
     * The item's delivered quantity.
     */
    delivered_quantity: number;
    /**
     * shipped_quantity
     * The item's shipped quantity.
     */
    shipped_quantity: number;
    /**
     * return_requested_quantity
     * The item's quantity that's requested to be returned.
     */
    return_requested_quantity: number;
    /**
     * return_received_quantity
     * The item's quantity that's received through a return.
     */
    return_received_quantity: number;
    /**
     * return_dismissed_quantity
     * The item's quantity that's returned but dismissed because it's damaged.
     */
    return_dismissed_quantity: number;
    /**
     * written_off_quantity
     * The item's quantity that's removed due to an order change.
     */
    written_off_quantity: number;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The order line item's details. */
export interface OrderLineItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle?: string;
    /**
     * thumbnail
     * The item's thumbnail URL.
     */
    thumbnail?: string;
    /**
     * variant_id
     * The ID of the associated variant.
     */
    variant_id?: string;
    /**
     * product_id
     * The ID of the associated product.
     */
    product_id?: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title?: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description?: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle?: string;
    /**
     * product_type
     * The ID of the associated product's type.
     */
    product_type?: string;
    /**
     * product_collection
     * The ID of the associated product's collection.
     */
    product_collection?: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle?: string;
    /**
     * variant_sku
     * The item's variant SKU.
     */
    variant_sku?: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode?: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title?: string;
    /**
     * The associated variant's values for the associated product's options.
     * @example {"Color":"Red"}
     */
    variant_option_values?: object;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping: boolean;
    /**
     * is_discountable
     * Whether the item is discountable.
     */
    is_discountable: boolean;
    /**
     * is_tax_inclusive
     * Whether the item's price includes taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The item's price for a single quantity.
     */
    unit_price: number;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's tax lines. */
    tax_lines?: OrderLineItemTaxLine[];
    /** The item's adjustments. */
    adjustments?: OrderLineItemAdjustment[];
    /** The order item's detail. */
    detail: OrderItem;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * original_total
     * The item's total including taxes and promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The item's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the item excluding promotions.
     */
    original_tax_total: number;
    /**
     * item_total
     * The item's total for a single quantity, including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The item's total for a single quantity, excluding taxes and including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The total taxes of a single quantity of the item, including promotions.
     */
    item_tax_total: number;
    /**
     * total
     * The item's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The total taxes of the item, including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The item's discount total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * refundable_total
     * The total amount of the item that can be refunded.
     */
    refundable_total: number;
    /**
     * refundable_total_per_unit
     * The total amount that can be refunded of a single quantity of the item.
     */
    refundable_total_per_unit: number;
    /**
     * product_type_id
     * The ID of the associated product's type.
     */
    product_type_id?: string;
}
/** The line item adjustment's details. */
export interface OrderLineItemAdjustment {
    item: object;
    /**
     * item_id
     * The ID of the item this adjustment is for.
     */
    item_id: string;
    /**
     * id
     * The adjustment's ID.
     */
    id: string;
    /**
     * code
     * The adjustment's code.
     */
    code?: string;
    /**
     * amount
     * The adjustment's amount.
     */
    amount: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    /**
     * description
     * The adjustment's description.
     */
    description?: string;
    /**
     * promotion_id
     * The ID of the promotion applied by this adjustment.
     */
    promotion_id?: string;
    /**
     * provider_id
     * The adjustment's provider ID.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the adjustment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the adjustment was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The line item tax line's details. */
export interface OrderLineItemTaxLine {
    item: object;
    /**
     * item_id
     * The ID of the line item that the tax line belongs to.
     */
    item_id: string;
    /**
     * total
     * The item's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * id
     * The tax line's ID.
     */
    id: string;
    /**
     * description
     * The tax line's description.
     */
    description?: string;
    /**
     * tax_rate_id
     * The ID of the applied tax rate.
     */
    tax_rate_id?: string;
    /**
     * code
     * The code that the tax rate is identified by.
     */
    code: string;
    /**
     * rate
     * The rate to charge.
     */
    rate: number;
    /**
     * provider_id
     * The ID of the tax provider used to calculate the tax lines.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the tax line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax line was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The item's items. */
export interface OrderReturnItem {
    /**
     * id
     * The return item's ID.
     */
    id: string;
    /**
     * quantity
     * The return item's quantity.
     */
    quantity: number;
    /**
     * received_quantity
     * The received quantity of the item. This quantity is added to the stocked inventory quantity of the item.
     */
    received_quantity?: number;
    /**
     * reason_id
     * The ID of the return reason associated with the item.
     */
    reason_id?: string;
    /**
     * item_id
     * The ID of the associated order item.
     */
    item_id: string;
    /**
     * return_id
     * The ID of the return this return item belongs to.
     */
    return_id: string;
    /** The return item's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * order_id
     * The ID of the order the return belongs to.
     */
    order_id: string;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * damaged_quantity
     * The item's damaged quantity.
     */
    damaged_quantity?: number;
}
/** The shipping method's details. */
export interface OrderShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order that the shipping method belongs to.
     */
    order_id: string;
    /**
     * name
     * The shipping method's name.
     */
    name: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount includes taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id?: string;
    /** The shipping method's data, useful for the fulfillment provider handling the fulfillment. */
    data?: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The shipping method's tax lines. */
    tax_lines?: OrderShippingMethodTaxLine[];
    /** The shipping method's adjustments. */
    adjustments?: OrderShippingMethodAdjustment[];
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The shipping method's subtotal excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the shipping method excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The total taxes of the shipping method, including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The shipping method's discount total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes of the discount amount.
     */
    discount_tax_total: number;
}
/** The shipping method adjustment's details. */
export interface OrderShippingMethodAdjustment {
    shipping_method: object;
    /**
     * shipping_method_id
     * The ID of the shipping method this adjustment is for.
     */
    shipping_method_id: string;
    /**
     * id
     * The adjustment's ID.
     */
    id: string;
    /**
     * code
     * The adjustment's code.
     */
    code?: string;
    /**
     * amount
     * The adjustment's amount.
     */
    amount: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    /**
     * description
     * The adjustment's description.
     */
    description?: string;
    /**
     * promotion_id
     * The ID of the promotion this adjustment applies.
     */
    promotion_id?: string;
    /**
     * provider_id
     * The adjustment's provider ID.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the adjustment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the adjustment was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The shipping method tax line's details. */
export interface OrderShippingMethodTaxLine {
    shipping_method: object;
    /**
     * shipping_method_id
     * The ID of the shipping method that this tax line is for.
     */
    shipping_method_id: string;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * id
     * The tax line's ID.
     */
    id: string;
    /**
     * description
     * The tax line's description.
     */
    description?: string;
    /**
     * tax_rate_id
     * The ID of the applied tax rate.
     */
    tax_rate_id?: string;
    /**
     * code
     * The code that the tax rate is identified by.
     */
    code: string;
    /**
     * rate
     * The rate to charge.
     */
    rate: number;
    /**
     * provider_id
     * The ID of the tax provider used to calculate taxes.
     */
    provider_id?: string;
    /**
     * created_at
     * The date the tax line was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tax line was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The transaction's details. */
export interface OrderTransaction {
    /**
     * id
     * The transaction's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order this transaction belongs to.
     */
    order_id: string;
    /**
     * amount
     * The transaction's amount.
     */
    amount: number;
    /**
     * currency_code
     * The transaction's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * reference
     * The name of a table that this transaction references. If this transaction is for captured payment, its value is `capture`. If this transaction is for refunded payment, its value is `refund`.
     */
    reference: "capture" | "refund";
    /**
     * reference_id
     * The ID of the referenced record in the referenced table.
     */
    reference_id: string;
    /** The transaction's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date that the transaction was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date that the transaction was updated.
     * @format date-time
     */
    updated_at: string;
    order: object;
    /**
     * version
     * The order version that the transaction belongs to.
     */
    version: number;
}
/** The refund reason's details. */
export interface RefundReason {
    /**
     * id
     * The refund reason's ID.
     */
    id: string;
    /**
     * label
     * The refund reason's label.
     */
    label: string;
    /**
     * description
     * The refund reason's description.
     */
    description?: string;
    /** The refund reason's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the refund reason was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the refund reason was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The refund reason's details. */
export interface RefundReasonResponse {
    /** The refund reason's details. */
    refund_reason: AdminRefundReason;
}
/** The return's details. */
export interface Return {
    /**
     * id
     * The return's ID.
     */
    id: string;
    /** The return's status. */
    status: "canceled" | "requested" | "received" | "partially_received";
    /**
     * refund_amount
     * The amount refunded by this return.
     */
    refund_amount?: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id: string;
    /** The return's items. */
    items: OrderReturnItem[];
    /** The return's shipping methods. */
    shipping_methods?: OrderShippingMethod[];
    /** The return's transactions. */
    transactions?: OrderTransaction[];
    /** The return's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the return was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the return was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * canceled_at
     * The date the return was canceled.
     * @format date-time
     */
    canceled_at?: string;
    /** The return order's raw refund amount. */
    raw_refund_amount?: string | number;
    /** The order change's order. */
    order?: Order;
    /**
     * exchange_id
     * The ID of the exchange this return belongs to, if any.
     */
    exchange_id?: string;
    exchange?: object;
    /**
     * claim_id
     * The ID of the claim this return belongs to, if any.
     */
    claim_id?: string;
    /** The order change's claim. */
    claim?: OrderClaim;
    /**
     * display_id
     * The return order's display ID.
     */
    display_id: number;
    /**
     * location_id
     * The ID of the stock location the items are returned to.
     */
    location_id?: string;
    /**
     * no_notification
     * Whether to notify the customer about changes in the return.
     */
    no_notification?: boolean;
    /**
     * created_by
     * The ID of the user that created the return.
     */
    created_by?: string;
    /**
     * deleted_at
     * The date the return was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * requested_at
     * The date the return was requested.
     * @format date-time
     */
    requested_at?: string;
    /**
     * received_at
     * The date the return was received.
     * @format date-time
     */
    received_at?: string;
}
/** The details of accepting the order transfer. */
export interface StoreAcceptOrderTransfer {
    /**
     * token
     * The order transfer's token issued when the transfer was requested.
     */
    token: string;
}
/** The details of the line item to add. */
export interface StoreAddCartLineItem {
    /**
     * variant_id
     * The ID of the product variant to add to the cart.
     */
    variant_id: string;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The shipping option's calculated price. */
export interface StoreCalculatedPrice {
    /**
     * id
     * The ID of the price set from which the price was selected.
     */
    id: string;
    /**
     * is_calculated_price_price_list
     * Whether the calculated price belongs to a price list.
     */
    is_calculated_price_price_list?: boolean;
    /**
     * is_calculated_price_tax_inclusive
     * Whether the calculated price is tax inclusive.
     */
    is_calculated_price_tax_inclusive?: boolean;
    /**
     * calculated_amount
     * The amount of the calculated price, or `null` if there isn't a calculated price. This is the amount shown to the customer.
     */
    calculated_amount: number;
    /**
     * calculated_amount_with_tax
     * The `calculated_amount` with taxes applied.
     */
    calculated_amount_with_tax?: number;
    /**
     * calculated_amount_without_tax
     * The `calculated_amount` without taxes applied.
     */
    calculated_amount_without_tax?: number;
    /**
     * is_original_price_price_list
     * Whether the original price belongs to a price list.
     */
    is_original_price_price_list?: boolean;
    /**
     * is_original_price_tax_inclusive
     * Whether the original price is tax inclusive.
     */
    is_original_price_tax_inclusive?: boolean;
    /**
     * original_amount
     * The amount of the original price, or `null` if there isn't an original price. This amount is useful to compare with the `calculated_amount`, such as to check for discounted value.
     */
    original_amount: number;
    /**
     * currency_code
     * The currency code of the calculated price, or `null` if there isn't a calculated price.
     */
    currency_code: string;
    /** The calculated price's details. */
    calculated_price?: {
        /**
         * id
         * The ID of the price.
         */
        id: string;
        /**
         * price_list_id
         * The ID of the associated price list.
         */
        price_list_id: string;
        /**
         * price_list_type
         * The price list's type. For example, `sale` or `override`.
         */
        price_list_type: string;
        /**
         * min_quantity
         * The minimum quantity required in the cart for the price to apply.
         */
        min_quantity: number;
        /**
         * max_quantity
         * The maximum quantity required in the cart for the price to apply.
         */
        max_quantity: number;
    };
    /** The origin price's details. */
    original_price?: {
        /**
         * id
         * The ID of the price.
         */
        id: string;
        /**
         * price_list_id
         * The ID of the associated price list.
         */
        price_list_id: string;
        /**
         * price_list_type
         * The price list's type. For example, `sale` or `override`.
         */
        price_list_type: string;
        /**
         * min_quantity
         * The minimum quantity required in the cart for the price to apply.
         */
        min_quantity: number;
        /**
         * max_quantity
         * The maximum quantity required in the cart for the price to apply.
         */
        max_quantity: number;
    };
    /**
     * original_amount_with_tax
     * The original amount with taxes applied.
     */
    original_amount_with_tax: number;
    /**
     * original_amount_without_tax
     * The original amount without taxes.
     */
    original_amount_without_tax: number;
}
/** The cart's details. */
export interface StoreCart {
    /**
     * id
     * The cart's ID.
     */
    id: string;
    /** The region's details. */
    region?: StoreRegion;
    /**
     * region_id
     * The ID of the region the cart belongs to.
     */
    region_id?: string;
    /**
     * customer_id
     * The ID of the customer the cart belongs to.
     */
    customer_id?: string;
    /**
     * sales_channel_id
     * The ID of the cart's sales channel. Only products that belong to the same sales channel can be added to the cart. The created order will be associated with the same sales channel.
     */
    sales_channel_id?: string;
    /**
     * email
     * The email of the customer the cart belongs to.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The cart's currency code.
     * @example "usd"
     */
    currency_code: string;
    /** The address's details. */
    shipping_address?: StoreCartAddress;
    /** The address's details. */
    billing_address?: StoreCartAddress;
    /** The cart's items. */
    items?: StoreCartLineItem[];
    /** The cart's shipping methods. */
    shipping_methods?: StoreCartShippingMethod[];
    /** The payment collection's details. */
    payment_collection?: StorePaymentCollection;
    /** The cart's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the cart was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the cart was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * original_item_total
     * The cart items' total including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The cart items' total excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The cart items' tax total excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The cart items' total including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The cart items' total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The cart items' tax total including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The cart's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The cart's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The cart's tax total excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The cart's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The cart's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The cart's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The cart's discount total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The tax total applied on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The total gift card amount applied on the cart.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The total taxes applied on the gift card amount.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The cart's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The cart's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The total taxes applied on the cart's shipping amount.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The cart's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The cart's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The total taxes applied on the cart's shipping amount.
     */
    original_shipping_tax_total: number;
    /** The cart's promotions. */
    promotions: StoreCartPromotion[];
}
/** The promotion's details. */
export interface StoreCartAddPromotion {
    /** Promotion codes to add to the cart. */
    promo_codes: string[];
}
/** The address's details. */
export interface StoreCartAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * customer_id
     * The ID of the customer the address belongs to.
     */
    customer_id?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The item's details. */
export interface StoreCartLineItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle?: string;
    /**
     * thumbnail
     * The item's thumbnail URL.
     */
    thumbnail?: string;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The product's details. */
    product?: StoreProduct;
    /**
     * product_id
     * The ID of the associated product.
     */
    product_id?: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title?: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description?: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle?: string;
    /**
     * product_type
     * The ID of the associated product's type.
     */
    product_type?: string;
    /**
     * product_collection
     * The ID of the associated product's collection.
     */
    product_collection?: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle?: string;
    /** The variant's details. */
    variant?: StoreProductVariant;
    /**
     * variant_id
     * The ID of the associated product variant.
     */
    variant_id?: string;
    /**
     * variant_sku
     * The item's variant SKU.
     */
    variant_sku?: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode?: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title?: string;
    /**
     * The associated variant's value for the product's options.
     * @example {"Color":"Red"}
     */
    variant_option_values?: object;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping: boolean;
    /**
     * is_discountable
     * Whether the item is discountable.
     */
    is_discountable: boolean;
    /**
     * is_tax_inclusive
     * Whether the item's price includes taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The price of a single quantity of the item.
     */
    unit_price: number;
    /** The item's tax lines. */
    tax_lines?: ({
        /**
         * item
         * The details of the item that the tax line belongs to.
         */
        item: object;
        /**
         * item_id
         * The ID of the line item this tax line belongs to.
         */
        item_id: string;
        /**
         * total
         * The item's total including taxes and promotions.
         */
        total: number;
        /**
         * subtotal
         * The item's total excluding taxes, including promotions.
         */
        subtotal: number;
        /**
         * id
         * The tax line's ID.
         */
        id: string;
        /**
         * description
         * The tax line's description.
         */
        description?: string;
        /**
         * tax_rate_id
         * The ID of the applied tax rate.
         */
        tax_rate_id?: string;
        /**
         * code
         * The code that the tax rate is identified by.
         */
        code: string;
        /**
         * rate
         * The charged rate.
         */
        rate: number;
        /**
         * provider_id
         * The ID of the tax provider used to calculate the tax line.
         */
        provider_id?: string;
        /**
         * created_at
         * The date the tax line was created.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The date the tax line was updated.
         * @format date-time
         */
        updated_at: string;
    } & {
        /**
         * item
         * The details of the item that the tax line belongs to.
         */
        item: object;
    })[];
    /** The item's adjustments. */
    adjustments?: ({
        /**
         * item
         * The details of the item that the adjustment belongs to.
         */
        item: object;
        /**
         * item_id
         * The ID of the item that the adjustment belongs to.
         */
        item_id: string;
        /**
         * id
         * The adjustment's ID.
         */
        id: string;
        /**
         * code
         * The adjustment's code.
         */
        code?: string;
        /**
         * amount
         * The adjustment's amount.
         */
        amount: number;
        /**
         * cart_id
         * The ID of the associated cart.
         */
        cart_id: string;
        /**
         * description
         * The adjustment's description.
         */
        description?: string;
        /**
         * promotion_id
         * The ID of the applied promotion.
         */
        promotion_id?: string;
        /**
         * provider_id
         * The adjustment's provider ID.
         */
        provider_id?: string;
        /**
         * created_at
         * The date the adjustment was created.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The date the adjustment was updated.
         * @format date-time
         */
        updated_at: string;
    } & {
        /**
         * item
         * The details of the item that the adjustment belongs to.
         */
        item: object;
    })[];
    cart: object;
    /**
     * cart_id
     * The ID of the cart that the line item belongs to.
     */
    cart_id: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the item was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * original_total
     * The item's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The item's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the item excluding promotions.
     */
    original_tax_total: number;
    /**
     * original_tax_total
     * The item's total including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The item's total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The total taxes of the item including promotions.
     */
    item_tax_total: number;
    /**
     * total
     * The item's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The total taxes of the item including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discount of the item.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total: number;
}
/** The promotion's promotions. */
export interface StoreCartPromotion {
    /**
     * id
     * The promotion's ID.
     */
    id: string;
    /**
     * code
     * The promotion's code.
     */
    code?: string;
    /**
     * is_automatic
     * The promotion's is automatic.
     */
    is_automatic?: boolean;
    /** The promotion's application method. */
    application_method?: {
        /**
         * value
         * The application method's value.
         */
        value: string;
        /** The application method's type. */
        type: "fixed" | "percentage";
        /**
         * currency_code
         * The application method's currency code.
         */
        currency_code: string;
    };
}
/** The cart's details. */
export interface StoreCartResponse {
    /** The cart's details. */
    cart: StoreCart;
}
/** A cart's shipping method. */
export interface StoreCartShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id: string;
    /**
     * cart_id
     * The ID of the cart this shipping method belongs to.
     */
    cart_id: string;
    /**
     * name
     * The shipping method's name.
     */
    name: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount is tax inclusive.
     */
    is_tax_inclusive: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id?: string;
    /** The shipping method's data, useful for fulfillment handling by third-party services. */
    data?: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The shipping method's tax lines. */
    tax_lines?: ({
        /**
         * shipping_method
         * The details of the method that the tax line belongs to.
         */
        shipping_method: object;
        /**
         * shipping_method_id
         * The ID of the shipping method this tax line belongs to.
         */
        shipping_method_id: string;
        /**
         * total
         * The method's total including taxes and promotions.
         */
        total: number;
        /**
         * subtotal
         * The method's total excluding taxes, including promotions.
         */
        subtotal: number;
        /**
         * id
         * The tax line's ID.
         */
        id: string;
        /**
         * description
         * The tax line's description.
         */
        description?: string;
        /**
         * tax_rate_id
         * The ID of the applied tax rate.
         */
        tax_rate_id?: string;
        /**
         * code
         * The code that the tax rate is identified by.
         */
        code: string;
        /**
         * rate
         * The charged rate.
         */
        rate: number;
        /**
         * provider_id
         * The ID of the tax provider used to calculate the tax line.
         */
        provider_id?: string;
        /**
         * created_at
         * The date the tax line was created.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The date the tax line was updated.
         * @format date-time
         */
        updated_at: string;
    } & {
        /**
         * shipping_method
         * The details of the method that the tax line belongs to.
         */
        shipping_method: object;
    })[];
    /** The shipping method's adjustments, such as applied promotions. */
    adjustments?: ({
        /**
         * shipping_method
         * The details of the method that the adjustment belongs to.
         */
        shipping_method: object;
        /**
         * id
         * The adjustment's ID.
         */
        id: string;
        /**
         * code
         * The adjustment's code.
         */
        code?: string;
        /**
         * amount
         * The adjustment's amount.
         */
        amount: number;
        /**
         * cart_id
         * The ID of the associated cart.
         */
        cart_id: string;
        /**
         * description
         * The adjustment's description.
         */
        description?: string;
        /**
         * promotion_id
         * The ID of the applied promotion.
         */
        promotion_id?: string;
        /**
         * provider_id
         * The adjustment's provider ID.
         */
        provider_id?: string;
        /**
         * created_at
         * The date the adjustment was created.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The date the adjustment was updated.
         * @format date-time
         */
        updated_at: string;
    } & {
        /**
         * shipping_method
         * The details of the method that the adjustment belongs to.
         */
        shipping_method: object;
    })[];
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes applied on the shipping method's amount including promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The shipping method's total amount including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total amount excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The total taxes applied on the shipping method's amount including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total amount discounted.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The taxes applied on the discounted amount.
     */
    discount_tax_total: number;
}
/** The shipping option's details. */
export interface StoreCartShippingOption {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * name
     * The shipping option's name.
     */
    name: string;
    /** The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider. */
    price_type: "flat" | "calculated";
    /**
     * service_zone_id
     * The ID of the service zone the shipping option belongs to.
     */
    service_zone_id: string;
    /**
     * provider_id
     * The ID of the fulfillment provider handling this option.
     */
    provider_id: string;
    /** The fulfillment provider's details. */
    provider: {
        /**
         * id
         * The provider's ID.
         */
        id: string;
        /**
         * is_enabled
         * Whether the provider is enabled.
         */
        is_enabled: boolean;
    };
    /** The shipping option type's details. */
    type: {
        /**
         * id
         * The type's ID.
         */
        id: string;
        /**
         * label
         * The type's label.
         */
        label: string;
        /**
         * description
         * The type's description.
         */
        description: string;
        /**
         * code
         * The type's code.
         */
        code: string;
    };
    /**
     * shipping_profile_id
     * The ID of the associated shipping profile.
     */
    shipping_profile_id: string;
    /**
     * amount
     * The shipping option's amount.
     */
    amount: number;
    /** The shipping option's data, useful for the provider handling fulfillment. */
    data: object;
    /** The shipping option's prices. */
    prices: StorePrice[];
    /** The shipping option's calculated price. */
    calculated_price: StoreCalculatedPrice;
    /**
     * insufficient_inventory
     * Whether the shipping option's location doesn't have sufficient quantity for any of the cart's items.
     */
    insufficient_inventory: boolean;
}
/** The collection's details. */
export interface StoreCollection {
    /**
     * id
     * The collection's ID.
     */
    id: string;
    /**
     * title
     * The collection's title.
     */
    title: string;
    /**
     * handle
     * The collection's handle.
     */
    handle: string;
    /**
     * created_at
     * The date the collection was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the collection was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the collection was deleted.
     * @format date-time
     */
    deleted_at: string;
    /** The collection's products. */
    products?: object[];
    /** The collection's metadata, can hold custom key-value pairs. */
    metadata: object;
}
/** The collection's details. */
export interface StoreCollectionResponse {
    /** The collection's details. */
    collection: StoreCollection;
}
/** The details of the cart to be created. */
export interface StoreCreateCart {
    /**
     * region_id
     * The ID of the cart's region. This affects the prices and currency of the cart.
     */
    region_id?: string;
    /** The address's details. */
    shipping_address?: StoreCartAddress;
    /** The address's details. */
    billing_address?: StoreCartAddress;
    /**
     * email
     * The email of the cart's customer.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The cart's currency code. If not provided, the region's currency is used. This affects prices in the cart, as well.
     * @example "usd"
     */
    currency_code?: string;
    /** The cart's items. */
    items?: StoreCartLineItem[];
    /**
     * sales_channel_id
     * The ID of the sales channel that cart is created in. Only products available in that sales channel can be added to the cart. If not provided, the store's default sales channel is associated with the cart instead.
     */
    sales_channel_id?: string;
    /** The cart's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of the customer to create. */
export interface StoreCreateCustomer {
    /**
     * email
     * The customer's email.
     * @format email
     */
    email: string;
    /**
     * company_name
     * The customer's company name.
     */
    company_name?: string;
    /**
     * first_name
     * The customer's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The customer's last name.
     */
    last_name?: string;
    /**
     * phone
     * The customer's phone.
     */
    phone?: string;
    /** The customer's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details of the payment collection to create. */
export interface StoreCreatePaymentCollection {
    /**
     * cart_id
     * The ID of the cart this payment collection is for.
     */
    cart_id: string;
}
/** The details of the return to create. */
export interface StoreCreateReturn {
    /**
     * order_id
     * The ID of the order this return is created for.
     */
    order_id: string;
    /** The return's items. */
    items: StoreCreateReturnItem[];
    /** The return's shipping details. */
    return_shipping: StoreCreateReturnShipping;
    /**
     * note
     * A note with more details about the return.
     */
    note?: string;
    /**
     * receive_now
     * Whether to mark the return as received.
     */
    receive_now?: boolean;
    /**
     * location_id
     * The ID of the location that items are returned to.
     */
    location_id?: string;
}
/** The details of the line item to create. */
export interface StoreCreateReturnItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /**
     * reason_id
     * The ID of the associated return reason.
     */
    reason_id?: string;
    /**
     * note
     * A note with more details about the returned item.
     */
    note?: string;
}
/** The return's shipping details. */
export interface StoreCreateReturnShipping {
    /**
     * option_id
     * The ID of the shipping option to use.
     */
    option_id: string;
    /**
     * price
     * The shipping's price.
     */
    price?: number;
}
/** The currency's details. */
export interface StoreCurrency {
    /**
     * code
     * The currency's code.
     * @example "usd"
     */
    code: string;
    /**
     * symbol
     * The currency's symbol.
     */
    symbol: string;
    /**
     * symbol_native
     * The currency's symbol native.
     */
    symbol_native: string;
    /**
     * name
     * The currency's name.
     */
    name: string;
    /**
     * decimal_digits
     * The currency's decimal digits.
     */
    decimal_digits: number;
    /**
     * rounding
     * The currency's rounding.
     */
    rounding: number;
    /**
     * created_at
     * The date the currency was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the currency was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the currency was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The paginated list of currencies. */
export interface StoreCurrencyListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total count of items.
     */
    count: number;
    /** The list of currencies. */
    currencies: StoreCurrency[];
}
/** The currency's details. */
export interface StoreCurrencyResponse {
    /** The currency's details. */
    currency: StoreCurrency;
}
/** The customer's details. */
export interface StoreCustomer {
    /**
     * id
     * The customer's ID.
     */
    id: string;
    /**
     * email
     * The customer's email.
     * @format email
     */
    email: string;
    /**
     * default_billing_address_id
     * The ID of the address used for billing by default.
     */
    default_billing_address_id: string;
    /**
     * default_shipping_address_id
     * The ID of the address used for shipping by default.
     */
    default_shipping_address_id: string;
    /**
     * company_name
     * The customer's company name.
     */
    company_name: string;
    /**
     * first_name
     * The customer's first name.
     */
    first_name: string;
    /**
     * last_name
     * The customer's last name.
     */
    last_name: string;
    /** The customer's addresses. */
    addresses: StoreCustomerAddress[];
    /**
     * phone
     * The customer's phone.
     */
    phone?: string;
    /** The customer's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the customer was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the customer was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the customer was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The customer address's details */
export interface StoreCustomerAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * address_name
     * The address's name.
     */
    address_name: string;
    /**
     * is_default_shipping
     * Whether the address is used for shipping by default.
     */
    is_default_shipping: boolean;
    /**
     * is_default_billing
     * Whether the address is used for billing by default.
     */
    is_default_billing: boolean;
    /**
     * customer_id
     * The ID of the customer the address belongs to.
     */
    customer_id: string;
    /**
     * company
     * The address's company.
     */
    company: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2: string;
    /**
     * city
     * The address's city.
     */
    city: string;
    /**
     * country_code
     * The address's country code.
     * @example "usd"
     */
    country_code: string;
    /**
     * province
     * The address's province.
     */
    province: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code: string;
    /**
     * phone
     * The address's phone.
     */
    phone: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The paginated list of customer addresses. */
export interface StoreCustomerAddressListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of addresses. */
    addresses: StoreCustomerAddress[];
}
/** The address's details. */
export interface StoreCustomerAddressResponse {
    /** The customer address's details */
    address: StoreCustomerAddress;
}
/** The customer's details. */
export interface StoreCustomerResponse {
    /** The customer's details. */
    customer: StoreCustomer;
}
/** The details of declining the order transfer request. */
export interface StoreDeclineOrderTransferRequest {
    /**
     * token
     * The order transfer's token issued when the transfer was requested.
     */
    token: string;
}
/** The payment session's details. */
export interface StoreInitializePaymentSession {
    /**
     * provider_id
     * The ID of the payment provider the customer chose.
     * @example "pp_stripe_stripe"
     */
    provider_id: string;
    /** Any data necessary for the payment provider to process the payment. */
    data?: object;
}
/** The order's details. */
export interface StoreOrder {
    /**
     * id
     * The order's ID.
     */
    id: string;
    /**
     * region_id
     * The ID of the associated region.
     */
    region_id: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id: string;
    /**
     * sales_channel_id
     * The ID of the sales channel the order was placed in.
     */
    sales_channel_id: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email: string;
    /**
     * currency_code
     * The order's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * display_id
     * The order's display ID.
     */
    display_id?: number;
    /** An order address */
    shipping_address?: StoreOrderAddress;
    /** An order address */
    billing_address?: StoreOrderAddress;
    /** The order's items. */
    items: StoreOrderLineItem[];
    /** The order's shipping methods. */
    shipping_methods: StoreOrderShippingMethod[];
    /** The order's payment collections. */
    payment_collections?: StorePaymentCollection[];
    /** The order's payment status. */
    payment_status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "captured" | "partially_captured" | "partially_refunded" | "refunded" | "requires_action";
    /** The order's fulfillments. */
    fulfillments?: StoreOrderFulfillment[];
    /** The order's fulfillment status. */
    fulfillment_status: "canceled" | "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_delivered" | "delivered";
    /** The order's summary details. */
    summary: BaseOrderSummary;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * original_item_total
     * The order items' total including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * original_item_subtotal
     * The order items' total excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * original_item_tax_total
     * The total taxes applied on the order items, excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * item_total
     * The order items' total including taxes and promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The order items' total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The total taxes applied on the order's items, including promotions.
     */
    item_tax_total: number;
    /**
     * original_total
     * The order's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The order's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the order excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The order's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The tax totals of the order including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The order's discount total.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * gift_card_total
     * The order's gift card total.
     */
    gift_card_total: number;
    /**
     * gift_card_tax_total
     * The total taxes applied on the gift card's amount.
     */
    gift_card_tax_total: number;
    /**
     * shipping_total
     * The order's shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * shipping_tax_total
     * The total taxes of the order's shipping including promotions.
     */
    shipping_tax_total: number;
    /**
     * original_shipping_total
     * The order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * original_shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * original_shipping_tax_total
     * The total taxes of the order's shipping excluding promotions.
     */
    original_shipping_tax_total: number;
    /** The customer's details. */
    customer?: StoreCustomer;
    /** The order's transactions. */
    transactions?: BaseOrderTransaction[];
    /**
     * status
     * The order's status.
     */
    status: string;
}
/** An order address */
export interface StoreOrderAddress {
    /**
     * id
     * The address's ID.
     */
    id: string;
    /**
     * customer_id
     * The ID of the customer this address belongs to.
     */
    customer_id?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /** The country's details. */
    country?: StoreRegionCountry;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The fulfillment's details. */
export interface StoreOrderFulfillment {
    /**
     * id
     * The fulfillment's ID.
     */
    id: string;
    /**
     * location_id
     * The ID of the location the items are fulfilled from.
     */
    location_id: string;
    /**
     * packed_at
     * The date the items were packed.
     * @format date-time
     */
    packed_at: string;
    /**
     * shipped_at
     * The date the items were shipped.
     * @format date-time
     */
    shipped_at: string;
    /**
     * delivered_at
     * The date the items were delivered.
     * @format date-time
     */
    delivered_at: string;
    /**
     * canceled_at
     * The date the items were canceled.
     * @format date-time
     */
    canceled_at: string;
    /** Data useful for the fulfillment provider handling it. This is taken from the associated shipping option. */
    data: object;
    /**
     * provider_id
     * The ID of the fulfillment provider used to handle the fulfillment.
     */
    provider_id: string;
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /** The fulfillment's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the fulfillment was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the fulfillment was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * requires_shipping
     * The fulfillment's requires shipping.
     */
    requires_shipping: boolean;
}
/** The item's details. */
export interface StoreOrderLineItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * title
     * The item's title.
     */
    title: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle: string;
    /**
     * thumbnail
     * The URL of the item's thumbnail.
     */
    thumbnail: string;
    /** The variant's details. */
    variant?: StoreProductVariant;
    /**
     * variant_id
     * The ID of the associated variant.
     */
    variant_id: string;
    /** The product's details. */
    product?: StoreProduct;
    /**
     * product_id
     * The ID of the associated product.
     */
    product_id: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle: string;
    /**
     * product_type
     * The item's product type.
     */
    product_type: string;
    /**
     * product_collection
     * The ID of the collection the item's product belongs to.
     */
    product_collection: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle: string;
    /**
     * variant_sku
     * The item's variant SKU.
     */
    variant_sku: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title: string;
    /**
     * The values of the item variant's options.
     * @example {"Color":"Blue"}
     */
    variant_option_values: object;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping: boolean;
    /**
     * is_discountable
     * Whether the item is discountable.
     */
    is_discountable: boolean;
    /**
     * is_tax_inclusive
     * Whether the item is tax inclusive.
     */
    is_tax_inclusive: boolean;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price: number;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's tax lines. */
    tax_lines?: ({
        /** The tax line's item. */
        item: {
            /**
             * id
             * The item's ID.
             */
            id: string;
            /**
             * title
             * The item's title.
             */
            title: string;
            /**
             * subtitle
             * The item's subtitle.
             */
            subtitle: string;
            /**
             * thumbnail
             * The item's thumbnail.
             */
            thumbnail: string;
            /** The item's variant. */
            variant?: {
                /**
                 * id
                 * The variant's ID.
                 */
                id: string;
                /**
                 * title
                 * The variant's title.
                 */
                title: string;
                /**
                 * sku
                 * The variant's sku.
                 */
                sku: string;
                /**
                 * barcode
                 * The variant's barcode.
                 */
                barcode: string;
                /**
                 * ean
                 * The variant's ean.
                 */
                ean: string;
                /**
                 * upc
                 * The variant's upc.
                 */
                upc: string;
                /**
                 * allow_backorder
                 * The variant's allow backorder.
                 */
                allow_backorder: boolean;
                /**
                 * manage_inventory
                 * The variant's manage inventory.
                 */
                manage_inventory: boolean;
                /**
                 * inventory_quantity
                 * The variant's inventory quantity.
                 */
                inventory_quantity?: number;
                /**
                 * hs_code
                 * The variant's hs code.
                 */
                hs_code: string;
                /**
                 * origin_country
                 * The variant's origin country.
                 */
                origin_country: string;
                /**
                 * mid_code
                 * The variant's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The variant's material.
                 */
                material: string;
                /**
                 * weight
                 * The variant's weight.
                 */
                weight: number;
                /**
                 * length
                 * The variant's length.
                 */
                length: number;
                /**
                 * height
                 * The variant's height.
                 */
                height: number;
                /**
                 * width
                 * The variant's width.
                 */
                width: number;
                /**
                 * variant_rank
                 * The variant's variant rank.
                 */
                variant_rank?: number;
                /** The variant's options. */
                options: object[];
                /** The variant's product. */
                product?: object;
                /**
                 * product_id
                 * The variant's product id.
                 */
                product_id?: string;
                /** The variant's calculated price. */
                calculated_price?: object;
                /**
                 * created_at
                 * The variant's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The variant's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * deleted_at
                 * The variant's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /** The variant's metadata. */
                metadata?: object;
            };
            /**
             * variant_id
             * The item's variant id.
             */
            variant_id: string;
            /** The item's product. */
            product?: {
                /**
                 * id
                 * The product's ID.
                 */
                id: string;
                /**
                 * title
                 * The product's title.
                 */
                title: string;
                /**
                 * handle
                 * The product's handle.
                 */
                handle: string;
                /**
                 * subtitle
                 * The product's subtitle.
                 */
                subtitle: string;
                /**
                 * description
                 * The product's description.
                 */
                description: string;
                /**
                 * is_giftcard
                 * The product's is giftcard.
                 */
                is_giftcard: boolean;
                /** The product's status. */
                status: "draft" | "proposed" | "published" | "rejected";
                /**
                 * thumbnail
                 * The product's thumbnail.
                 */
                thumbnail: string;
                /**
                 * width
                 * The product's width.
                 */
                width: number;
                /**
                 * weight
                 * The product's weight.
                 */
                weight: number;
                /**
                 * length
                 * The product's length.
                 */
                length: number;
                /**
                 * height
                 * The product's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The product's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The product's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The product's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The product's material.
                 */
                material: string;
                /** The product's collection. */
                collection?: object;
                /**
                 * collection_id
                 * The product's collection id.
                 */
                collection_id: string;
                /** The product's categories. */
                categories?: object[];
                /** The product's type. */
                type?: object;
                /**
                 * type_id
                 * The product's type id.
                 */
                type_id: string;
                /** The product's tags. */
                tags?: object[];
                /** The product's variants. */
                variants: object[];
                /** The product's options. */
                options: object[];
                /** The product's images. */
                images: object[];
                /**
                 * discountable
                 * The product's discountable.
                 */
                discountable: boolean;
                /**
                 * external_id
                 * The product's external id.
                 */
                external_id: string;
                /**
                 * created_at
                 * The product's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The product's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * deleted_at
                 * The product's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /** The product's metadata. */
                metadata?: object;
            };
            /**
             * product_id
             * The item's product id.
             */
            product_id: string;
            /**
             * product_title
             * The item's product title.
             */
            product_title: string;
            /**
             * product_description
             * The item's product description.
             */
            product_description: string;
            /**
             * product_subtitle
             * The item's product subtitle.
             */
            product_subtitle: string;
            /**
             * product_type
             * The item's product type.
             */
            product_type: string;
            /**
             * product_collection
             * The item's product collection.
             */
            product_collection: string;
            /**
             * product_handle
             * The item's product handle.
             */
            product_handle: string;
            /**
             * variant_sku
             * The item's variant sku.
             */
            variant_sku: string;
            /**
             * variant_barcode
             * The item's variant barcode.
             */
            variant_barcode: string;
            /**
             * variant_title
             * The item's variant title.
             */
            variant_title: string;
            /** The item's variant option values. */
            variant_option_values: object;
            /**
             * requires_shipping
             * The item's requires shipping.
             */
            requires_shipping: boolean;
            /**
             * is_discountable
             * The item's is discountable.
             */
            is_discountable: boolean;
            /**
             * is_tax_inclusive
             * The item's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * compare_at_unit_price
             * The item's compare at unit price.
             */
            compare_at_unit_price?: number;
            /**
             * unit_price
             * The item's unit price.
             */
            unit_price: number;
            /**
             * quantity
             * The item's quantity.
             */
            quantity: number;
            /** The item's tax lines. */
            tax_lines?: {
                /** The tax line's item. */
                item: object;
                /**
                 * item_id
                 * The tax line's item id.
                 */
                item_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /** The item's adjustments. */
            adjustments?: {
                /** The adjustment's item. */
                item: object;
                /**
                 * item_id
                 * The adjustment's item id.
                 */
                item_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /** The item's detail. */
            detail: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * item_id
                 * The detail's item id.
                 */
                item_id: string;
                /** The detail's item. */
                item: object;
                /**
                 * quantity
                 * The detail's quantity.
                 */
                quantity: number;
                /**
                 * fulfilled_quantity
                 * The detail's fulfilled quantity.
                 */
                fulfilled_quantity: number;
                /**
                 * delivered_quantity
                 * The detail's delivered quantity.
                 */
                delivered_quantity: number;
                /**
                 * shipped_quantity
                 * The detail's shipped quantity.
                 */
                shipped_quantity: number;
                /**
                 * return_requested_quantity
                 * The detail's return requested quantity.
                 */
                return_requested_quantity: number;
                /**
                 * return_received_quantity
                 * The detail's return received quantity.
                 */
                return_received_quantity: number;
                /**
                 * return_dismissed_quantity
                 * The detail's return dismissed quantity.
                 */
                return_dismissed_quantity: number;
                /**
                 * written_off_quantity
                 * The detail's written off quantity.
                 */
                written_off_quantity: number;
                /** The detail's metadata. */
                metadata: object;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            };
            /**
             * created_at
             * The item's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The item's updated at.
             * @format date-time
             */
            updated_at: string;
            /** The item's metadata. */
            metadata: object;
            /**
             * original_total
             * The item's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The item's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The item's original tax total.
             */
            original_tax_total: number;
            /**
             * item_total
             * The item's item total.
             */
            item_total: number;
            /**
             * item_subtotal
             * The item's item subtotal.
             */
            item_subtotal: number;
            /**
             * item_tax_total
             * The item's item tax total.
             */
            item_tax_total: number;
            /**
             * total
             * The item's total.
             */
            total: number;
            /**
             * subtotal
             * The item's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The item's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The item's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The item's discount tax total.
             */
            discount_tax_total: number;
            /**
             * refundable_total
             * The item's refundable total.
             */
            refundable_total: number;
            /**
             * refundable_total_per_unit
             * The item's refundable total per unit.
             */
            refundable_total_per_unit: number;
        };
        /**
         * item_id
         * The tax line's item id.
         */
        item_id: string;
        /**
         * total
         * The tax line's total.
         */
        total: number;
        /**
         * subtotal
         * The tax line's subtotal.
         */
        subtotal: number;
        /**
         * id
         * The tax line's ID.
         */
        id: string;
        /**
         * description
         * The tax line's description.
         */
        description?: string;
        /**
         * tax_rate_id
         * The tax line's tax rate id.
         */
        tax_rate_id?: string;
        /**
         * code
         * The tax line's code.
         */
        code: string;
        /**
         * rate
         * The tax line's rate.
         */
        rate: number;
        /**
         * provider_id
         * The tax line's provider id.
         */
        provider_id?: string;
        /**
         * created_at
         * The tax line's created at.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The tax line's updated at.
         * @format date-time
         */
        updated_at: string;
    } & {
        /** The tax line's item. */
        item: {
            /** The item's variant. */
            variant?: {
                /** The variant's options. */
                options: object[];
                /** The variant's product. */
                product?: object;
                /**
                 * length
                 * The variant's length.
                 */
                length: number;
                /**
                 * title
                 * The variant's title.
                 */
                title: string;
                /**
                 * id
                 * The variant's ID.
                 */
                id: string;
                /** The variant's metadata. */
                metadata?: object;
                /**
                 * created_at
                 * The variant's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The variant's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * product_id
                 * The variant's product id.
                 */
                product_id?: string;
                /**
                 * width
                 * The variant's width.
                 */
                width: number;
                /**
                 * weight
                 * The variant's weight.
                 */
                weight: number;
                /**
                 * height
                 * The variant's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The variant's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The variant's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The variant's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The variant's material.
                 */
                material: string;
                /**
                 * deleted_at
                 * The variant's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /**
                 * sku
                 * The variant's sku.
                 */
                sku: string;
                /**
                 * barcode
                 * The variant's barcode.
                 */
                barcode: string;
                /**
                 * ean
                 * The variant's ean.
                 */
                ean: string;
                /**
                 * upc
                 * The variant's upc.
                 */
                upc: string;
                /**
                 * allow_backorder
                 * The variant's allow backorder.
                 */
                allow_backorder: boolean;
                /**
                 * manage_inventory
                 * The variant's manage inventory.
                 */
                manage_inventory: boolean;
                /**
                 * inventory_quantity
                 * The variant's inventory quantity.
                 */
                inventory_quantity?: number;
                /**
                 * variant_rank
                 * The variant's variant rank.
                 */
                variant_rank?: number;
                /** The variant's calculated price. */
                calculated_price?: object;
            };
            /** The item's product. */
            product?: {
                /** The product's collection. */
                collection?: object;
                /** The product's categories. */
                categories?: object[];
                /** The product's variants. */
                variants: object[];
                /** The product's type. */
                type?: object;
                /** The product's tags. */
                tags?: object[];
                /** The product's options. */
                options: object[];
                /** The product's images. */
                images: object[];
                /**
                 * length
                 * The product's length.
                 */
                length: number;
                /**
                 * title
                 * The product's title.
                 */
                title: string;
                /** The product's status. */
                status: "draft" | "proposed" | "published" | "rejected";
                /**
                 * description
                 * The product's description.
                 */
                description: string;
                /**
                 * id
                 * The product's ID.
                 */
                id: string;
                /** The product's metadata. */
                metadata?: object;
                /**
                 * created_at
                 * The product's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The product's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * subtitle
                 * The product's subtitle.
                 */
                subtitle: string;
                /**
                 * thumbnail
                 * The product's thumbnail.
                 */
                thumbnail: string;
                /**
                 * handle
                 * The product's handle.
                 */
                handle: string;
                /**
                 * is_giftcard
                 * The product's is giftcard.
                 */
                is_giftcard: boolean;
                /**
                 * width
                 * The product's width.
                 */
                width: number;
                /**
                 * weight
                 * The product's weight.
                 */
                weight: number;
                /**
                 * height
                 * The product's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The product's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The product's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The product's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The product's material.
                 */
                material: string;
                /**
                 * collection_id
                 * The product's collection id.
                 */
                collection_id: string;
                /**
                 * type_id
                 * The product's type id.
                 */
                type_id: string;
                /**
                 * discountable
                 * The product's discountable.
                 */
                discountable: boolean;
                /**
                 * external_id
                 * The product's external id.
                 */
                external_id: string;
                /**
                 * deleted_at
                 * The product's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
            };
            /** The item's tax lines. */
            tax_lines?: ({
                /** The tax line's item. */
                item: object;
                /**
                 * item_id
                 * The tax line's item id.
                 */
                item_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The tax line's item. */
                item: object;
            })[];
            /** The item's adjustments. */
            adjustments?: ({
                /** The adjustment's item. */
                item: object;
                /**
                 * item_id
                 * The adjustment's item id.
                 */
                item_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The adjustment's item. */
                item: object;
            })[];
            /** The item's detail. */
            detail: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * item_id
                 * The detail's item id.
                 */
                item_id: string;
                /** The detail's item. */
                item: object;
                /**
                 * quantity
                 * The detail's quantity.
                 */
                quantity: number;
                /**
                 * fulfilled_quantity
                 * The detail's fulfilled quantity.
                 */
                fulfilled_quantity: number;
                /**
                 * delivered_quantity
                 * The detail's delivered quantity.
                 */
                delivered_quantity: number;
                /**
                 * shipped_quantity
                 * The detail's shipped quantity.
                 */
                shipped_quantity: number;
                /**
                 * return_requested_quantity
                 * The detail's return requested quantity.
                 */
                return_requested_quantity: number;
                /**
                 * return_received_quantity
                 * The detail's return received quantity.
                 */
                return_received_quantity: number;
                /**
                 * return_dismissed_quantity
                 * The detail's return dismissed quantity.
                 */
                return_dismissed_quantity: number;
                /**
                 * written_off_quantity
                 * The detail's written off quantity.
                 */
                written_off_quantity: number;
                /** The detail's metadata. */
                metadata: object;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The detail's item. */
                item: object;
            };
            /**
             * title
             * The item's title.
             */
            title: string;
            /**
             * id
             * The item's ID.
             */
            id: string;
            /** The item's metadata. */
            metadata: object;
            /**
             * created_at
             * The item's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The item's updated at.
             * @format date-time
             */
            updated_at: string;
            /**
             * item_total
             * The item's item total.
             */
            item_total: number;
            /**
             * item_subtotal
             * The item's item subtotal.
             */
            item_subtotal: number;
            /**
             * item_tax_total
             * The item's item tax total.
             */
            item_tax_total: number;
            /**
             * original_total
             * The item's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The item's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The item's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The item's total.
             */
            total: number;
            /**
             * subtotal
             * The item's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The item's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The item's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The item's discount tax total.
             */
            discount_tax_total: number;
            /**
             * subtitle
             * The item's subtitle.
             */
            subtitle: string;
            /**
             * thumbnail
             * The item's thumbnail.
             */
            thumbnail: string;
            /**
             * variant_id
             * The item's variant id.
             */
            variant_id: string;
            /**
             * product_id
             * The item's product id.
             */
            product_id: string;
            /**
             * product_title
             * The item's product title.
             */
            product_title: string;
            /**
             * product_description
             * The item's product description.
             */
            product_description: string;
            /**
             * product_subtitle
             * The item's product subtitle.
             */
            product_subtitle: string;
            /**
             * product_type
             * The item's product type.
             */
            product_type: string;
            /**
             * product_collection
             * The item's product collection.
             */
            product_collection: string;
            /**
             * product_handle
             * The item's product handle.
             */
            product_handle: string;
            /**
             * variant_sku
             * The item's variant sku.
             */
            variant_sku: string;
            /**
             * variant_barcode
             * The item's variant barcode.
             */
            variant_barcode: string;
            /**
             * variant_title
             * The item's variant title.
             */
            variant_title: string;
            /** The item's variant option values. */
            variant_option_values: object;
            /**
             * requires_shipping
             * The item's requires shipping.
             */
            requires_shipping: boolean;
            /**
             * is_discountable
             * The item's is discountable.
             */
            is_discountable: boolean;
            /**
             * is_tax_inclusive
             * The item's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * compare_at_unit_price
             * The item's compare at unit price.
             */
            compare_at_unit_price?: number;
            /**
             * unit_price
             * The item's unit price.
             */
            unit_price: number;
            /**
             * quantity
             * The item's quantity.
             */
            quantity: number;
            /**
             * refundable_total
             * The item's refundable total.
             */
            refundable_total: number;
            /**
             * refundable_total_per_unit
             * The item's refundable total per unit.
             */
            refundable_total_per_unit: number;
        };
    })[];
    /** The item's adjustments. */
    adjustments?: ({
        /** The adjustment's item. */
        item: {
            /**
             * id
             * The item's ID.
             */
            id: string;
            /**
             * title
             * The item's title.
             */
            title: string;
            /**
             * subtitle
             * The item's subtitle.
             */
            subtitle: string;
            /**
             * thumbnail
             * The item's thumbnail.
             */
            thumbnail: string;
            /** The item's variant. */
            variant?: {
                /**
                 * id
                 * The variant's ID.
                 */
                id: string;
                /**
                 * title
                 * The variant's title.
                 */
                title: string;
                /**
                 * sku
                 * The variant's sku.
                 */
                sku: string;
                /**
                 * barcode
                 * The variant's barcode.
                 */
                barcode: string;
                /**
                 * ean
                 * The variant's ean.
                 */
                ean: string;
                /**
                 * upc
                 * The variant's upc.
                 */
                upc: string;
                /**
                 * allow_backorder
                 * The variant's allow backorder.
                 */
                allow_backorder: boolean;
                /**
                 * manage_inventory
                 * The variant's manage inventory.
                 */
                manage_inventory: boolean;
                /**
                 * inventory_quantity
                 * The variant's inventory quantity.
                 */
                inventory_quantity?: number;
                /**
                 * hs_code
                 * The variant's hs code.
                 */
                hs_code: string;
                /**
                 * origin_country
                 * The variant's origin country.
                 */
                origin_country: string;
                /**
                 * mid_code
                 * The variant's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The variant's material.
                 */
                material: string;
                /**
                 * weight
                 * The variant's weight.
                 */
                weight: number;
                /**
                 * length
                 * The variant's length.
                 */
                length: number;
                /**
                 * height
                 * The variant's height.
                 */
                height: number;
                /**
                 * width
                 * The variant's width.
                 */
                width: number;
                /**
                 * variant_rank
                 * The variant's variant rank.
                 */
                variant_rank?: number;
                /** The variant's options. */
                options: object[];
                /** The variant's product. */
                product?: object;
                /**
                 * product_id
                 * The variant's product id.
                 */
                product_id?: string;
                /** The variant's calculated price. */
                calculated_price?: object;
                /**
                 * created_at
                 * The variant's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The variant's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * deleted_at
                 * The variant's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /** The variant's metadata. */
                metadata?: object;
            };
            /**
             * variant_id
             * The item's variant id.
             */
            variant_id: string;
            /** The item's product. */
            product?: {
                /**
                 * id
                 * The product's ID.
                 */
                id: string;
                /**
                 * title
                 * The product's title.
                 */
                title: string;
                /**
                 * handle
                 * The product's handle.
                 */
                handle: string;
                /**
                 * subtitle
                 * The product's subtitle.
                 */
                subtitle: string;
                /**
                 * description
                 * The product's description.
                 */
                description: string;
                /**
                 * is_giftcard
                 * The product's is giftcard.
                 */
                is_giftcard: boolean;
                /** The product's status. */
                status: "draft" | "proposed" | "published" | "rejected";
                /**
                 * thumbnail
                 * The product's thumbnail.
                 */
                thumbnail: string;
                /**
                 * width
                 * The product's width.
                 */
                width: number;
                /**
                 * weight
                 * The product's weight.
                 */
                weight: number;
                /**
                 * length
                 * The product's length.
                 */
                length: number;
                /**
                 * height
                 * The product's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The product's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The product's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The product's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The product's material.
                 */
                material: string;
                /** The product's collection. */
                collection?: object;
                /**
                 * collection_id
                 * The product's collection id.
                 */
                collection_id: string;
                /** The product's categories. */
                categories?: object[];
                /** The product's type. */
                type?: object;
                /**
                 * type_id
                 * The product's type id.
                 */
                type_id: string;
                /** The product's tags. */
                tags?: object[];
                /** The product's variants. */
                variants: object[];
                /** The product's options. */
                options: object[];
                /** The product's images. */
                images: object[];
                /**
                 * discountable
                 * The product's discountable.
                 */
                discountable: boolean;
                /**
                 * external_id
                 * The product's external id.
                 */
                external_id: string;
                /**
                 * created_at
                 * The product's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The product's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * deleted_at
                 * The product's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /** The product's metadata. */
                metadata?: object;
            };
            /**
             * product_id
             * The item's product id.
             */
            product_id: string;
            /**
             * product_title
             * The item's product title.
             */
            product_title: string;
            /**
             * product_description
             * The item's product description.
             */
            product_description: string;
            /**
             * product_subtitle
             * The item's product subtitle.
             */
            product_subtitle: string;
            /**
             * product_type
             * The item's product type.
             */
            product_type: string;
            /**
             * product_collection
             * The item's product collection.
             */
            product_collection: string;
            /**
             * product_handle
             * The item's product handle.
             */
            product_handle: string;
            /**
             * variant_sku
             * The item's variant sku.
             */
            variant_sku: string;
            /**
             * variant_barcode
             * The item's variant barcode.
             */
            variant_barcode: string;
            /**
             * variant_title
             * The item's variant title.
             */
            variant_title: string;
            /** The item's variant option values. */
            variant_option_values: object;
            /**
             * requires_shipping
             * The item's requires shipping.
             */
            requires_shipping: boolean;
            /**
             * is_discountable
             * The item's is discountable.
             */
            is_discountable: boolean;
            /**
             * is_tax_inclusive
             * The item's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * compare_at_unit_price
             * The item's compare at unit price.
             */
            compare_at_unit_price?: number;
            /**
             * unit_price
             * The item's unit price.
             */
            unit_price: number;
            /**
             * quantity
             * The item's quantity.
             */
            quantity: number;
            /** The item's tax lines. */
            tax_lines?: {
                /** The tax line's item. */
                item: object;
                /**
                 * item_id
                 * The tax line's item id.
                 */
                item_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /** The item's adjustments. */
            adjustments?: {
                /** The adjustment's item. */
                item: object;
                /**
                 * item_id
                 * The adjustment's item id.
                 */
                item_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /** The item's detail. */
            detail: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * item_id
                 * The detail's item id.
                 */
                item_id: string;
                /** The detail's item. */
                item: object;
                /**
                 * quantity
                 * The detail's quantity.
                 */
                quantity: number;
                /**
                 * fulfilled_quantity
                 * The detail's fulfilled quantity.
                 */
                fulfilled_quantity: number;
                /**
                 * delivered_quantity
                 * The detail's delivered quantity.
                 */
                delivered_quantity: number;
                /**
                 * shipped_quantity
                 * The detail's shipped quantity.
                 */
                shipped_quantity: number;
                /**
                 * return_requested_quantity
                 * The detail's return requested quantity.
                 */
                return_requested_quantity: number;
                /**
                 * return_received_quantity
                 * The detail's return received quantity.
                 */
                return_received_quantity: number;
                /**
                 * return_dismissed_quantity
                 * The detail's return dismissed quantity.
                 */
                return_dismissed_quantity: number;
                /**
                 * written_off_quantity
                 * The detail's written off quantity.
                 */
                written_off_quantity: number;
                /** The detail's metadata. */
                metadata: object;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            };
            /**
             * created_at
             * The item's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The item's updated at.
             * @format date-time
             */
            updated_at: string;
            /** The item's metadata. */
            metadata: object;
            /**
             * original_total
             * The item's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The item's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The item's original tax total.
             */
            original_tax_total: number;
            /**
             * item_total
             * The item's item total.
             */
            item_total: number;
            /**
             * item_subtotal
             * The item's item subtotal.
             */
            item_subtotal: number;
            /**
             * item_tax_total
             * The item's item tax total.
             */
            item_tax_total: number;
            /**
             * total
             * The item's total.
             */
            total: number;
            /**
             * subtotal
             * The item's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The item's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The item's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The item's discount tax total.
             */
            discount_tax_total: number;
            /**
             * refundable_total
             * The item's refundable total.
             */
            refundable_total: number;
            /**
             * refundable_total_per_unit
             * The item's refundable total per unit.
             */
            refundable_total_per_unit: number;
        };
        /**
         * item_id
         * The adjustment's item id.
         */
        item_id: string;
        /**
         * id
         * The adjustment's ID.
         */
        id: string;
        /**
         * code
         * The adjustment's code.
         */
        code?: string;
        /**
         * amount
         * The adjustment's amount.
         */
        amount: number;
        /**
         * order_id
         * The adjustment's order id.
         */
        order_id: string;
        /**
         * description
         * The adjustment's description.
         */
        description?: string;
        /**
         * promotion_id
         * The adjustment's promotion id.
         */
        promotion_id?: string;
        /**
         * provider_id
         * The adjustment's provider id.
         */
        provider_id?: string;
        /**
         * created_at
         * The adjustment's created at.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The adjustment's updated at.
         * @format date-time
         */
        updated_at: string;
    } & {
        /** The adjustment's item. */
        item: {
            /** The item's variant. */
            variant?: {
                /** The variant's options. */
                options: object[];
                /** The variant's product. */
                product?: object;
                /**
                 * length
                 * The variant's length.
                 */
                length: number;
                /**
                 * title
                 * The variant's title.
                 */
                title: string;
                /**
                 * id
                 * The variant's ID.
                 */
                id: string;
                /** The variant's metadata. */
                metadata?: object;
                /**
                 * created_at
                 * The variant's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The variant's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * product_id
                 * The variant's product id.
                 */
                product_id?: string;
                /**
                 * width
                 * The variant's width.
                 */
                width: number;
                /**
                 * weight
                 * The variant's weight.
                 */
                weight: number;
                /**
                 * height
                 * The variant's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The variant's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The variant's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The variant's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The variant's material.
                 */
                material: string;
                /**
                 * deleted_at
                 * The variant's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /**
                 * sku
                 * The variant's sku.
                 */
                sku: string;
                /**
                 * barcode
                 * The variant's barcode.
                 */
                barcode: string;
                /**
                 * ean
                 * The variant's ean.
                 */
                ean: string;
                /**
                 * upc
                 * The variant's upc.
                 */
                upc: string;
                /**
                 * allow_backorder
                 * The variant's allow backorder.
                 */
                allow_backorder: boolean;
                /**
                 * manage_inventory
                 * The variant's manage inventory.
                 */
                manage_inventory: boolean;
                /**
                 * inventory_quantity
                 * The variant's inventory quantity.
                 */
                inventory_quantity?: number;
                /**
                 * variant_rank
                 * The variant's variant rank.
                 */
                variant_rank?: number;
                /** The variant's calculated price. */
                calculated_price?: object;
            };
            /** The item's product. */
            product?: {
                /** The product's collection. */
                collection?: object;
                /** The product's categories. */
                categories?: object[];
                /** The product's variants. */
                variants: object[];
                /** The product's type. */
                type?: object;
                /** The product's tags. */
                tags?: object[];
                /** The product's options. */
                options: object[];
                /** The product's images. */
                images: object[];
                /**
                 * length
                 * The product's length.
                 */
                length: number;
                /**
                 * title
                 * The product's title.
                 */
                title: string;
                /** The product's status. */
                status: "draft" | "proposed" | "published" | "rejected";
                /**
                 * description
                 * The product's description.
                 */
                description: string;
                /**
                 * id
                 * The product's ID.
                 */
                id: string;
                /** The product's metadata. */
                metadata?: object;
                /**
                 * created_at
                 * The product's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The product's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * subtitle
                 * The product's subtitle.
                 */
                subtitle: string;
                /**
                 * thumbnail
                 * The product's thumbnail.
                 */
                thumbnail: string;
                /**
                 * handle
                 * The product's handle.
                 */
                handle: string;
                /**
                 * is_giftcard
                 * The product's is giftcard.
                 */
                is_giftcard: boolean;
                /**
                 * width
                 * The product's width.
                 */
                width: number;
                /**
                 * weight
                 * The product's weight.
                 */
                weight: number;
                /**
                 * height
                 * The product's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The product's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The product's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The product's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The product's material.
                 */
                material: string;
                /**
                 * collection_id
                 * The product's collection id.
                 */
                collection_id: string;
                /**
                 * type_id
                 * The product's type id.
                 */
                type_id: string;
                /**
                 * discountable
                 * The product's discountable.
                 */
                discountable: boolean;
                /**
                 * external_id
                 * The product's external id.
                 */
                external_id: string;
                /**
                 * deleted_at
                 * The product's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
            };
            /** The item's tax lines. */
            tax_lines?: ({
                /** The tax line's item. */
                item: object;
                /**
                 * item_id
                 * The tax line's item id.
                 */
                item_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The tax line's item. */
                item: object;
            })[];
            /** The item's adjustments. */
            adjustments?: ({
                /** The adjustment's item. */
                item: object;
                /**
                 * item_id
                 * The adjustment's item id.
                 */
                item_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The adjustment's item. */
                item: object;
            })[];
            /** The item's detail. */
            detail: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * item_id
                 * The detail's item id.
                 */
                item_id: string;
                /** The detail's item. */
                item: object;
                /**
                 * quantity
                 * The detail's quantity.
                 */
                quantity: number;
                /**
                 * fulfilled_quantity
                 * The detail's fulfilled quantity.
                 */
                fulfilled_quantity: number;
                /**
                 * delivered_quantity
                 * The detail's delivered quantity.
                 */
                delivered_quantity: number;
                /**
                 * shipped_quantity
                 * The detail's shipped quantity.
                 */
                shipped_quantity: number;
                /**
                 * return_requested_quantity
                 * The detail's return requested quantity.
                 */
                return_requested_quantity: number;
                /**
                 * return_received_quantity
                 * The detail's return received quantity.
                 */
                return_received_quantity: number;
                /**
                 * return_dismissed_quantity
                 * The detail's return dismissed quantity.
                 */
                return_dismissed_quantity: number;
                /**
                 * written_off_quantity
                 * The detail's written off quantity.
                 */
                written_off_quantity: number;
                /** The detail's metadata. */
                metadata: object;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The detail's item. */
                item: object;
            };
            /**
             * title
             * The item's title.
             */
            title: string;
            /**
             * id
             * The item's ID.
             */
            id: string;
            /** The item's metadata. */
            metadata: object;
            /**
             * created_at
             * The item's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The item's updated at.
             * @format date-time
             */
            updated_at: string;
            /**
             * item_total
             * The item's item total.
             */
            item_total: number;
            /**
             * item_subtotal
             * The item's item subtotal.
             */
            item_subtotal: number;
            /**
             * item_tax_total
             * The item's item tax total.
             */
            item_tax_total: number;
            /**
             * original_total
             * The item's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The item's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The item's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The item's total.
             */
            total: number;
            /**
             * subtotal
             * The item's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The item's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The item's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The item's discount tax total.
             */
            discount_tax_total: number;
            /**
             * subtitle
             * The item's subtitle.
             */
            subtitle: string;
            /**
             * thumbnail
             * The item's thumbnail.
             */
            thumbnail: string;
            /**
             * variant_id
             * The item's variant id.
             */
            variant_id: string;
            /**
             * product_id
             * The item's product id.
             */
            product_id: string;
            /**
             * product_title
             * The item's product title.
             */
            product_title: string;
            /**
             * product_description
             * The item's product description.
             */
            product_description: string;
            /**
             * product_subtitle
             * The item's product subtitle.
             */
            product_subtitle: string;
            /**
             * product_type
             * The item's product type.
             */
            product_type: string;
            /**
             * product_collection
             * The item's product collection.
             */
            product_collection: string;
            /**
             * product_handle
             * The item's product handle.
             */
            product_handle: string;
            /**
             * variant_sku
             * The item's variant sku.
             */
            variant_sku: string;
            /**
             * variant_barcode
             * The item's variant barcode.
             */
            variant_barcode: string;
            /**
             * variant_title
             * The item's variant title.
             */
            variant_title: string;
            /** The item's variant option values. */
            variant_option_values: object;
            /**
             * requires_shipping
             * The item's requires shipping.
             */
            requires_shipping: boolean;
            /**
             * is_discountable
             * The item's is discountable.
             */
            is_discountable: boolean;
            /**
             * is_tax_inclusive
             * The item's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * compare_at_unit_price
             * The item's compare at unit price.
             */
            compare_at_unit_price?: number;
            /**
             * unit_price
             * The item's unit price.
             */
            unit_price: number;
            /**
             * quantity
             * The item's quantity.
             */
            quantity: number;
            /**
             * refundable_total
             * The item's refundable total.
             */
            refundable_total: number;
            /**
             * refundable_total_per_unit
             * The item's refundable total per unit.
             */
            refundable_total_per_unit: number;
        };
    })[];
    /** The item's detail. */
    detail: BaseOrderItemDetail & {
        /** The detail's item. */
        item: {
            /** The item's variant. */
            variant?: {
                /** The variant's options. */
                options: object[];
                /** The variant's product. */
                product?: object;
                /**
                 * length
                 * The variant's length.
                 */
                length: number;
                /**
                 * title
                 * The variant's title.
                 */
                title: string;
                /**
                 * id
                 * The variant's ID.
                 */
                id: string;
                /** The variant's metadata. */
                metadata?: object;
                /**
                 * created_at
                 * The variant's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The variant's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * product_id
                 * The variant's product id.
                 */
                product_id?: string;
                /**
                 * width
                 * The variant's width.
                 */
                width: number;
                /**
                 * weight
                 * The variant's weight.
                 */
                weight: number;
                /**
                 * height
                 * The variant's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The variant's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The variant's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The variant's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The variant's material.
                 */
                material: string;
                /**
                 * deleted_at
                 * The variant's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
                /**
                 * sku
                 * The variant's sku.
                 */
                sku: string;
                /**
                 * barcode
                 * The variant's barcode.
                 */
                barcode: string;
                /**
                 * ean
                 * The variant's ean.
                 */
                ean: string;
                /**
                 * upc
                 * The variant's upc.
                 */
                upc: string;
                /**
                 * allow_backorder
                 * The variant's allow backorder.
                 */
                allow_backorder: boolean;
                /**
                 * manage_inventory
                 * The variant's manage inventory.
                 */
                manage_inventory: boolean;
                /**
                 * inventory_quantity
                 * The variant's inventory quantity.
                 */
                inventory_quantity?: number;
                /**
                 * variant_rank
                 * The variant's variant rank.
                 */
                variant_rank?: number;
                /** The variant's calculated price. */
                calculated_price?: object;
            };
            /** The item's product. */
            product?: {
                /** The product's collection. */
                collection?: object;
                /** The product's categories. */
                categories?: object[];
                /** The product's variants. */
                variants: object[];
                /** The product's type. */
                type?: object;
                /** The product's tags. */
                tags?: object[];
                /** The product's options. */
                options: object[];
                /** The product's images. */
                images: object[];
                /**
                 * length
                 * The product's length.
                 */
                length: number;
                /**
                 * title
                 * The product's title.
                 */
                title: string;
                /** The product's status. */
                status: "draft" | "proposed" | "published" | "rejected";
                /**
                 * description
                 * The product's description.
                 */
                description: string;
                /**
                 * id
                 * The product's ID.
                 */
                id: string;
                /** The product's metadata. */
                metadata?: object;
                /**
                 * created_at
                 * The product's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The product's updated at.
                 * @format date-time
                 */
                updated_at: string;
                /**
                 * subtitle
                 * The product's subtitle.
                 */
                subtitle: string;
                /**
                 * thumbnail
                 * The product's thumbnail.
                 */
                thumbnail: string;
                /**
                 * handle
                 * The product's handle.
                 */
                handle: string;
                /**
                 * is_giftcard
                 * The product's is giftcard.
                 */
                is_giftcard: boolean;
                /**
                 * width
                 * The product's width.
                 */
                width: number;
                /**
                 * weight
                 * The product's weight.
                 */
                weight: number;
                /**
                 * height
                 * The product's height.
                 */
                height: number;
                /**
                 * origin_country
                 * The product's origin country.
                 */
                origin_country: string;
                /**
                 * hs_code
                 * The product's hs code.
                 */
                hs_code: string;
                /**
                 * mid_code
                 * The product's mid code.
                 */
                mid_code: string;
                /**
                 * material
                 * The product's material.
                 */
                material: string;
                /**
                 * collection_id
                 * The product's collection id.
                 */
                collection_id: string;
                /**
                 * type_id
                 * The product's type id.
                 */
                type_id: string;
                /**
                 * discountable
                 * The product's discountable.
                 */
                discountable: boolean;
                /**
                 * external_id
                 * The product's external id.
                 */
                external_id: string;
                /**
                 * deleted_at
                 * The product's deleted at.
                 * @format date-time
                 */
                deleted_at: string;
            };
            /** The item's tax lines. */
            tax_lines?: ({
                /** The tax line's item. */
                item: object;
                /**
                 * item_id
                 * The tax line's item id.
                 */
                item_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The tax line's item. */
                item: object;
            })[];
            /** The item's adjustments. */
            adjustments?: ({
                /** The adjustment's item. */
                item: object;
                /**
                 * item_id
                 * The adjustment's item id.
                 */
                item_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The adjustment's item. */
                item: object;
            })[];
            /** The item's detail. */
            detail: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * item_id
                 * The detail's item id.
                 */
                item_id: string;
                /** The detail's item. */
                item: object;
                /**
                 * quantity
                 * The detail's quantity.
                 */
                quantity: number;
                /**
                 * fulfilled_quantity
                 * The detail's fulfilled quantity.
                 */
                fulfilled_quantity: number;
                /**
                 * delivered_quantity
                 * The detail's delivered quantity.
                 */
                delivered_quantity: number;
                /**
                 * shipped_quantity
                 * The detail's shipped quantity.
                 */
                shipped_quantity: number;
                /**
                 * return_requested_quantity
                 * The detail's return requested quantity.
                 */
                return_requested_quantity: number;
                /**
                 * return_received_quantity
                 * The detail's return received quantity.
                 */
                return_received_quantity: number;
                /**
                 * return_dismissed_quantity
                 * The detail's return dismissed quantity.
                 */
                return_dismissed_quantity: number;
                /**
                 * written_off_quantity
                 * The detail's written off quantity.
                 */
                written_off_quantity: number;
                /** The detail's metadata. */
                metadata: object;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The detail's item. */
                item: object;
            };
            /**
             * title
             * The item's title.
             */
            title: string;
            /**
             * id
             * The item's ID.
             */
            id: string;
            /** The item's metadata. */
            metadata: object;
            /**
             * created_at
             * The item's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The item's updated at.
             * @format date-time
             */
            updated_at: string;
            /**
             * item_total
             * The item's item total.
             */
            item_total: number;
            /**
             * item_subtotal
             * The item's item subtotal.
             */
            item_subtotal: number;
            /**
             * item_tax_total
             * The item's item tax total.
             */
            item_tax_total: number;
            /**
             * original_total
             * The item's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The item's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The item's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The item's total.
             */
            total: number;
            /**
             * subtotal
             * The item's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The item's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The item's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The item's discount tax total.
             */
            discount_tax_total: number;
            /**
             * subtitle
             * The item's subtitle.
             */
            subtitle: string;
            /**
             * thumbnail
             * The item's thumbnail.
             */
            thumbnail: string;
            /**
             * variant_id
             * The item's variant id.
             */
            variant_id: string;
            /**
             * product_id
             * The item's product id.
             */
            product_id: string;
            /**
             * product_title
             * The item's product title.
             */
            product_title: string;
            /**
             * product_description
             * The item's product description.
             */
            product_description: string;
            /**
             * product_subtitle
             * The item's product subtitle.
             */
            product_subtitle: string;
            /**
             * product_type
             * The item's product type.
             */
            product_type: string;
            /**
             * product_collection
             * The item's product collection.
             */
            product_collection: string;
            /**
             * product_handle
             * The item's product handle.
             */
            product_handle: string;
            /**
             * variant_sku
             * The item's variant sku.
             */
            variant_sku: string;
            /**
             * variant_barcode
             * The item's variant barcode.
             */
            variant_barcode: string;
            /**
             * variant_title
             * The item's variant title.
             */
            variant_title: string;
            /** The item's variant option values. */
            variant_option_values: object;
            /**
             * requires_shipping
             * The item's requires shipping.
             */
            requires_shipping: boolean;
            /**
             * is_discountable
             * The item's is discountable.
             */
            is_discountable: boolean;
            /**
             * is_tax_inclusive
             * The item's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * compare_at_unit_price
             * The item's compare at unit price.
             */
            compare_at_unit_price?: number;
            /**
             * unit_price
             * The item's unit price.
             */
            unit_price: number;
            /**
             * quantity
             * The item's quantity.
             */
            quantity: number;
            /**
             * refundable_total
             * The item's refundable total.
             */
            refundable_total: number;
            /**
             * refundable_total_per_unit
             * The item's refundable total per unit.
             */
            refundable_total_per_unit: number;
        };
    };
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * original_total
     * The item's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The item's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The total taxes of the item, excluding promotions.
     */
    original_tax_total: number;
    /**
     * item_total
     * The total taxes of the item, including promotions.
     */
    item_total: number;
    /**
     * item_subtotal
     * The item's total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * item_tax_total
     * The total taxes of the item, including promotions.
     */
    item_tax_total: number;
    /**
     * total
     * The item's total, including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The item's subtotal excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The tax total of the item including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discount amount of the item.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * refundable_total
     * The total refundable amount of the item's total.
     */
    refundable_total: number;
    /**
     * refundable_total_per_unit
     * The total refundable amount of the item's total for a single quantity.
     */
    refundable_total_per_unit: number;
    /**
     * product_type_id
     * The ID of the associated product's type.
     */
    product_type_id: string;
}
/** The order's details. */
export interface StoreOrderResponse {
    /** The order's details. */
    order: StoreOrder;
}
/** The shipping method's details. */
export interface StoreOrderShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order the shipping method belongs to.
     */
    order_id: string;
    /**
     * name
     * The shipping method's name.
     */
    name: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount includes applied taxes.
     */
    is_tax_inclusive: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id: string;
    /** The shipping method's data, useful for fulfillment provider handling its fulfillment. */
    data: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata: object;
    /** The shipping method's tax lines. */
    tax_lines?: ({
        /** The tax line's shipping method. */
        shipping_method: {
            /**
             * id
             * The shipping method's ID.
             */
            id: string;
            /**
             * order_id
             * The shipping method's order id.
             */
            order_id: string;
            /**
             * name
             * The shipping method's name.
             */
            name: string;
            /**
             * description
             * The shipping method's description.
             */
            description?: string;
            /**
             * amount
             * The shipping method's amount.
             */
            amount: number;
            /**
             * is_tax_inclusive
             * The shipping method's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * shipping_option_id
             * The shipping method's shipping option id.
             */
            shipping_option_id: string;
            /** The shipping method's data. */
            data: object;
            /** The shipping method's metadata. */
            metadata: object;
            /** The shipping method's tax lines. */
            tax_lines?: {
                /** The tax line's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The tax line's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /** The shipping method's adjustments. */
            adjustments?: {
                /** The adjustment's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The adjustment's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /**
             * original_total
             * The shipping method's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The shipping method's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The shipping method's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The shipping method's total.
             */
            total: number;
            /** The shipping method's detail. */
            detail?: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * shipping_method_id
                 * The detail's shipping method id.
                 */
                shipping_method_id: string;
                /** The detail's shipping method. */
                shipping_method: object;
                /**
                 * claim_id
                 * The detail's claim id.
                 */
                claim_id?: string;
                /**
                 * exchange_id
                 * The detail's exchange id.
                 */
                exchange_id?: string;
                /**
                 * return_id
                 * The detail's return id.
                 */
                return_id?: string;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            };
            /**
             * subtotal
             * The shipping method's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The shipping method's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The shipping method's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The shipping method's discount tax total.
             */
            discount_tax_total: number;
            /**
             * created_at
             * The shipping method's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The shipping method's updated at.
             * @format date-time
             */
            updated_at: string;
        };
        /**
         * shipping_method_id
         * The tax line's shipping method id.
         */
        shipping_method_id: string;
        /**
         * total
         * The tax line's total.
         */
        total: number;
        /**
         * subtotal
         * The tax line's subtotal.
         */
        subtotal: number;
        /**
         * id
         * The tax line's ID.
         */
        id: string;
        /**
         * description
         * The tax line's description.
         */
        description?: string;
        /**
         * tax_rate_id
         * The tax line's tax rate id.
         */
        tax_rate_id?: string;
        /**
         * code
         * The tax line's code.
         */
        code: string;
        /**
         * rate
         * The tax line's rate.
         */
        rate: number;
        /**
         * provider_id
         * The tax line's provider id.
         */
        provider_id?: string;
        /**
         * created_at
         * The tax line's created at.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The tax line's updated at.
         * @format date-time
         */
        updated_at: string;
    } & {
        /** The tax line's shipping method. */
        shipping_method: {
            /** The shipping method's tax lines. */
            tax_lines?: ({
                /** The tax line's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The tax line's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The tax line's shipping method. */
                shipping_method: object;
            })[];
            /** The shipping method's adjustments. */
            adjustments?: ({
                /** The adjustment's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The adjustment's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The adjustment's shipping method. */
                shipping_method: object;
            })[];
            /** The shipping method's detail. */
            detail?: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * shipping_method_id
                 * The detail's shipping method id.
                 */
                shipping_method_id: string;
                /** The detail's shipping method. */
                shipping_method: object;
                /**
                 * claim_id
                 * The detail's claim id.
                 */
                claim_id?: string;
                /**
                 * exchange_id
                 * The detail's exchange id.
                 */
                exchange_id?: string;
                /**
                 * return_id
                 * The detail's return id.
                 */
                return_id?: string;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The detail's shipping method. */
                shipping_method: object;
            };
            /**
             * id
             * The shipping method's ID.
             */
            id: string;
            /**
             * order_id
             * The shipping method's order id.
             */
            order_id: string;
            /**
             * name
             * The shipping method's name.
             */
            name: string;
            /**
             * description
             * The shipping method's description.
             */
            description?: string;
            /**
             * amount
             * The shipping method's amount.
             */
            amount: number;
            /**
             * is_tax_inclusive
             * The shipping method's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * shipping_option_id
             * The shipping method's shipping option id.
             */
            shipping_option_id: string;
            /** The shipping method's data. */
            data: object;
            /** The shipping method's metadata. */
            metadata: object;
            /**
             * original_total
             * The shipping method's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The shipping method's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The shipping method's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The shipping method's total.
             */
            total: number;
            /**
             * subtotal
             * The shipping method's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The shipping method's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The shipping method's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The shipping method's discount tax total.
             */
            discount_tax_total: number;
            /**
             * created_at
             * The shipping method's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The shipping method's updated at.
             * @format date-time
             */
            updated_at: string;
        };
    })[];
    /** The shipping method's adjustments. */
    adjustments?: ({
        /** The adjustment's shipping method. */
        shipping_method: {
            /**
             * id
             * The shipping method's ID.
             */
            id: string;
            /**
             * order_id
             * The shipping method's order id.
             */
            order_id: string;
            /**
             * name
             * The shipping method's name.
             */
            name: string;
            /**
             * description
             * The shipping method's description.
             */
            description?: string;
            /**
             * amount
             * The shipping method's amount.
             */
            amount: number;
            /**
             * is_tax_inclusive
             * The shipping method's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * shipping_option_id
             * The shipping method's shipping option id.
             */
            shipping_option_id: string;
            /** The shipping method's data. */
            data: object;
            /** The shipping method's metadata. */
            metadata: object;
            /** The shipping method's tax lines. */
            tax_lines?: {
                /** The tax line's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The tax line's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /** The shipping method's adjustments. */
            adjustments?: {
                /** The adjustment's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The adjustment's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            }[];
            /**
             * original_total
             * The shipping method's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The shipping method's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The shipping method's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The shipping method's total.
             */
            total: number;
            /** The shipping method's detail. */
            detail?: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * shipping_method_id
                 * The detail's shipping method id.
                 */
                shipping_method_id: string;
                /** The detail's shipping method. */
                shipping_method: object;
                /**
                 * claim_id
                 * The detail's claim id.
                 */
                claim_id?: string;
                /**
                 * exchange_id
                 * The detail's exchange id.
                 */
                exchange_id?: string;
                /**
                 * return_id
                 * The detail's return id.
                 */
                return_id?: string;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            };
            /**
             * subtotal
             * The shipping method's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The shipping method's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The shipping method's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The shipping method's discount tax total.
             */
            discount_tax_total: number;
            /**
             * created_at
             * The shipping method's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The shipping method's updated at.
             * @format date-time
             */
            updated_at: string;
        };
        /**
         * shipping_method_id
         * The adjustment's shipping method id.
         */
        shipping_method_id: string;
        /**
         * id
         * The adjustment's ID.
         */
        id: string;
        /**
         * code
         * The adjustment's code.
         */
        code?: string;
        /**
         * amount
         * The adjustment's amount.
         */
        amount: number;
        /**
         * order_id
         * The adjustment's order id.
         */
        order_id: string;
        /**
         * description
         * The adjustment's description.
         */
        description?: string;
        /**
         * promotion_id
         * The adjustment's promotion id.
         */
        promotion_id?: string;
        /**
         * provider_id
         * The adjustment's provider id.
         */
        provider_id?: string;
        /**
         * created_at
         * The adjustment's created at.
         * @format date-time
         */
        created_at: string;
        /**
         * updated_at
         * The adjustment's updated at.
         * @format date-time
         */
        updated_at: string;
    } & {
        /** The adjustment's shipping method. */
        shipping_method: {
            /** The shipping method's tax lines. */
            tax_lines?: ({
                /** The tax line's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The tax line's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The tax line's shipping method. */
                shipping_method: object;
            })[];
            /** The shipping method's adjustments. */
            adjustments?: ({
                /** The adjustment's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The adjustment's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The adjustment's shipping method. */
                shipping_method: object;
            })[];
            /** The shipping method's detail. */
            detail?: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * shipping_method_id
                 * The detail's shipping method id.
                 */
                shipping_method_id: string;
                /** The detail's shipping method. */
                shipping_method: object;
                /**
                 * claim_id
                 * The detail's claim id.
                 */
                claim_id?: string;
                /**
                 * exchange_id
                 * The detail's exchange id.
                 */
                exchange_id?: string;
                /**
                 * return_id
                 * The detail's return id.
                 */
                return_id?: string;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The detail's shipping method. */
                shipping_method: object;
            };
            /**
             * id
             * The shipping method's ID.
             */
            id: string;
            /**
             * order_id
             * The shipping method's order id.
             */
            order_id: string;
            /**
             * name
             * The shipping method's name.
             */
            name: string;
            /**
             * description
             * The shipping method's description.
             */
            description?: string;
            /**
             * amount
             * The shipping method's amount.
             */
            amount: number;
            /**
             * is_tax_inclusive
             * The shipping method's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * shipping_option_id
             * The shipping method's shipping option id.
             */
            shipping_option_id: string;
            /** The shipping method's data. */
            data: object;
            /** The shipping method's metadata. */
            metadata: object;
            /**
             * original_total
             * The shipping method's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The shipping method's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The shipping method's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The shipping method's total.
             */
            total: number;
            /**
             * subtotal
             * The shipping method's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The shipping method's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The shipping method's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The shipping method's discount tax total.
             */
            discount_tax_total: number;
            /**
             * created_at
             * The shipping method's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The shipping method's updated at.
             * @format date-time
             */
            updated_at: string;
        };
    })[];
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * original_subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * original_tax_total
     * The shipping method's total taxes excluding promotions.
     */
    original_tax_total: number;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * tax_total
     * The shipping method's tax total including promotions.
     */
    tax_total: number;
    /**
     * discount_total
     * The total discounts applied on the shipping method.
     */
    discount_total: number;
    /**
     * discount_tax_total
     * The taxes applied on the discount amount.
     */
    discount_tax_total: number;
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at: string;
    /** Details of changes to a shipping method. */
    detail?: BaseOrderShippingDetail & {
        /** The detail's shipping method. */
        shipping_method: {
            /** The shipping method's tax lines. */
            tax_lines?: ({
                /** The tax line's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The tax line's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * total
                 * The tax line's total.
                 */
                total: number;
                /**
                 * subtotal
                 * The tax line's subtotal.
                 */
                subtotal: number;
                /**
                 * id
                 * The tax line's ID.
                 */
                id: string;
                /**
                 * description
                 * The tax line's description.
                 */
                description?: string;
                /**
                 * tax_rate_id
                 * The tax line's tax rate id.
                 */
                tax_rate_id?: string;
                /**
                 * code
                 * The tax line's code.
                 */
                code: string;
                /**
                 * rate
                 * The tax line's rate.
                 */
                rate: number;
                /**
                 * provider_id
                 * The tax line's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The tax line's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The tax line's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The tax line's shipping method. */
                shipping_method: object;
            })[];
            /** The shipping method's adjustments. */
            adjustments?: ({
                /** The adjustment's shipping method. */
                shipping_method: object;
                /**
                 * shipping_method_id
                 * The adjustment's shipping method id.
                 */
                shipping_method_id: string;
                /**
                 * id
                 * The adjustment's ID.
                 */
                id: string;
                /**
                 * code
                 * The adjustment's code.
                 */
                code?: string;
                /**
                 * amount
                 * The adjustment's amount.
                 */
                amount: number;
                /**
                 * order_id
                 * The adjustment's order id.
                 */
                order_id: string;
                /**
                 * description
                 * The adjustment's description.
                 */
                description?: string;
                /**
                 * promotion_id
                 * The adjustment's promotion id.
                 */
                promotion_id?: string;
                /**
                 * provider_id
                 * The adjustment's provider id.
                 */
                provider_id?: string;
                /**
                 * created_at
                 * The adjustment's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The adjustment's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The adjustment's shipping method. */
                shipping_method: object;
            })[];
            /** The shipping method's detail. */
            detail?: {
                /**
                 * id
                 * The detail's ID.
                 */
                id: string;
                /**
                 * shipping_method_id
                 * The detail's shipping method id.
                 */
                shipping_method_id: string;
                /** The detail's shipping method. */
                shipping_method: object;
                /**
                 * claim_id
                 * The detail's claim id.
                 */
                claim_id?: string;
                /**
                 * exchange_id
                 * The detail's exchange id.
                 */
                exchange_id?: string;
                /**
                 * return_id
                 * The detail's return id.
                 */
                return_id?: string;
                /**
                 * created_at
                 * The detail's created at.
                 * @format date-time
                 */
                created_at: string;
                /**
                 * updated_at
                 * The detail's updated at.
                 * @format date-time
                 */
                updated_at: string;
            } & {
                /** The detail's shipping method. */
                shipping_method: object;
            };
            /**
             * id
             * The shipping method's ID.
             */
            id: string;
            /**
             * order_id
             * The shipping method's order id.
             */
            order_id: string;
            /**
             * name
             * The shipping method's name.
             */
            name: string;
            /**
             * description
             * The shipping method's description.
             */
            description?: string;
            /**
             * amount
             * The shipping method's amount.
             */
            amount: number;
            /**
             * is_tax_inclusive
             * The shipping method's is tax inclusive.
             */
            is_tax_inclusive: boolean;
            /**
             * shipping_option_id
             * The shipping method's shipping option id.
             */
            shipping_option_id: string;
            /** The shipping method's data. */
            data: object;
            /** The shipping method's metadata. */
            metadata: object;
            /**
             * original_total
             * The shipping method's original total.
             */
            original_total: number;
            /**
             * original_subtotal
             * The shipping method's original subtotal.
             */
            original_subtotal: number;
            /**
             * original_tax_total
             * The shipping method's original tax total.
             */
            original_tax_total: number;
            /**
             * total
             * The shipping method's total.
             */
            total: number;
            /**
             * subtotal
             * The shipping method's subtotal.
             */
            subtotal: number;
            /**
             * tax_total
             * The shipping method's tax total.
             */
            tax_total: number;
            /**
             * discount_total
             * The shipping method's discount total.
             */
            discount_total: number;
            /**
             * discount_tax_total
             * The shipping method's discount tax total.
             */
            discount_tax_total: number;
            /**
             * created_at
             * The shipping method's created at.
             * @format date-time
             */
            created_at: string;
            /**
             * updated_at
             * The shipping method's updated at.
             * @format date-time
             */
            updated_at: string;
        };
    };
}
/** The payment collection's details. */
export interface StorePaymentCollection {
    /**
     * id
     * The payment collection's ID.
     */
    id: string;
    /**
     * currency_code
     * The payment collection's currency code.
     */
    currency_code: string;
    /**
     * amount
     * The total amount to be paid.
     */
    amount: number;
    /**
     * authorized_amount
     * The total authorized amount of the collection's payments.
     */
    authorized_amount?: number;
    /**
     * captured_amount
     * The total captured amount of the collection's payments.
     */
    captured_amount?: number;
    /**
     * refunded_amount
     * The total refunded amount of the collection's payments.
     */
    refunded_amount?: number;
    /**
     * completed_at
     * The date the payment collection was completed.
     * @format date-time
     */
    completed_at?: string;
    /**
     * created_at
     * The date the payment collection was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the payment collection was updated.
     * @format date-time
     */
    updated_at?: string;
    /** The payment collection's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The payment collection's status. */
    status: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized";
    /** The payment provider used to process the collection's payments and sessions. */
    payment_providers: StorePaymentProvider[];
    /** The payment collection's payment sessions. */
    payment_sessions?: StorePaymentSession[];
    /** The payment collection's payments. */
    payments?: BasePayment[];
}
/** The payment collection's details. */
export interface StorePaymentCollectionResponse {
    /** The payment collection's details. */
    payment_collection: StorePaymentCollection;
}
/** The payment provider's details */
export interface StorePaymentProvider {
    /**
     * id
     * The payment provider's ID.
     */
    id: string;
}
/** The payment session's details. */
export interface StorePaymentSession {
    /**
     * id
     * The payment session's ID.
     */
    id: string;
    /**
     * amount
     * The payment session's amount.
     */
    amount: number;
    /**
     * currency_code
     * The payment session's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * provider_id
     * The ID of the payment provider processing this session.
     */
    provider_id: string;
    /** The payment session's data, useful for the payment provider processing the payment. */
    data: object;
    /**
     * The context around the payment, such as the customer's details.
     * @example {"customer":{"id":"cus_123"}}
     */
    context?: object;
    /** The payment session's status. */
    status: "authorized" | "captured" | "canceled" | "pending" | "requires_more" | "error";
    /**
     * authorized_at
     * The date the payment session was authorized.
     * @format date-time
     */
    authorized_at?: string;
    payment_collection?: object;
    /** The payment's details. */
    payment?: BasePayment;
}
/** The price's details. */
export interface StorePrice {
    /**
     * id
     * The price's ID.
     */
    id: string;
    /**
     * currency_code
     * The price's ISO 2 currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * amount
     * The price's amount.
     */
    amount: number;
    /**
     * min_quantity
     * The minimum quantity required in the cart for the price to apply.
     */
    min_quantity: number;
    /**
     * max_quantity
     * The maximum quantity required in the cart for the price to apply.
     */
    max_quantity: number;
    /** The price's rules. */
    price_rules?: StorePriceRule[];
}
/** The price rule's details. */
export interface StorePriceRule {
    /**
     * id
     * The price rule's ID.
     */
    id: string;
    /**
     * attribute
     * The price rule's attribute.
     */
    attribute: string;
    /** The price rule's operator. */
    operator: "gt" | "lt" | "eq" | "lte" | "gte";
    /**
     * value
     * The price rule's value.
     */
    value: string;
}
/** The product's details. */
export interface StoreProduct {
    /** The product's categories. */
    categories?: object[];
    /** The product type's details. */
    type?: StoreProductType;
    /**
     * length
     * The product's length.
     */
    length: number;
    /**
     * title
     * The product's title.
     */
    title: string;
    /** The product's status. */
    status: "draft" | "proposed" | "published" | "rejected";
    /** The product's options. */
    options: StoreProductOption[];
    /**
     * description
     * The product's description.
     */
    description: string;
    /**
     * id
     * The product's ID.
     */
    id: string;
    /** The product's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the product was updated.
     * @format date-time
     */
    updated_at: string;
    /** The product's variants. */
    variants: StoreProductVariant[];
    /**
     * handle
     * The product's handle.
     */
    handle: string;
    /**
     * subtitle
     * The product's subtitle.
     */
    subtitle: string;
    /**
     * is_giftcard
     * Whether the product is a gift card.
     */
    is_giftcard: boolean;
    /**
     * thumbnail
     * The product's thumbnail URL.
     */
    thumbnail: string;
    /**
     * width
     * The product's width.
     */
    width: number;
    /**
     * weight
     * The product's weight.
     */
    weight: number;
    /**
     * height
     * The product's height.
     */
    height: number;
    /**
     * origin_country
     * The product's origin country.
     */
    origin_country: string;
    /**
     * hs_code
     * The product's HS code.
     */
    hs_code: string;
    /**
     * mid_code
     * The product's MID code.
     */
    mid_code: string;
    /**
     * material
     * The product's material.
     */
    material: string;
    /** The collection's details. */
    collection?: StoreCollection;
    /**
     * collection_id
     * The ID of the collection that the product belongs to.
     */
    collection_id: string;
    /**
     * type_id
     * The ID of the product's type.
     */
    type_id: string;
    /** The product's tags. */
    tags?: StoreProductTag[];
    /** The product's images. */
    images: StoreProductImage[];
    /**
     * discountable
     * Whether the product can be discounted.
     */
    discountable: boolean;
    /**
     * external_id
     * The ID of the product in an external service or system.
     */
    external_id: string;
    /**
     * deleted_at
     * The date the product was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The category's details. */
export interface StoreProductCategory {
    /** The category's products. */
    products?: StoreProduct[];
    /**
     * id
     * The category's ID.
     */
    id: string;
    /**
     * name
     * The category's name.
     */
    name: string;
    /**
     * description
     * The category's description.
     */
    description: string;
    /**
     * handle
     * The category's handle.
     */
    handle: string;
    /**
     * rank
     * The category's rank.
     */
    rank: number;
    /**
     * parent_category_id
     * The ID of the category's parent.
     */
    parent_category_id: string;
    parent_category: object;
    /** The category's children. */
    category_children: object[];
    /** The category's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the category was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the category was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the category was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The paginated list of product categories. */
export interface StoreProductCategoryListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items skipped before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items.
     */
    count: number;
    /** The list of product categories. */
    product_categories: StoreProductCategory[];
}
/** The product category's details. */
export interface StoreProductCategoryResponse {
    /** The category's details. */
    product_category: StoreProductCategory;
}
/** The image's details. */
export interface StoreProductImage {
    /**
     * id
     * The image's ID.
     */
    id: string;
    /**
     * url
     * The image's URL.
     */
    url: string;
    /**
     * created_at
     * The date the image was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the image was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the image was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The image's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * rank
     * The image's rank among its sibling images
     */
    rank: number;
}
/** The product option's details. */
export interface StoreProductOption {
    /**
     * id
     * The option's ID.
     */
    id: string;
    /**
     * title
     * The option's title.
     */
    title: string;
    product?: object;
    /**
     * product_id
     * The ID of the product this option belongs to.
     */
    product_id?: string;
    /** The option's values. */
    values?: StoreProductOptionValue[];
    /** The option's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product option was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the product option was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the product option was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The product option value's details. */
export interface StoreProductOptionValue {
    /**
     * id
     * The value's ID.
     */
    id: string;
    /**
     * value
     * The value.
     */
    value: string;
    option?: object;
    /**
     * option_id
     * The ID of the option this value belongs to.
     */
    option_id?: string;
    /** The value's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the value was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the value was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the value was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The product's details. */
export interface StoreProductResponse {
    /** The product's details. */
    product: StoreProduct;
}
/** The tag's details. */
export interface StoreProductTag {
    /**
     * id
     * The tag's ID.
     */
    id: string;
    /**
     * value
     * The tag's value.
     */
    value: string;
    /**
     * created_at
     * The date the tag was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the tag was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the tag was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /** The tag's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The paginated list of product tags. */
export interface StoreProductTagListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items to skip before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items available.
     */
    count: number;
    /** The list of product tags. */
    product_tags: StoreProductTag[];
}
/** The product tag's details. */
export interface StoreProductTagResponse {
    /** The tag's details. */
    product_tag: StoreProductTag;
}
/** The product type's details. */
export interface StoreProductType {
    /**
     * id
     * The product type's ID.
     */
    id: string;
    /** The product type's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the product type was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the product type was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the product type was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * value
     * The type's value.
     */
    value: string;
}
/** The paginated list of product types. */
export interface StoreProductTypeListResponse {
    /**
     * limit
     * The maximum number of items returned.
     */
    limit: number;
    /**
     * offset
     * The number of items to skip before retrieving the returned items.
     */
    offset: number;
    /**
     * count
     * The total number of items available.
     */
    count: number;
    /** The list of product types. */
    product_types: StoreProductType[];
}
/** The product type's details. */
export interface StoreProductTypeResponse {
    /** The product type's details. */
    product_type: StoreProductType;
}
/** The variant's details. */
export interface StoreProductVariant {
    /** The variant's options. */
    options: StoreProductOptionValue[];
    product?: object;
    /**
     * length
     * The variant's length.
     */
    length: number;
    /**
     * title
     * The variant's title.
     */
    title: string;
    /** The variant's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * id
     * The variant's ID.
     */
    id: string;
    /**
     * width
     * The variant's width.
     */
    width: number;
    /**
     * weight
     * The variant's weight.
     */
    weight: number;
    /**
     * height
     * The variant's height.
     */
    height: number;
    /**
     * origin_country
     * The variant's origin country.
     */
    origin_country: string;
    /**
     * hs_code
     * The variant's HS code.
     */
    hs_code: string;
    /**
     * mid_code
     * The variant's MID code.
     */
    mid_code: string;
    /**
     * material
     * The variant's material.
     */
    material: string;
    /**
     * created_at
     * The date the variant was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the variant was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the variant was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * product_id
     * The ID of the product this variant belongs to.
     */
    product_id?: string;
    /**
     * sku
     * The variant's SKU.
     */
    sku: string;
    /**
     * barcode
     * The variant's barcode.
     */
    barcode: string;
    /**
     * ean
     * The variant's EAN.
     */
    ean: string;
    /**
     * upc
     * The variant's UPC.
     */
    upc: string;
    /**
     * allow_backorder
     * Whether the variant can be ordered even if it's not in stock.
     */
    allow_backorder: boolean;
    /**
     * manage_inventory
     * Whether Medusa manages the variant's inventory. If disabled, the variant is always considered in stock.
     */
    manage_inventory: boolean;
    /**
     * inventory_quantity
     * The variant's inventory quantity. This property is only available if you pass `+variants.inventory_quantity` in the `fields` query parameter.
     */
    inventory_quantity?: number;
    /**
     * variant_rank
     * The variant's rank among its siblings.
     */
    variant_rank?: number;
    /** The calculated price's details. */
    calculated_price?: BaseCalculatedPriceSet;
}
/** The region's details. */
export interface StoreRegion {
    /**
     * id
     * The region's ID.
     */
    id: string;
    /**
     * name
     * The region's name.
     */
    name: string;
    /**
     * currency_code
     * The region's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * automatic_taxes
     * Whether taxes are calculated automatically during checkout for carts that belong to this region.
     */
    automatic_taxes?: boolean;
    /** The region's countries. */
    countries?: BaseRegionCountry[];
    /** The region's payment providers. */
    payment_providers?: AdminPaymentProvider[];
    /** The region's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the region was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the region was updated.
     * @format date-time
     */
    updated_at?: string;
}
/** The country's details. */
export interface StoreRegionCountry {
    /**
     * id
     * The country's ID.
     */
    id: string;
    /**
     * iso_2
     * The country's ISO 2.
     * @example "us"
     */
    iso_2?: string;
    /**
     * iso_3
     * The country's ISO 3.
     * @example "usa"
     */
    iso_3?: string;
    /**
     * num_code
     * The country's num code.
     * @example 840
     */
    num_code?: string;
    /**
     * name
     * The country's name.
     */
    name?: string;
    /**
     * display_name
     * The country's display name.
     */
    display_name?: string;
}
/** The details of requesting the order transfer. */
export interface StoreRequestOrderTransfer {
    /**
     * description
     * The transfer's description, which can be shown to the other customer receiving the request.
     */
    description?: string;
}
/** The return's details. */
export interface StoreReturn {
    /**
     * id
     * The return's ID.
     */
    id: string;
    /**
     * order_id
     * The ID of the order this return is created for.
     */
    order_id: string;
    /**
     * status
     * The return's status.
     */
    status?: string;
    /**
     * exchange_id
     * The ID of the associated exchange.
     */
    exchange_id?: string;
    /**
     * location_id
     * The ID of the location the items are returned to.
     */
    location_id?: string;
    /**
     * claim_id
     * The ID of the associated claim.
     */
    claim_id?: string;
    /**
     * display_id
     * The return's display ID.
     */
    display_id: number;
    /**
     * refund_amount
     * The return's refunded amount.
     */
    refund_amount?: number;
    /** The return's items. */
    items: StoreReturnItem[];
    /**
     * received_at
     * The date the return was received.
     */
    received_at: string;
    /**
     * created_at
     * The date the return was created.
     * @format date-time
     */
    created_at: string;
    /**
     * canceled_at
     * The date the return was updated.
     */
    canceled_at: string;
}
/** The return item's details. */
export interface StoreReturnItem {
    /**
     * id
     * The item's ID.
     */
    id: string;
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /**
     * received_quantity
     * The item's received quantity.
     */
    received_quantity: number;
    /**
     * damaged_quantity
     * The item's damaged quantity.
     */
    damaged_quantity: number;
    /**
     * reason_id
     * The ID of the item's reason.
     */
    reason_id?: string;
    /**
     * note
     * A note with more details on why the item is returned.
     */
    note?: string;
    /**
     * item_id
     * The ID of the item in the order.
     */
    item_id: string;
    /**
     * return_id
     * The ID of the return this item belongs to.
     */
    return_id: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The return reason's details. */
export interface StoreReturnReason {
    /**
     * id
     * The return reason's ID.
     */
    id: string;
    /**
     * value
     * The return reason's value.
     */
    value: string;
    /**
     * label
     * The return reason's label.
     */
    label: string;
    /**
     * description
     * The return reason's description.
     */
    description?: string;
    /** The return reason's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the return reason was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the return reason was updated.
     * @format date-time
     */
    updated_at: string;
}
/** The return reason's details. */
export interface StoreReturnReasonResponse {
    /** The return reason's details. */
    return_reason: StoreReturnReason;
}
/** The return's details. */
export interface StoreReturnResponse {
    /** The return's details. */
    return: StoreReturn;
}
/** The shipping option's details. */
export interface StoreShippingOption {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * name
     * The shipping option's name.
     */
    name: string;
    /** The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider. */
    price_type: "flat" | "calculated";
    /**
     * service_zone_id
     * The ID of the service zone the shipping option belongs to.
     */
    service_zone_id: string;
    /**
     * provider_id
     * The ID of the fulfillment provider handling this option.
     */
    provider_id: string;
    /** The fulfillment provider's details. */
    provider: BaseFulfillmentProvider;
    /**
     * shipping_option_type_id
     * The ID of the shipping option's type.
     */
    shipping_option_type_id: string;
    /** The shipping option type's details. */
    type: StoreShippingOptionType;
    /**
     * shipping_profile_id
     * The ID of the associated shipping profile.
     */
    shipping_profile_id: string;
    /**
     * amount
     * The shipping option's amount.
     */
    amount: number;
    /**
     * is_tax_inclusive
     * Whether the amount includes taxes.
     */
    is_tax_inclusive: boolean;
    /** The shipping option's data, useful for the provider handling fulfillment. */
    data: object;
    /** The shipping option's metadata, can hold custom key-value pairs. */
    metadata: object;
}
/** The shipping option's details. */
export interface StoreShippingOptionListResponse {
    /** The shipping option's shipping options. */
    shipping_options: StoreCartShippingOption[];
}
/** The shipping option's details. */
export interface StoreShippingOptionResponse {
    /** The shipping option's details. */
    shipping_option: StoreCartShippingOption;
}
/** The shipping option type's details. */
export interface StoreShippingOptionType {
    /**
     * id
     * The type's ID.
     */
    id: string;
    /**
     * label
     * The type's label.
     */
    label: string;
    /**
     * description
     * The type's description.
     */
    description: string;
    /**
     * code
     * The type's code.
     */
    code: string;
    /**
     * shipping_option_id
     * The ID of the associated shipping option.
     */
    shipping_option_id: string;
    /**
     * created_at
     * The date the type was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the type was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the type was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details to update in the line item. */
export interface StoreUpdateCartLineItem {
    /**
     * quantity
     * The item's quantity.
     */
    quantity: number;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in the customer. */
export interface StoreUpdateCustomer {
    /**
     * company_name
     * The customer's company name.
     */
    company_name?: string;
    /**
     * first_name
     * The customer's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The customer's last name.
     */
    last_name?: string;
    /**
     * phone
     * The customer's phone.
     */
    phone?: string;
    /** The customer's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in the address. */
export interface UpdateAddress {
    /**
     * id
     * The ID of an existing address to update.
     */
    id: string;
    /**
     * customer_id
     * The ID of the customer that this address belongs to.
     */
    customer_id?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "usd"
     */
    country_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The details to update in a cart. */
export interface UpdateCartData {
    /**
     * region_id
     * The ID of the associated region. This can affect the prices and currency code of the cart.
     */
    region_id?: string;
    /**
     * customer_id
     * The ID of the customer that the cart belongs to.
     */
    customer_id?: string;
    /**
     * sales_channel_id
     * The ID of the associated sales channel. Only products available in this channel can be added to the cart.
     */
    sales_channel_id?: string;
    /**
     * email
     * The email of the customer that the cart belongs to.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The cart's currency code.
     * @example "usd"
     */
    currency_code?: string;
    /**
     * shipping_address_id
     * The ID of the cart's shipping address.
     */
    shipping_address_id?: string;
    /**
     * billing_address_id
     * The ID of the cart's billing address.
     */
    billing_address_id?: string;
    billing_address?: CreateAddress | UpdateAddress;
    shipping_address?: CreateAddress | UpdateAddress;
    /** The cart's metadata, ca hold custom key-value pairs. */
    metadata?: object;
}
/** The workflow execution's context. */
export interface WorkflowExecutionContext {
    /** The context's data. */
    data?: {
        /** The step's invokation details. */
        invoke: Record<string, {
            /** The invokation's details. */
            output?: {
                /** the step's output */
                output: any;
                /** the compensation function's input. */
                compensateInput: any;
            };
        }>;
        /** the payload of the transaction. */
        payload?: any;
    };
    /** The context's compensate. */
    compensate: object;
    /** The context's errors. */
    errors: {
        /** The error's details. */
        error: object;
        /**
         * action
         * The error's action.
         */
        action: string;
        /**
         * handlerType
         * The error's handler type.
         */
        handlerType: string;
    }[];
}
/**
 * CommissionAggregate
 * Commission aggregate object
 */
export interface AdminCommissionAggregate {
    /** The unique identifier. */
    id?: string;
    /** Commission rule name. */
    name?: string;
    /** Commission rate type. */
    type?: "flat" | "percentage";
    /** Rule reference type */
    reference?: string;
    /** Rule reference id */
    reference_id?: string;
    /** Indicates if rule is active. */
    is_active?: boolean;
    /** Indicates if rate is calculated including tax. */
    include_tax?: boolean;
    /** Percent of commission. */
    percentage_rate?: number;
    /** Flat rate price id */
    price_id?: string;
    /** Flat rate price currency code */
    price_currency?: string;
    /** Flat rate price amount */
    price_amount?: string;
    /** Min price id */
    min_price_id?: string;
    /** Min price currency code */
    min_price_currency?: string;
    /** Min price amount */
    min_price_amount?: string;
    /** Max price id */
    max_price_id?: string;
    /** Max price currency code */
    max_price_currency?: string;
    /** Max price amount */
    max_price_amount?: string;
    /** Aggregated fee value */
    fee_value?: string;
    /** Aggregated reference value */
    ref_value?: string;
}
/**
 * CommissionRate
 * Commission rate object
 */
export interface AdminCommissionRate {
    /** The unique identifier. */
    id?: string;
    /** Commission rate type. */
    type?: "flat" | "percentage";
    /** Percent of commission. */
    percentage_rate?: number;
    /** Indicates if rate is calculated including tax. */
    include_tax?: boolean;
    /** Flat commission value. */
    price_set_id?: string;
    /** Min commission value. */
    min_price_set_id?: string;
    /** Max commission value. */
    max_price_set_id?: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
export interface AdminCommissionRatePrice {
    /** Currency of the price. */
    currency_code?: string;
    /** The subtitle of the product. */
    amount?: number;
}
/**
 * CommissionRule
 * Commission rule object
 */
export interface AdminCommissionRule {
    /** The unique identifier. */
    id?: string;
    /** Commission rule name. */
    name?: string;
    /** Rule reference type */
    reference?: string;
    /** Rule reference id */
    reference_id?: string;
    /** Indicates if rule is active. */
    is_active?: boolean;
    /** Commission rate object */
    rate?: AdminCommissionRate;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
export interface AdminCreateCommissionRate {
    /** Rate type. */
    type?: "flat" | "percentage";
    /** The subtitle of the product. */
    percentage_rate?: number;
    /** The description of the product. */
    include_tax?: boolean;
    price_set?: AdminCommissionRatePrice;
    min_price_set?: AdminCommissionRatePrice;
    max_price_set?: AdminCommissionRatePrice;
}
export interface AdminCreateCommissionRule {
    /** Commission rule name. */
    name?: string;
    /** Rule reference type */
    reference?: string;
    /** Rule reference id */
    reference_id?: string;
    /** Indicates if rule is active. */
    is_active?: boolean;
    rate?: AdminCreateCommissionRate;
}
export interface AdminCreateRule {
    /** The type of the rule */
    rule_type?: "global_product_catalog" | "require_product_approval" | "product_request_enabled";
    is_enabled?: boolean;
}
/**
 * Order return request
 * A return request object with its properties
 */
export interface AdminOrderReturnRequest {
    /** The unique identifier of the order return request. */
    id?: string;
    /** The id of the submitter */
    customer_id?: string;
    /** Note from the submitter */
    customer_note?: string;
    /** The id of the vendor reviewer */
    vendor_reviewer_id?: string;
    /** Note from the vendor reviewer */
    vendor_reviewer_note?: string;
    /**
     * The date with timezone of the vendor review
     * @format date-time
     */
    vendor_reviewer_date?: string;
    /** The id of the admin reviewer */
    admin_reviewer_id?: string;
    /** Note from the admin reviewer */
    admin_reviewer_note?: string;
    /**
     * The date with timezone of the admin review
     * @format date-time
     */
    admin_reviewer_date?: string;
    status?: "pending" | "refunded" | "withdrawn" | "escalated" | "canceled";
    order?: {
        id?: string;
        customer?: {
            first_name?: string;
            last_name?: string;
        };
    };
    seller?: {
        id?: string;
        name?: string;
    };
    /** The line items to return. */
    line_items?: OrderReturnRequestLineItem[];
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * Request
 * A request object
 */
export interface AdminRequest {
    /** The unique identifier of the request. */
    id?: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
    /** The type of the request object. */
    type?: string;
    /** The request payload. */
    data?: object;
    /** A unique id of the submitter */
    submitter_id?: string;
    /** A unique id of the reviewer */
    reviewer_id?: string | null;
    /** A note provided by the reviewer */
    reviewer_note?: string | null;
    /** The status of the request */
    status?: string;
    seller?: {
        id?: string;
        name?: string;
    };
}
/**
 * Update Request
 * A schema for the admin review of request.
 */
export interface AdminReviewRequest {
    /** Reviewer note. */
    reviewer_note?: string;
    /** A status of the request */
    status?: "accepted" | "rejected";
    /** Assign product to seller (applicable only to Product request) */
    assign_product_to_seller?: boolean;
}
export interface AdminUpdateCommissionRule {
    /** Commission rule name. */
    name?: string;
    /** Indicates if rule is active. */
    is_active?: boolean;
}
/**
 * Update Order Return Request
 * A schema for the update of order return request.
 */
export interface AdminUpdateOrderReturnRequest {
    /** Reviewer note. */
    admin_reviewer_note?: string;
    /** A status of the request */
    status?: "refunded" | "canceled";
}
export interface AdminUpdateRule {
    is_enabled?: boolean;
}
export interface AdminUpsertDefaultCommissionRule {
    /** Commission rule name. */
    name?: string;
    /** Rule reference type */
    reference?: "site";
    /** Rule reference id */
    reference_id?: string;
    /** Indicates if rule is active. */
    is_active?: boolean;
    rate?: AdminCreateCommissionRate;
}
/**
 * Configuration rule
 * A configuration rule object
 */
export interface ConfigurationRule {
    /** The unique identifier of the rule. */
    id?: string;
    /** The unique type of the rule. */
    rule_type?: string;
    /** Flag that indicates if rule is enabled. */
    is_enabled?: boolean;
}
export interface CreateProductOption {
    /** The title of the product option (e.g. "Size", "Color"). */
    title: string;
    /** The values that the product option can take (e.g. ["Small", "Medium", "Large"]). */
    values: string[];
}
export interface CreateProductVariant {
    /** The title of the variant. */
    title?: string;
    /** The unique SKU for the variant. */
    sku?: string;
    /** The EAN number of the variant. */
    ean?: string;
    /** The UPC number of the variant. */
    upc?: string;
    /** The barcode of the variant. */
    barcode?: string;
    /** The HS code of the variant. */
    hs_code?: string;
    /** The MID code of the variant. */
    mid_code?: string;
    /**
     * Whether the variant can be backordered.
     * @default false
     */
    allow_backorder?: boolean;
    /**
     * Whether Medusa should keep track of inventory for this variant.
     * @default true
     */
    manage_inventory?: boolean;
    /** The rank of the variant. */
    variant_rank?: number;
    /** The weight of the variant. */
    weight?: number;
    /** The length of the variant. */
    length?: number;
    /** The height of the variant. */
    height?: number;
    /** The width of the variant. */
    width?: number;
    /** The country of origin of the variant. */
    origin_country?: string;
    /** The material composition of the variant. */
    material?: string;
    /** Additional metadata for the variant. */
    metadata?: object;
    /** The prices of the variant. */
    prices?: CreateVariantPrice[];
    /** The options of the variant. */
    options?: object;
    /** The inventory items of the variant. */
    inventory_items?: {
        inventory_item_id?: string;
        required_quantity?: number;
    }[];
}
export interface CreateShippingOptionPriceWithCurrency {
    /** The currency code for the price. */
    currency_code: string;
    /** The amount of the price. */
    amount: number;
}
export interface CreateShippingOptionTypeObject {
    /** The label of the shipping option type. */
    label: string;
    /** The description of the shipping option type. */
    description: string;
    /** The code of the shipping option type. */
    code: string;
}
export interface CreateVariantPrice {
    /** The currency code of the price. */
    currency_code: string;
    /** The amount of the price. */
    amount: number;
    /** The minimum quantity required to get this price. */
    min_quantity?: number | null;
    /** The maximum quantity allowed to get this price. */
    max_quantity?: number | null;
    /** Additional rules that apply to the price. */
    rules?: Record<string, string>;
}
export interface GeoZoneBase {
    /** The country code of the geo zone. */
    country_code: string;
}
export interface GeoZoneCity {
    /** The country code of the geo zone. */
    country_code: string;
    /** The type of the geo zone. */
    type: "city";
    /** The province code of the geo zone. */
    province_code: string;
    /** The city name of the geo zone. */
    city: string;
}
export interface GeoZoneCountry {
    /** The country code of the geo zone. */
    country_code: string;
    /** The type of the geo zone. */
    type: "country";
}
export interface GeoZoneProvince {
    /** The country code of the geo zone. */
    country_code: string;
    /** The type of the geo zone. */
    type: "province";
    /** The province code of the geo zone. */
    province_code: string;
}
export interface GeoZoneZip {
    /** The country code of the geo zone. */
    country_code: string;
    /** The type of the geo zone. */
    type: "zip";
    /** The province code of the geo zone. */
    province_code: string;
    /** The city name of the geo zone. */
    city: string;
    /** The postal code expression for the geo zone. */
    postal_expression: object;
}
/**
 * Order return request
 * A return request object with its properties
 */
export interface OrderReturnRequest {
    /** The unique identifier of the order return request. */
    id?: string;
    /** The id of the submitter */
    customer_id?: string;
    /** Note from the submitter */
    customer_note?: string;
    /** The id of the vendor reviewer */
    vendor_reviewer_id?: string;
    /** Note from the vendor reviewer */
    vendor_reviewer_note?: string;
    /**
     * The date with timezone of the vendor review
     * @format date-time
     */
    vendor_reviewer_date?: string;
    /** The id of the admin reviewer */
    admin_reviewer_id?: string;
    /** Note from the admin reviewer */
    admin_reviewer_note?: string;
    /**
     * The date with timezone of the admin review
     * @format date-time
     */
    admin_reviewer_date?: string;
    status?: "pending" | "refunded" | "withdrawn" | "escalated" | "canceled";
    order?: {
        id?: string;
    };
    /** The line items to return. */
    line_items?: OrderReturnRequestLineItem[];
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * Line item of the order return request
 * Line item object with its properties
 */
export interface OrderReturnRequestLineItem {
    /** The unique identifier of the order return request. */
    id?: string;
    /** The id of the line item in the order */
    line_item_id?: string;
    /** The amount of the items to return */
    quantity?: number;
}
export interface ProductCategoryRequest {
    /** The type of the request */
    type: "product_category";
    data: {
        /** The name of the product category */
        name?: string;
        /** The description of the product category */
        handle?: string;
        /** The description of the product category */
        description?: string;
        /** The id of the parent category */
        parent_category_id?: string;
    };
}
export interface ProductCollectionRequest {
    /** The type of the request */
    type: "product_collection";
    data: {
        /** The title of the product collection */
        title?: string;
        /** The description of the product category */
        handle?: string;
    };
}
export interface ProductRequest {
    /** The type of the request */
    type: "product";
    data: VendorCreateProduct;
}
export interface ProductTypeRequest {
    /** The type of the request */
    type: "product_type";
    data: {
        /** The product type value */
        value?: string;
        /** The product type metadata */
        metadata?: object;
    };
}
/**
 * Seller/product review
 * A product/seller review with rating and comment
 */
export interface Review {
    /** The unique identifier of the review. */
    id?: string;
    /** The rating associated with the review. */
    rating?: number;
    /** Indicates if review reference is seller or product */
    reference?: "seller" | "product";
    /** Customer comment on resource */
    customer_note?: string | null;
    /** Id of the customer who left the review */
    customer_id?: string;
    /** Seller response to customer review */
    seller_note?: string | null;
}
export interface ReviewRemoveRequest {
    /** The type of the request */
    type: "review_remove";
    data: {
        /** Id of the review to remove */
        review_id?: string;
        /** The reason to remove review */
        reason?: string;
    };
}
/**
 * Create Order Return Request
 * A schema for the creation of order return request.
 */
export interface StoreCreateOrderReturnRequest {
    /** ID of the order */
    order_id?: string;
    /** Customer note. */
    customer_note?: string;
    /** ID of the shipping option */
    shipping_option_id?: string;
    /** Array of items to return */
    line_items?: {
        line_item_id?: string;
        quantity?: number;
    }[];
}
/**
 * Create Review
 * A schema for creating a review.
 */
export interface StoreCreateReview {
    /** Indicates if review reference is seller or product */
    reference?: "seller" | "product";
    /** The unique identifier of reference. */
    reference_id?: string;
    /**
     * The customer rating on the resource.
     * @min 1
     * @max 5
     */
    rating?: number;
    /**
     * The customer note on the resource.
     * @maxLength 300
     */
    customer_note?: string;
}
/**
 * Update Review
 * A schema for the review update.
 */
export interface StoreUpdateReview {
    /**
     * The customer rating on the resource.
     * @min 1
     * @max 5
     */
    rating?: number;
    /**
     * The customer note on the resource.
     * @maxLength 300
     */
    customer_note?: string;
}
export interface UpdateProductOption {
    /** The ID of the option to update. */
    id?: string;
    /** The title of the product option (e.g. "Size", "Color"). */
    title?: string;
    /** The values that the product option can take (e.g. ["Small", "Medium", "Large"]). */
    values?: string[];
}
export interface UpdateProductVariant {
    /** The ID of the variant to update. */
    id?: string;
    /** The title of the variant. */
    title?: string;
    /** The prices of the variant. */
    prices?: UpdateVariantPrice[];
    /** The unique SKU for the variant. */
    sku?: string | null;
    /** The EAN number of the variant. */
    ean?: string | null;
    /** The UPC number of the variant. */
    upc?: string | null;
    /** A generic GTIN field for the variant. */
    barcode?: string | null;
    /** The Harmonized System code of the variant. */
    hs_code?: string | null;
    /** The Manufacturer Identification code of the variant. */
    mid_code?: string | null;
    /** Whether the variant can be backordered. */
    allow_backorder?: boolean;
    /** Whether Medusa should keep track of the inventory of this variant. */
    manage_inventory?: boolean;
    /** The rank of the variant when presented in a list of variants. */
    variant_rank?: number;
    /** The weight of the variant. */
    weight?: number | null;
    /** The length of the variant. */
    length?: number | null;
    /** The height of the variant. */
    height?: number | null;
    /** The width of the variant. */
    width?: number | null;
    /** The country of origin of the variant. */
    origin_country?: string | null;
    /** The material composition of the variant. */
    material?: string | null;
    /** An optional set of key-value pairs with additional information. */
    metadata?: object | null;
    /** The options of the variant. */
    options?: Record<string, string>;
}
export interface UpdateVariantPrice {
    /** The ID of the price to update. */
    id?: string;
    /** The currency code of the price. */
    currency_code?: string;
    /** The amount of the price. */
    amount?: number;
    /** The minimum quantity required to get this price. */
    min_quantity?: number | null;
    /** The maximum quantity allowed to get this price. */
    max_quantity?: number | null;
    /** Additional rules that apply to the price. */
    rules?: Record<string, string>;
}
export interface UpsertStockLocationAddress {
    /** Address line 1 */
    address_1: string;
    /** Address line 2 */
    address_2?: string | null;
    /** Company name */
    company?: string | null;
    /** City */
    city?: string | null;
    /** Country code */
    country_code: string;
    /** Phone number */
    phone?: string | null;
    /** Postal code */
    postal_code?: string | null;
    /** Province */
    province?: string | null;
}
export interface VendorAcceptMemberInvite {
    /** The invitation token to accept. */
    token: string;
    /** The name of the member accepting the invite. */
    name: string;
}
/**
 * Promotion Application Method
 * Application method object
 */
export interface VendorApplicationMethod {
    /** The unique identifier of the item. */
    id?: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
    /** Description of the promotion. */
    description?: string;
    /** The percentage value of the promotion. */
    value?: number;
    /** The max quantity of the items. */
    max_quantity?: string;
    /** Apply to quantity of the items. */
    apply_to_quantity?: string;
    /** Buy ruyles min quantity of the items. */
    buy_rules_min_quantity?: string;
    /** The type of the application method. */
    type?: string;
    /** The target type of the application method. */
    target_type?: string;
    /** The allocation of the application method. */
    allocation?: string;
    /** Promotion target rules. */
    target_rules?: VendorPromotionRule[];
}
export interface VendorAssignBrandName {
    /** The name of the brand. */
    brand_name: string;
}
/** The campaign's details. */
export interface VendorCampaign {
    /**
     * id
     * The campaign's ID.
     */
    id?: string;
    /**
     * name
     * The campaign's name.
     */
    name?: string;
    /**
     * description
     * The campaign's description.
     */
    description?: string;
    /**
     * currency
     * The campaign's currency.
     */
    currency?: string;
    /**
     * campaign_identifier
     * The campaign's identifier.
     */
    campaign_identifier?: string;
    /**
     * starts_at
     * The date and time that the campaign starts.
     */
    starts_at?: string;
    /**
     * ends_at
     * The date and time that the campaign ends.
     */
    ends_at?: string;
    /** The campaign's budget. */
    budget?: {
        /**
         * id
         * The budget's ID.
         */
        id: string;
        /** The budget's type. `spend` means the limit is set on the total amount discounted by the campaign's promotions; `usage` means the limit is set on the total number of times the campaign's promotions can be used. */
        type: "spend" | "usage";
        /**
         * currency_code
         * The budget's currency code.
         */
        currency_code: string;
        /**
         * limit
         * The budget's limit.
         */
        limit: number;
        /**
         * used
         * How much of the budget has been used. If the limit is `spend`, this property holds the total amount discounted so far. If the limit is `usage`, it holds the number of times the campaign's promotions have been used so far.
         */
        used: number;
    };
    /**
     * created_at
     * The date the campaign was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the campaign was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the campaign was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
export interface VendorCreateApplicationMethod {
    /** Description of the promotion. */
    description?: string;
    /** The percentage value of the promotion. */
    value?: number;
    /** The max quantity of the items. */
    max_quantity?: string;
    /** Apply to quantity of the items. */
    apply_to_quantity?: string;
    /** Buy ruyles min quantity of the items. */
    buy_rules_min_quantity?: string;
    /** The type of the application method. */
    type?: "percentage";
    /** The target type of the application method. */
    target_type?: "items";
    /** The allocation of the application method. */
    allocation?: "each" | "across";
    /** Promotion target rules. */
    target_rules?: VendorCreatePromotionRule[];
}
export interface VendorCreateCampaign {
    /** The campaign's name. */
    name?: string;
    /** The campaign's identifier. */
    campaign_identifier?: string;
    /** The campaign's description. */
    description?: string;
    /** The date and time that the campaign starts. */
    starts_at?: string;
    /** The date and time that the campaign ends. */
    ends_at?: string;
    budget?: VendorCreateCampaignBudget;
}
export interface VendorCreateCampaignBudget {
    /** The budget's type. */
    type?: "spend" | "usage";
    /** The buget's limit. */
    limit?: number;
    /** The budget's currency_code. */
    currency_code?: string;
}
export interface VendorCreateFulfillment {
    /** The number of items to return. Default 50. */
    requires_shipping?: boolean;
    /** The number of items to skip before starting the response. Default 0. */
    location_id?: string;
    /** Sales channels to associate the product with. */
    items?: {
        id?: string;
        quantity?: number;
    }[];
}
/**
 * VendorCreateInventoryLevel
 * The inventory level details.
 */
export interface VendorCreateInventoryLevel {
    /**
     * location_id
     * The inventory level locationId.
     */
    location_id?: string;
    /**
     * stocked_quantity
     * The inventory level in stock.
     */
    stocked_quantity?: number;
    /**
     * reserved_quantity
     * The quantity reserved from the available stocked_quantity.
     */
    reserved_quantity?: number;
}
export interface VendorCreateOnboarding {
    /** Additional data needed by the payment provider to create onboarding. */
    context?: object | null;
}
export interface VendorCreatePayoutAccount {
    /** Additional data needed by the payment provider to create a payment account. */
    context?: object | null;
}
export interface VendorCreatePriceList {
    /**
     * title
     * The price list's title.
     */
    title?: string;
    /**
     * description
     * The price list's description.
     */
    description?: string;
    /** The price list's rules. */
    rules?: object;
    /**
     * starts_at
     * The date the price list starts.
     */
    starts_at?: string;
    /**
     * ends_at
     * The date the price list ends.
     */
    ends_at?: string;
    /** The price list's status. */
    status?: "draft" | "active";
    /** The price list's type. */
    type?: "sale" | "override";
    /** The price list's prices. */
    prices?: VendorCreatePriceListPrice[];
}
export interface VendorCreatePriceListPrice {
    /**
     * variant_id
     * The ID of the product variant this price list is for.
     */
    variant_id?: string;
    /** The price's rules. */
    rules?: object;
    /**
     * currency_code
     * The price's currency code.
     * @example "usd"
     */
    currency_code?: string;
    /**
     * amount
     * The price's amount.
     */
    amount?: number;
    /**
     * min_quantity
     * The minimum quantity that must be available in the cart for the price to be applied.
     */
    min_quantity?: number;
    /**
     * max_quantity
     * The maximum quantity allowed to be available in the cart for the price to be applied.
     */
    max_quantity?: number;
}
export interface VendorCreateProduct {
    /** The title of the product. */
    title: string;
    /** The subtitle of the product. */
    subtitle?: string;
    /** The description of the product. */
    description?: string;
    /**
     * Whether the product is a gift card.
     * @default false
     */
    is_giftcard?: boolean;
    /**
     * Whether the product can be discounted.
     * @default true
     */
    discountable?: boolean;
    /** Images of the product. */
    images?: {
        url: string;
    }[];
    /** The thumbnail of the product. */
    thumbnail?: string;
    /** A unique handle to identify the product. */
    handle?: string;
    /**
     * The status of the product.
     * @default "draft"
     */
    status?: "draft" | "proposed" | "published" | "rejected";
    /** The external ID of the product. */
    external_id?: string;
    /** The ID of the product type. */
    type_id?: string;
    /** The ID of the collection the product belongs to. */
    collection_id?: string;
    /** Categories the product belongs to. */
    categories?: {
        id: string;
    }[];
    /** Tags associated with the product. */
    tags?: {
        id: string;
    }[];
    /** Product options. */
    options?: CreateProductOption[];
    /** Product variants. */
    variants?: CreateProductVariant[];
    /** The weight of the product. */
    weight?: number;
    /** The length of the product. */
    length?: number;
    /** The height of the product. */
    height?: number;
    /** The width of the product. */
    width?: number;
    /** The HS code of the product. */
    hs_code?: string;
    /** The MID code of the product. */
    mid_code?: string;
    /** The country of origin of the product. */
    origin_country?: string;
    /** The material composition of the product. */
    material?: string;
    /** Additional metadata for the product. */
    metadata?: object;
    /** Sales channels to associate the product with. */
    sales_channels?: {
        id: string;
    }[];
}
export interface VendorCreateProductTag {
    /** The title of the product tag. */
    value: string;
    /** Product tag metadata. */
    metadata?: object;
}
export interface VendorCreatePromotion {
    /** The code of the promotion. */
    code?: string;
    /**
     * Whether the promotion is applied automatically.
     * @default false
     */
    is_automatic?: boolean;
    /** The type of the promotion. */
    type?: "standard";
    application_method?: VendorCreateApplicationMethod;
    /** Promotion rules. */
    rules?: VendorCreatePromotionRule[];
}
export interface VendorCreatePromotionRule {
    /** The description of the rule. */
    description?: string;
    /** The attribute of the rule. */
    attribute?: string;
    /** The operator of the rule. */
    operator?: "in" | "eq";
    /** Rule values. */
    values?: string[];
}
export interface VendorCreateRequest {
    /** The resource to be created by request */
    request: ProductRequest | ProductCollectionRequest | ProductCategoryRequest | ReviewRemoveRequest;
}
export interface VendorCreateSeller {
    /**
     * The name of the seller.
     * @minLength 1
     */
    name: string;
    /** A description of the seller. */
    description?: string | null;
    /** Store contact email. */
    email?: string;
    /** Store contact phone. */
    phone?: string;
    /** URL to the seller's photo. */
    photo?: string | null;
    /** Seller address line. */
    address_line?: string | null;
    /** Seller postal code. */
    postal_code?: string | null;
    /** Seller city. */
    city?: string | null;
    /** Seller state. */
    state?: string | null;
    /** Seller country code. */
    country_code?: string | null;
    /** Seller tax id. */
    tax_id?: string | null;
    member: {
        /** The name of the member. */
        name: string;
        /** The email of the member. */
        email: string;
        /** The member's biography. */
        bio?: string | null;
        /** The member's phone number. */
        phone?: string | null;
        /** URL to the member's photo. */
        photo?: string | null;
    };
}
export interface VendorCreateServiceZone {
    /** The name of the service zone. */
    name: string;
    /** The geo zones that belong to the service zone. */
    geo_zones?: (GeoZoneCountry | GeoZoneProvince | GeoZoneCity | GeoZoneZip)[];
}
export interface VendorCreateShippingOption {
    /** The name of the shipping option. */
    name: string;
    /** The ID of the shipping profile. */
    shipping_profile_id: string;
    /** The ID of the fulfillment provider. */
    provider_id: string;
    /** The prices of the shipping option. */
    prices: CreateShippingOptionPriceWithCurrency[];
    type: CreateShippingOptionTypeObject;
}
export interface VendorCreateStockLocation {
    /** Name of the stock location */
    name: string;
    address?: UpsertStockLocationAddress;
    /** ID of an existing address to use */
    address_id?: string | null;
    /** Additional metadata */
    metadata?: object | null;
}
export interface VendorCreateStockLocationFulfillmentSet {
    /** Name of the fulfillment set */
    name: string;
    /** Type of the fulfillment set */
    type: string;
}
/**
 * Vendor currency details
 * Currency object.
 */
export interface VendorCurrency {
    /** The unique identifier of the currency. */
    id?: string;
    /** Indicates if currency is default in the store. */
    is_default?: boolean;
    /** The currency code. */
    currency_code?: string;
}
/**
 * VendorCustomer
 * Customer who placed an order in sellers store.
 */
export interface VendorCustomer {
    /** The unique identifier of the customer. */
    id?: string;
    /** Company name */
    company_name?: string | null;
    /** First name */
    first_name?: string;
    /** Last name */
    last_name?: string;
    /** Email */
    email?: string;
    /** Phone number */
    phone?: string | null;
    /** Indicates if customer has account */
    has_account?: boolean;
    /** The customer's groups. */
    groups?: VendorCustomerGroup[];
}
/**
 * VendorCustomerGroup
 * Customer group details.
 */
export interface VendorCustomerGroup {
    /** The unique identifier of the customer. */
    id?: string;
    /** Company name */
    name?: string | null;
}
/** The order's overview. */
export interface VendorCustomerOrderOverview {
    /**
     * id
     * The order's ID.
     */
    id?: string;
    /**
     * version
     * The order's version.
     */
    version?: number;
    /**
     * region_id
     * The ID of the region associated with the order.
     */
    region_id?: string;
    /**
     * status
     * The status of the order.
     */
    status?: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id?: string;
    /**
     * sales_channel_id
     * The ID of the sales channel the order is placed in.
     */
    sales_channel_id?: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The order's currency code.
     */
    currency_code?: string;
    /**
     * display_id
     * The order's display ID.
     */
    display_id?: number;
    /**
     * is_draft_order
     * Indicates if order is draft.
     */
    is_draft_order?: boolean;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * Vendor statistics
 * Statistics object.
 */
export interface VendorDateStatistics {
    /** Timestamp of the count */
    date?: string;
    /** Count of the records */
    count?: string;
}
/**
 * VendorFulfillmentAddress
 * An address's details.
 */
export interface VendorFulfillmentAddress {
    /**
     * id
     * The address's ID.
     */
    id?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     */
    country_code?: string;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the address was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/**
 * VendorFulfillmentItem
 * The details of a fulfillment's item.
 */
export interface VendorFulfillmentItem {
    /**
     * id
     * The item's ID.
     */
    id?: string;
    /**
     * title
     * The item's title.
     */
    title?: string;
    /**
     * quantity
     * The item's quantity to be fulfilled.
     */
    quantity?: number;
    /**
     * sku
     * The item's SKU.
     */
    sku?: string;
    /**
     * barcode
     * The item's barcode.
     */
    barcode?: string;
    /**
     * line_item_id
     * The ID of the order's line item to be fulfilled.
     */
    line_item_id?: string;
    /**
     * inventory_item_id
     * The ID of the inventory item of the underlying product variant.
     */
    inventory_item_id?: string;
    /**
     * fulfillment_id
     * The ID of the fulfillment the item belongs to.
     */
    fulfillment_id?: string;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the item was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/**
 * VendorFulfillmentLabel
 * The details of a fulfillmet's shipment label.
 */
export interface VendorFulfillmentLabel {
    /**
     * id
     * The label's ID.
     */
    id?: string;
    /**
     * tracking_number
     * The label's tracking number.
     */
    tracking_number?: string;
    /**
     * tracking_url
     * The label's tracking URL.
     */
    tracking_url?: string;
    /**
     * label_url
     * The label's URL.
     */
    label_url?: string;
    /**
     * fulfillment_id
     * The ID of the fulfillment the label is associated with.
     */
    fulfillment_id?: string;
    /**
     * created_at
     * The date the label was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the label was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the label was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/**
 * VendorFulfillmentProvider
 * The fulfillment provider's details.
 */
export interface VendorFulfillmentProvider {
    /**
     * id
     * The provider's ID.
     */
    id?: string;
    /**
     * is_enabled
     * The provider's is enabled.
     */
    is_enabled?: boolean;
}
/** The service zone's fulfillment set. */
export interface VendorFulfillmentSet {
    /**
     * id
     * The fulfillment set's ID.
     */
    id: string;
    /**
     * name
     * The fulfillment set's name.
     */
    name: string;
    /**
     * type
     * The fulfillment set's type.
     */
    type: string;
    /** The stock location's details. */
    location: VendorStockLocation;
    /** The fulfillment set's service zones. */
    service_zones: VendorServiceZone[];
    /**
     * created_at
     * The fulfillment set's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The fulfillment set's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The fulfillment set's deleted at.
     * @format date-time
     */
    deleted_at: string;
}
/** The geo zone's geo zones. */
export interface VendorGeoZone {
    /**
     * id
     * The geo zone's ID.
     */
    id: string;
    /** The geo zone's type. */
    type: "country" | "province" | "city" | "zip";
    /**
     * country_code
     * The geo zone's country code.
     */
    country_code: string;
    /**
     * province_code
     * The geo zone's province code.
     */
    province_code: string;
    /**
     * city
     * The geo zone's city.
     */
    city: string;
    /** The geo zone's postal expression. */
    postal_expression: object;
    /**
     * created_at
     * The geo zone's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The geo zone's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The geo zone's deleted at.
     * @format date-time
     */
    deleted_at: string;
}
export interface VendorInviteMember {
    /**
     * The email address of the member to invite.
     * @format email
     */
    email: string;
    /** The role to assign to the invited member. */
    role: "owner" | "admin" | "member";
}
/**
 * Member
 * A member object with its properties
 */
export interface VendorMember {
    /** The unique identifier of the member. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /** The role of the member. */
    role: "owner" | "admin" | "member";
    /**
     * The email of the member.
     * @format email
     */
    email: string;
    /** The name of the member. */
    name?: string | null;
    /** The member's biography. */
    bio?: string | null;
    /** URL to the member's photo. */
    photo?: string | null;
    /** The seller associated with the member. */
    seller?: VendorSeller | null;
}
/**
 * Member Invite
 * A member invite object with its properties
 */
export interface VendorMemberInvite {
    /** The unique identifier of the member invite. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The email of the invited member.
     * @format email
     */
    email: string;
    /** The role assigned to the invited member. */
    role: "owner" | "admin" | "member";
    /** The seller associated with the invite. */
    seller?: VendorSeller | null;
    /** The unique token used to accept the invite. */
    token: string;
    /**
     * The date with timezone at which the invite expires.
     * @format date-time
     */
    expires_at: string;
    /** Whether the invite has been accepted. */
    accepted: boolean;
}
/**
 * Onboarding
 * An onboarding object with its properties
 */
export interface VendorOnboarding {
    /** The unique identifier of the onboarding. */
    id: string;
    /** Additional data stored with the onboarding. */
    data?: object | null;
    /** Additional context stored with the onboarding. */
    context?: object | null;
    /** The payout account this onboarding belongs to. */
    payout_account?: VendorPayoutAccount;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * VendorOrderAddress
 * An order address.
 */
export interface VendorOrderAddress {
    /**
     * id
     * The address's ID.
     */
    id?: string;
    /**
     * customer_id
     * The ID of the customer this address belongs to.
     */
    customer_id?: string;
    /**
     * first_name
     * The address's first name.
     */
    first_name?: string;
    /**
     * last_name
     * The address's last name.
     */
    last_name?: string;
    /**
     * phone
     * The address's phone.
     */
    phone?: string;
    /**
     * company
     * The address's company.
     */
    company?: string;
    /**
     * address_1
     * The address's first line.
     */
    address_1?: string;
    /**
     * address_2
     * The address's second line.
     */
    address_2?: string;
    /**
     * city
     * The address's city.
     */
    city?: string;
    /**
     * country_code
     * The address's country code.
     * @example "us"
     */
    country_code?: string;
    /** The country's details. */
    country?: VendorOrderCountryCode;
    /**
     * province
     * The address's province.
     */
    province?: string;
    /**
     * postal_code
     * The address's postal code.
     */
    postal_code?: string;
    /** The address's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the address was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the address was updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * VendorOrderCountryCode
 * The country's details.
 */
export interface VendorOrderCountryCode {
    /**
     * id
     * The country's ID.
     */
    id?: string;
    /**
     * iso_2
     * The country's iso 2.
     * @example "us"
     */
    iso_2?: string;
    /**
     * iso_3
     * The country's iso 3.
     * @example "usa"
     */
    iso_3?: string;
    /**
     * num_code
     * The country's num code.
     * @example 840
     */
    num_code?: string;
    /**
     * name
     * The country's name.
     */
    name?: string;
    /**
     * display_name
     * The country's display name.
     */
    display_name?: string;
}
/** The order's details. */
export interface VendorOrderDetails {
    /** The order's payment collections. */
    payment_collections?: VendorOrderPaymentCollection[];
    /** The order's fulfillments. */
    fulfillments?: VendorOrderFulfillment[];
    /** An order address. */
    shipping_address?: VendorOrderAddress;
    /** An order address. */
    billing_address?: VendorOrderAddress;
    /**
     * id
     * The order's ID.
     */
    id?: string;
    /**
     * version
     * The order's version.
     */
    version?: number;
    /**
     * region_id
     * The ID of the region associated with the order.
     */
    region_id?: string;
    /**
     * customer_id
     * The ID of the customer that placed the order.
     */
    customer_id?: string;
    /**
     * sales_channel_id
     * The ID of the sales channel the order is placed in.
     */
    sales_channel_id?: string;
    /**
     * email
     * The email of the customer that placed the order.
     * @format email
     */
    email?: string;
    /**
     * currency_code
     * The order's currency code.
     */
    currency_code?: string;
    /**
     * display_id
     * The order's display ID.
     */
    display_id?: number;
    /** The order's items. */
    items?: VendorOrderLineItem[];
    /** The order's shipping methods. */
    shipping_methods?: VendorOrderShippingMethod[];
    /** The order's payment status. */
    payment_status?: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized" | "captured" | "partially_captured" | "partially_refunded" | "refunded" | "requires_action";
    /** The order's fulfillment status. */
    fulfillment_status?: "canceled" | "not_fulfilled" | "partially_fulfilled" | "fulfilled" | "partially_shipped" | "shipped" | "partially_delivered" | "delivered";
    /** The order's summary details. */
    summary?: VendorOrderSummary;
    /** The order's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the order was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the order was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * original_item_total
     * The total of the order's items including taxes, excluding promotions.
     */
    original_item_total?: number;
    /**
     * original_item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    original_item_subtotal?: number;
    /**
     * original_item_tax_total
     * The tax total of the order's items excluding promotions.
     */
    original_item_tax_total?: number;
    /**
     * item_total
     * The total of the order's items including taxes and promotions.
     */
    item_total?: number;
    /**
     * item_subtotal
     * The total of the order's items excluding taxes, including promotions.
     */
    item_subtotal?: number;
    /**
     * item_tax_total
     * The tax total of the order's items including promotions.
     */
    item_tax_total?: number;
    /**
     * original_total
     * The order's total excluding promotions, including taxes.
     */
    original_total?: number;
    /**
     * original_subtotal
     * The order's total excluding taxes, including promotions.
     */
    original_subtotal?: number;
    /**
     * original_tax_total
     * The order's tax total, excluding promotions.
     */
    original_tax_total?: number;
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total?: number;
    /**
     * subtotal
     * The order's total excluding taxes, including promotions.
     */
    subtotal?: number;
    /**
     * tax_total
     * The order's tax total including promotions.
     */
    tax_total?: number;
    /**
     * discount_total
     * The order's discount or promotions total.
     */
    discount_total?: number;
    /**
     * discount_tax_total
     * The tax total of order's discount or promotion.
     */
    discount_tax_total?: number;
    /**
     * gift_card_total
     * The order's gift card total.
     */
    gift_card_total?: number;
    /**
     * gift_card_tax_total
     * The tax total of the order's gift card.
     */
    gift_card_tax_total?: number;
    /**
     * shipping_total
     * The order's shipping total including taxes and promotions.
     */
    shipping_total?: number;
    /**
     * shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    shipping_subtotal?: number;
    /**
     * shipping_tax_total
     * The tax total of the order's shipping.
     */
    shipping_tax_total?: number;
    /**
     * original_shipping_total
     * The order's shipping total including taxes, excluding promotions.
     */
    original_shipping_total?: number;
    /**
     * original_shipping_subtotal
     * The order's shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal?: number;
    /**
     * original_shipping_tax_total
     * The tax total of the order's shipping excluding promotions.
     */
    original_shipping_tax_total?: number;
}
/**
 * VendorOrderFulfillment
 * The fulfillment's details.
 */
export interface VendorOrderFulfillment {
    /**
     * id
     * The fulfillment's ID.
     */
    id?: string;
    /**
     * location_id
     * The ID of the location the fulfillment's items are shipped from.
     */
    location_id?: string;
    /**
     * provider_id
     * The ID of the fulfillment provider handling this fulfillment.
     */
    provider_id?: string;
    /**
     * shipping_option_id
     * The ID of the shipping option this fulfillment is created for.
     */
    shipping_option_id?: string;
    /** The fulfillment provider's details. */
    provider?: VendorFulfillmentProvider;
    /** An address's details. */
    delivery_address?: VendorFulfillmentAddress;
    /** The fulfillment's items. */
    items?: VendorFulfillmentItem[];
    /** The fulfillment's shipment labels. */
    labels?: VendorFulfillmentLabel[];
    /**
     * packed_at
     * The date the fulfillment was packed at.
     */
    packed_at?: string;
    /**
     * shipped_at
     * The date the fulfillment was shipped at.
     */
    shipped_at?: string;
    /**
     * delivered_at
     * The date the fulfillment was delivered at.
     */
    delivered_at?: string;
    /**
     * canceled_at
     * The date the fulfillment was canceled at.
     */
    canceled_at?: string;
    /** The fulfillment's data, useful for the third-party provider handling the fulfillment. */
    data?: object;
    /** The fulfillment's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * created_at
     * The date the fulfillment was created at.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the fulfillment was updated at.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the fulfillment was deleted at.
     * @format date-time
     */
    deleted_at?: string;
}
/**
 * VendorOrderLineItem
 * The item's details.
 */
export interface VendorOrderLineItem {
    /**
     * id
     * The item's ID.
     */
    id?: string;
    /**
     * title
     * The item's title.
     */
    title?: string;
    /**
     * subtitle
     * The item's subtitle.
     */
    subtitle?: string;
    /**
     * thumbnail
     * The URL of the item's thumbnail.
     */
    thumbnail?: string;
    /** A product variant object with its properties */
    variant?: VendorProductVariant;
    /**
     * variant_id
     * The ID of the associated variant.
     */
    variant_id?: string;
    /** A product object with its properties */
    product?: VendorProduct;
    /**
     * product_id
     * The ID of the associated product.
     */
    product_id?: string;
    /**
     * product_title
     * The item's product title.
     */
    product_title?: string;
    /**
     * product_description
     * The item's product description.
     */
    product_description?: string;
    /**
     * product_subtitle
     * The item's product subtitle.
     */
    product_subtitle?: string;
    /**
     * product_type
     * The item's product type.
     */
    product_type?: string;
    /**
     * product_collection
     * The ID of the collection the item's product belongs to.
     */
    product_collection?: string;
    /**
     * product_handle
     * The item's product handle.
     */
    product_handle?: string;
    /**
     * variant_sku
     * The item's variant SKU.
     */
    variant_sku?: string;
    /**
     * variant_barcode
     * The item's variant barcode.
     */
    variant_barcode?: string;
    /**
     * variant_title
     * The item's variant title.
     */
    variant_title?: string;
    /**
     * The values of the item variant's options.
     * @example {"Color":"Blue"}
     */
    variant_option_values?: object;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping?: boolean;
    /**
     * is_discountable
     * Whether the item is discountable.
     */
    is_discountable?: boolean;
    /**
     * is_tax_inclusive
     * Whether the item is tax inclusive.
     */
    is_tax_inclusive?: boolean;
    /**
     * compare_at_unit_price
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
    /**
     * unit_price
     * The item's unit price.
     */
    unit_price?: number;
    /**
     * quantity
     * The item's quantity.
     */
    quantity?: number;
    detail?: object;
    /**
     * created_at
     * The date the item was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the item was updated.
     * @format date-time
     */
    updated_at?: string;
    /** The item's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * original_total
     * The item's total including taxes, excluding promotions.
     */
    original_total?: number;
    /**
     * original_subtotal
     * The item's total excluding taxes, including promotions.
     */
    original_subtotal?: number;
    /**
     * original_tax_total
     * The total taxes of the item, excluding promotions.
     */
    original_tax_total?: number;
    /**
     * item_total
     * The total taxes of the item, including promotions.
     */
    item_total?: number;
    /**
     * item_subtotal
     * The item's total excluding taxes, including promotions.
     */
    item_subtotal?: number;
    /**
     * item_tax_total
     * The total taxes of the item, including promotions.
     */
    item_tax_total?: number;
    /**
     * total
     * The item's total, including taxes and promotions.
     */
    total?: number;
    /**
     * subtotal
     * The item's subtotal excluding taxes, including promotions.
     */
    subtotal?: number;
    /**
     * tax_total
     * The tax total of the item including promotions.
     */
    tax_total?: number;
    /**
     * discount_total
     * The total discount amount of the item.
     */
    discount_total?: number;
    /**
     * discount_tax_total
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total?: number;
    /**
     * refundable_total
     * The total refundable amount of the item's total.
     */
    refundable_total?: number;
    /**
     * refundable_total_per_unit
     * The total refundable amount of the item's total for a single quantity.
     */
    refundable_total_per_unit?: number;
    /**
     * product_type_id
     * The ID of the associated product's type.
     */
    product_type_id?: string;
}
/**
 * VendorOrderPaymentCollection
 * The payment collection's details.
 */
export interface VendorOrderPaymentCollection {
    /**
     * id
     * The payment collection's ID.
     */
    id?: string;
    /**
     * currency_code
     * The payment collection's currency code.
     */
    currency_code?: string;
    /**
     * region_id
     * The ID of the region this payment collection is associated with.
     */
    region_id?: string;
    /**
     * amount
     * The total amount to be paid.
     */
    amount?: number;
    /**
     * authorized_amount
     * The total authorized amount of the collection's payments.
     */
    authorized_amount?: number;
    /**
     * captured_amount
     * The total captured amount of the collection's payments.
     */
    captured_amount?: number;
    /**
     * refunded_amount
     * The total refunded amount of the collection's payments.
     */
    refunded_amount?: number;
    /**
     * completed_at
     * The date the payment collection was completed.
     * @format date-time
     */
    completed_at?: string;
    /**
     * created_at
     * The date the payment collection was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the payment collection was updated.
     * @format date-time
     */
    updated_at?: string;
    /** The payment collection's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /** The payment collection's status. */
    status?: "canceled" | "not_paid" | "awaiting" | "authorized" | "partially_authorized";
}
/**
 * Order Set
 * An order set object with its properties
 */
export interface VendorOrderSet {
    /** The unique identifier of the order set. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /** The display ID of the order set. */
    display_id: number;
}
/**
 * VendorOrderShippingMethod
 * The shipping method's details.
 */
export interface VendorOrderShippingMethod {
    /**
     * id
     * The shipping method's ID.
     */
    id?: string;
    /**
     * name
     * The shipping method's name.
     */
    name?: string;
    /**
     * description
     * The shipping method's description.
     */
    description?: string;
    /**
     * amount
     * The shipping method's amount.
     */
    amount?: number;
    /**
     * is_tax_inclusive
     * Whether the shipping method's amount includes applied taxes.
     */
    is_tax_inclusive?: boolean;
    /**
     * shipping_option_id
     * The ID of the shipping option this method was created from.
     */
    shipping_option_id?: string;
    /** The shipping method's data, useful for fulfillment provider handling its fulfillment. */
    data?: object;
    /** The shipping method's metadata, can hold custom key-value pairs. */
    metadata?: object;
    /**
     * original_total
     * The shipping method's total including taxes, excluding promotions.
     */
    original_total?: number;
    /**
     * original_subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    original_subtotal?: number;
    /**
     * original_tax_total
     * The shipping method's total taxes excluding promotions.
     */
    original_tax_total?: number;
    /**
     * total
     * The shipping method's total including taxes and promotions.
     */
    total?: number;
    /**
     * subtotal
     * The shipping method's total excluding taxes, including promotions.
     */
    subtotal?: number;
    /**
     * tax_total
     * The shipping method's tax total including promotions.
     */
    tax_total?: number;
    /**
     * discount_total
     * The total discounts applied on the shipping method.
     */
    discount_total?: number;
    /**
     * discount_tax_total
     * The taxes applied on the discount amount.
     */
    discount_tax_total?: number;
    /**
     * created_at
     * The date the shipping method was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the shipping method was updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * VendorOrderSummary
 * The order's summary details.
 */
export interface VendorOrderSummary {
    /**
     * total
     * The order's total including taxes and promotions.
     */
    total?: number;
    /**
     * subtotal
     * The order's total excluding taxes, including promotions.
     */
    subtotal?: number;
    /**
     * total_tax
     * The order's total taxes.
     */
    total_tax?: number;
    /**
     * ordered_total
     * The order's total when it was placed.
     */
    ordered_total?: number;
    /**
     * fulfilled_total
     * The total of the fulfilled items of the order.
     */
    fulfilled_total?: number;
    /**
     * returned_total
     * The total of the order's returned items.
     */
    returned_total?: number;
    /**
     * return_request_total
     * The total of the items requested to be returned.
     */
    return_request_total?: number;
    /**
     * write_off_total
     * The total of the items removed from the order.
     */
    write_off_total?: number;
    /**
     * paid_total
     * The total amount paid.
     */
    paid_total?: number;
    /**
     * refunded_total
     * The total amount refunded.
     */
    refunded_total?: number;
}
/**
 * Payout
 * A payout object with its properties
 */
export interface VendorPayout {
    /** The unique identifier of the payout. */
    id: string;
    /** The currency code of the payout. */
    currency_code: string;
    /** The amount of the payout. */
    amount: number;
    /** Additional data stored with the payout. */
    data?: object | null;
    /** The payout account this payout belongs to. */
    payout_account?: VendorPayoutAccount;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
/**
 * Payout Account
 * A payout account object with its properties
 */
export interface VendorPayoutAccount {
    /** The unique identifier of the payout account. */
    id: string;
    /** The status of the payout account. */
    status: "pending" | "active" | "disabled";
    /** Reference ID used by the payment processor. */
    reference_id: string;
    /** Additional data stored with the payout account. */
    data: object;
    /** Context data stored with the payout account. */
    context?: object | null;
    /** The onboarding associated with the payout account. */
    onboarding?: VendorOnboarding | null;
    /** The payouts associated with this account. */
    payouts?: VendorPayout[];
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
}
/** The price list's details. */
export interface VendorPriceList {
    /**
     * id
     * The price list's ID.
     */
    id?: string;
    /**
     * title
     * The price list's title.
     */
    title?: string;
    /**
     * description
     * The price list's description.
     */
    description?: string;
    /** The price list's rules. */
    rules?: object;
    /**
     * starts_at
     * The date the price list starts.
     */
    starts_at?: string;
    /**
     * ends_at
     * The date the price list ends.
     */
    ends_at?: string;
    /** The price list's status. */
    status?: "draft" | "active";
    /** The price list's type. */
    type?: "sale" | "override";
    /** The price list's prices. */
    prices?: VendorPriceListPrice[];
    /**
     * created_at
     * The date the price list was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the price list was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the price list was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/** The details of a price list's price. */
export interface VendorPriceListPrice {
    /**
     * variant_id
     * The ID of the product variant this price list is for.
     */
    variant_id?: string;
    /** The price's rules. */
    rules?: object;
    /**
     * id
     * The price's ID.
     */
    id?: string;
    /**
     * title
     * The price's title.
     */
    title?: string;
    /**
     * currency_code
     * The price's currency code.
     * @example "usd"
     */
    currency_code?: string;
    /**
     * amount
     * The price's amount.
     */
    amount?: number;
    /** The price's raw amount. */
    raw_amount?: object;
    /**
     * min_quantity
     * The minimum quantity that must be available in the cart for the price to be applied.
     */
    min_quantity?: number;
    /**
     * max_quantity
     * The maximum quantity allowed to be available in the cart for the price to be applied.
     */
    max_quantity?: number;
    /**
     * price_set_id
     * The ID of the price set this price belongs to.
     */
    price_set_id?: string;
    /**
     * created_at
     * The date the price was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the price was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the price was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/**
 * Product
 * A product object with its properties
 */
export interface VendorProduct {
    /** The unique identifier of the product. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The title of the product. */
    title: string;
    /** The subtitle of the product. */
    subtitle?: string | null;
    /** A description of the product. */
    description?: string | null;
    /** A unique handle for the product. */
    handle: string;
    /** Whether the product is a gift card. */
    is_giftcard?: boolean;
    /** The status of the product. */
    status?: "draft" | "proposed" | "published" | "rejected";
    /** URL to the product's thumbnail. */
    thumbnail?: string | null;
    /** The width of the product. */
    width?: number | null;
    /** The weight of the product. */
    weight?: number | null;
    /** The length of the product. */
    length?: number | null;
    /** The height of the product. */
    height?: number | null;
    /** The origin country of the product. */
    origin_country?: string | null;
    /** The HS Code of the product. */
    hs_code?: string | null;
    /** The MID Code of the product. */
    mid_code?: string | null;
    /** The material of the product. */
    material?: string | null;
    /** The associated product collection. */
    collection?: VendorProductCollection | null;
    /** The associated product type. */
    type?: VendorProductType | null;
    /** The associated product tags. */
    tags?: VendorProductTag[];
    /** The associated product categories. */
    categories?: VendorProductCategory[];
    /** The associated product variants. */
    variants?: VendorProductVariant[];
    /** The associated product options. */
    options?: VendorProductOption[];
    /** The associated product images. */
    images?: VendorProductImage[];
    /** Whether the product can be discounted. */
    discountable?: boolean;
    /** The ID of the product in an external system. */
    external_id?: string | null;
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
    /** The average rating from customer reviews */
    rating?: string | null;
}
/**
 * Product Category
 * A product category object with its properties
 */
export interface VendorProductCategory {
    /** The unique identifier of the product category. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The name of the product category. */
    name: string;
    /** The handle of the product category. */
    handle?: string;
    /** Whether the product category is active. */
    is_active?: boolean;
    /** Whether the product category is internal. */
    is_internal?: boolean;
    /** The rank of the category among sibling categories. */
    rank?: number;
    /** The parent category. */
    parent_category?: VendorProductCategory | null;
    /** The child categories. */
    category_children?: VendorProductCategory[];
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Collection
 * A product collection object with its properties
 */
export interface VendorProductCollection {
    /** The unique identifier of the product collection. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The title of the product collection. */
    title: string;
    /** The handle of the product collection. */
    handle?: string;
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Image
 * A product image object with its properties
 */
export interface VendorProductImage {
    /** The unique identifier of the product image. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The URL of the product image. */
    url: string;
    /** The rank of the product image. */
    rank?: number;
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Option
 * A product option object with its properties
 */
export interface VendorProductOption {
    /** The unique identifier of the product option. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The title of the product option. */
    title: string;
    /** The associated product option values. */
    values?: VendorProductOptionValue[];
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Option Value
 * A product option value object with its properties
 */
export interface VendorProductOptionValue {
    /** The unique identifier of the product option value. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The value of the product option value. */
    value: string;
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Tag
 * A product tag object with its properties
 */
export interface VendorProductTag {
    /** The unique identifier of the product tag. */
    id: string;
    /** The value of the product tag. */
    value: string;
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Type
 * A product type object with its properties
 */
export interface VendorProductType {
    /** The unique identifier of the product type. */
    id: string;
    /** The value of the product type. */
    value: string;
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Product Variant
 * A product variant object with its properties
 */
export interface VendorProductVariant {
    /** The unique identifier of the product variant. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * The date with timezone at which the resource was deleted.
     * @format date-time
     */
    deleted_at?: string | null;
    /** The title of the product variant. */
    title: string;
    /** The SKU of the product variant. */
    sku?: string | null;
    /** The barcode of the product variant. */
    barcode?: string | null;
    /** The EAN of the product variant. */
    ean?: string | null;
    /** The UPC of the product variant. */
    upc?: string | null;
    /** Whether the product variant can be ordered when it's out of stock. */
    allow_backorder?: boolean;
    /** Whether the product variant's inventory should be managed by the core system. */
    manage_inventory?: boolean;
    /** The HS Code of the product variant. */
    hs_code?: string | null;
    /** The origin country of the product variant. */
    origin_country?: string | null;
    /** The MID Code of the product variant. */
    mid_code?: string | null;
    /** The material of the product variant. */
    material?: string | null;
    /** The weight of the product variant. */
    weight?: number | null;
    /** The length of the product variant. */
    length?: number | null;
    /** The height of the product variant. */
    height?: number | null;
    /** The width of the product variant. */
    width?: number | null;
    /** The associated product option values. */
    options?: VendorProductOptionValue[];
    /**
     * An optional key-value map with additional details.
     * @example {"car":"white"}
     */
    metadata?: object;
}
/**
 * Promotion
 * Promotion object
 */
export interface VendorPromotion {
    /** The unique identifier of the item. */
    id?: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
    /** The code of the promotion. */
    code?: string;
    /** Whether the promotion is applied automatically. */
    is_automatic?: boolean;
    /** The type of the promotion. */
    type?: string;
    /** Application method object */
    application_method?: VendorApplicationMethod;
    /** Promotion rules. */
    rules?: VendorPromotionRule[];
}
export interface VendorPromotionRule {
    /** The unique identifier of the item. */
    id?: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
    /** The description of the rule. */
    description?: string;
    /** The attribute of the rule. */
    attribute?: string;
    /** The operator of the rule. */
    operator?: string;
    /** Rule values. */
    values?: {
        value?: string;
    }[];
}
/** The return receival details. */
export interface VendorReceiveReturn {
    /**
     * internal_note
     * A note.
     */
    internal_note?: string;
    /**
     * description
     * The return's description.
     */
    description?: string;
    /** The return's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The items details. */
export interface VendorReceiveReturnItems {
    /** The items details. */
    items?: {
        /**
         * id
         * The ID of the item in the order.
         */
        id?: string;
        /**
         * quantity
         * The item's quantity.
         */
        quantity?: number;
        /**
         * internal_note
         * A note.
         */
        internal_note?: string;
    }[];
}
/**
 * Request
 * A request object
 */
export interface VendorRequest {
    /** The unique identifier of the request. */
    id?: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at?: string;
    /** The type of the request object. */
    type?: string;
    /** The request payload. */
    data?: object;
    /** A unique id of the submitter */
    submitter_id?: string;
    /** A unique id of the reviewer */
    reviewer_id?: string | null;
    /** A note provided by the reviewer */
    reviewer_note?: string | null;
    /** The status of the request */
    status?: string;
}
/** The reservation's details. */
export interface VendorReservation {
    /**
     * id
     * The reservation's ID.
     */
    id?: string;
    /**
     * line_item_id
     * The ID of the line item this reservation is for.
     */
    line_item_id?: string;
    /**
     * location_id
     * The ID of the location the quantity is reserved from.
     */
    location_id?: string;
    /**
     * quantity
     * The reservation's quantity.
     */
    quantity?: number;
    /**
     * external_id
     * An ID in an external system
     */
    external_id?: string;
    /**
     * description
     * The reservation's description.
     */
    description?: string;
    /**
     * inventory_item_id
     * The ID of the inventory item this reservation is associated with.
     */
    inventory_item_id?: string;
    /**
     * created_by
     * The ID of the user that created this reservation.
     */
    created_by?: string;
    /**
     * deleted_at
     * The date this reservation was deleted.
     * @format date-time
     */
    deleted_at?: string;
    /**
     * created_at
     * The date this reservation was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date this reservation was updated.
     * @format date-time
     */
    updated_at?: string;
}
/** The return's details. */
export interface VendorReturn {
    /**
     * id
     * The return's ID.
     */
    id?: string;
    /** The return's status. */
    status?: "canceled" | "requested" | "received" | "partially_received";
    /**
     * refund_amount
     * The amount refunded by this return.
     */
    refund_amount?: number;
    /**
     * order_id
     * The ID of the associated order.
     */
    order_id?: string;
    /** The return's items. */
    items?: VendorReturnItem[];
    /**
     * created_at
     * The date the return was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * canceled_at
     * The date the return was canceled.
     * @format date-time
     */
    canceled_at?: string;
    /**
     * exchange_id
     * The return's exchange id.
     */
    exchange_id?: string;
    /**
     * location_id
     * The return's location id.
     */
    location_id?: string;
    /**
     * claim_id
     * The return's claim id.
     */
    claim_id?: string;
    /**
     * order_version
     * The return's order version.
     */
    order_version?: number;
    /**
     * display_id
     * The return's display id.
     */
    display_id?: number;
    /**
     * no_notification
     * Whether the customer should receive notifications about the return's updates.
     */
    no_notification?: boolean;
    /**
     * received_at
     * The date the return was received.
     */
    received_at?: string;
}
/** The return item's details. */
export interface VendorReturnItem {
    /**
     * id
     * The return item's ID.
     */
    id?: string;
    /**
     * quantity
     * The return item's quantity.
     */
    quantity?: number;
    /**
     * received_quantity
     * The received quantity of the item. This quantity is added to the stocked inventory quantity of the item.
     */
    received_quantity?: number;
    /**
     * damaged_quantity
     * The received damaged quantity of the item, which isn't added to the stocked inventory quantity of the item.
     */
    damaged_quantity?: number;
    /**
     * reason_id
     * The ID of the return reason associated with the item.
     */
    reason_id?: string;
    /**
     * note
     * A note about why the item was returned.
     */
    note?: string;
    /**
     * item_id
     * The ID of the associated order item.
     */
    item_id?: string;
    /**
     * return_id
     * The ID of the return this return item belongs to.
     */
    return_id?: string;
    /** The return item's metadata, can hold custom key-value pairs. */
    metadata?: object;
}
/** The return receival details. */
export interface VendorReturnsDismissItemsAction {
    /** Quantity of the item */
    quantity?: string;
    /** A note. */
    internal_note?: string;
}
/** The return receival details. */
export interface VendorReturnsReceiveItemsAction {
    /** Quantity of the item */
    quantity?: string;
    /** A note. */
    internal_note?: string;
}
/** The details of the sales channel. */
export interface VendorSalesChannel {
    /**
     * id
     * The sales channel ID.
     */
    id?: string;
    /**
     * name
     * The sales channel name.
     */
    name?: string;
    /**
     * description
     * The sales channel description.
     */
    description?: string;
    /**
     * is_disabled
     * Is sales channel disabled.
     */
    is_disabled?: boolean;
    /**
     * metadata
     * The sales channel metadata.
     */
    metadata?: object;
    /**
     * created_at
     * The date the channel was created.
     * @format date-time
     */
    created_at?: string;
    /**
     * updated_at
     * The date the channel was updated.
     * @format date-time
     */
    updated_at?: string;
    /**
     * deleted_at
     * The date the channel was deleted.
     * @format date-time
     */
    deleted_at?: string;
}
/**
 * Seller
 * A seller object with its properties
 */
export interface VendorSeller {
    /** The unique identifier of the seller. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /** The name of the seller. */
    name: string;
    /** A description of the seller. */
    description?: string | null;
    /** A unique handle for the seller. */
    handle: string;
    /** Store contact email. */
    email?: string | null;
    /** Store contact phone. */
    phone?: string | null;
    /** URL to the seller's photo. */
    photo?: string | null;
    /** Seller address line. */
    address_line?: string | null;
    /** Seller postal code. */
    postal_code?: string | null;
    /** Seller city. */
    city?: string | null;
    /** Seller state. */
    state?: string | null;
    /** Seller country code. */
    country_code?: string | null;
    /** Seller tax id. */
    tax_id?: string | null;
    /** The members associated with the seller. */
    members?: VendorMember[];
}
/**
 * SellerOnboarding
 * An onboarding object with its properties
 */
export interface VendorSellerOnboarding {
    /** The unique identifier of the onboarding. */
    id: string;
    /**
     * The date with timezone at which the resource was created.
     * @format date-time
     */
    created_at: string;
    /**
     * The date with timezone at which the resource was last updated.
     * @format date-time
     */
    updated_at: string;
    /** The unique identifier of the seller. */
    seller_id?: string;
    /** Indicates if seller completed store information. */
    store_information?: boolean;
    /** Indicates if seller completed stripe connection. */
    stripe_connection?: boolean;
    /** Indicates if seller added shipping locations. */
    locations_shipping?: boolean;
    /** Indicates if seller added products. */
    products?: boolean;
}
/** The shipping option's service zone. */
export interface VendorServiceZone {
    /**
     * id
     * The service zone's ID.
     */
    id: string;
    /**
     * name
     * The service zone's name.
     */
    name: string;
    /**
     * fulfillment_set_id
     * The service zone's fulfillment set id.
     */
    fulfillment_set_id: string;
    /** The service zone's fulfillment set. */
    fulfillment_set: VendorFulfillmentSet;
    /** The service zone's geo zones. */
    geo_zones: VendorGeoZone[];
    /** The service zone's shipping options. */
    shipping_options: VendorShippingOption[];
    /**
     * created_at
     * The service zone's created at.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The service zone's updated at.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The service zone's deleted at.
     * @format date-time
     */
    deleted_at: string;
}
/** The shipping option's details. */
export interface VendorShippingOption {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * name
     * The shipping option's name.
     */
    name: string;
    /** The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider. */
    price_type: "calculated" | "flat";
    /**
     * service_zone_id
     * The ID of the service zone this option belongs to.
     */
    service_zone_id: string;
    /** The shipping option's service zone. */
    service_zone: VendorServiceZone;
    /**
     * shipping_option_type_id
     * The ID of the associated shipping option type.
     */
    shipping_option_type_id: string;
    /** The shipping option's details. */
    type: VendorShippingOptionType;
    /** The shipping option's prices. If the `price_type` is `calculated`, this array will be empty since the price is calculated by the fulfillment provider during checkout. */
    prices: VendorShippingOptionPrice[];
    /** The shipping option's data, useful for the fulfillment provider handling fulfillments created from this option. */
    data: object;
    /** The shipping option's metadata, can hold custom key-value pairs. */
    metadata: object;
    /**
     * created_at
     * The date the shipping option was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping option was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the shipping option was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The details of the shipping option's price. */
export interface VendorShippingOptionPrice {
    /**
     * id
     * The price's ID.
     */
    id: string;
    /**
     * title
     * The price's title.
     */
    title: string;
    /**
     * currency_code
     * The price's currency code.
     * @example "usd"
     */
    currency_code: string;
    /**
     * amount
     * The price's amount.
     */
    amount: number;
    /**
     * created_at
     * The date the price was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the price was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the price was deleted.
     * @format date-time
     */
    deleted_at: string;
}
/** The shipping option's details. */
export interface VendorShippingOptionType {
    /**
     * id
     * The shipping option's ID.
     */
    id: string;
    /**
     * created_at
     * The date the shipping option was created.
     * @format date-time
     */
    created_at: string;
    /**
     * updated_at
     * The date the shipping option was updated.
     * @format date-time
     */
    updated_at: string;
    /**
     * deleted_at
     * The date the shipping option was deleted.
     * @format date-time
     */
    deleted_at: string;
    /**
     * label
     * The type's label.
     */
    label: string;
    /**
     * description
     * The type's description.
     */
    description: string;
    /**
     * code
     * The type's code.
     */
    code: string;
    /**
     * shipping_option_id
     * The type's shipping option id.
     */
    shipping_option_id: string;
}
/** The stock location's details. */
export interface VendorStockLocation {
    /**
     * id
     * The location's ID.
     */
    id: string;
    /**
     * name
     * The location's name.
     */
    name: string;
    /** The fulfillment sets associated with the location. */
    fulfillment_sets?: VendorFulfillmentSet[];
}
/**
 * Vendor store
 * Store object.
 */
export interface VendorStore {
    /** The unique identifier of the store. */
    id?: string;
    /** Name of the store. */
    name?: string;
    /** Id of the default sales channel. */
    default_sales_channel_id?: string;
    /** Id of the default region. */
    default_region_id?: string;
    /** Id of the default location. */
    default_location_id?: string;
    /** List of the supported currencies. */
    supported_currencies?: VendorCurrency[];
}
export interface VendorUpdateCampaign {
    /** The campaign's name. */
    name?: string;
    /** The campaign's identifier. */
    campaign_identifier?: string;
    /** The campaign's description. */
    description?: string;
    /** The date and time that the campaign starts. */
    starts_at?: string;
    /** The date and time that the campaign ends. */
    ends_at?: string;
    budget?: {
        /** The buget's limit. */
        limit?: number;
    };
}
/**
 * VendorUpdateInventoryItem
 * The inventory item's details.
 */
export interface VendorUpdateInventoryItem {
    /**
     * sku
     * The inventory item's SKU.
     */
    sku?: string;
    /**
     * hs_code
     * The inventory item's HS code.
     */
    hs_code?: string;
    /**
     * weight
     * The inventory item's weight.
     */
    weight?: number;
    /**
     * length
     * The inventory item's length.
     */
    length?: number;
    /**
     * height
     * The inventory item's height.
     */
    height?: number;
    /**
     * width
     * The inventory item's width.
     */
    width?: number;
    /**
     * origin_country
     * The inventory item's origin country.
     */
    origin_country?: string;
    /**
     * mid_code
     * The inventory item's mid code.
     */
    mid_code?: string;
    /**
     * material
     * The inventory item's material.
     */
    material?: string;
    /**
     * title
     * The inventory item's title.
     */
    title?: string;
    /**
     * description
     * The description of the variant associated with the inventory item.
     */
    description?: string;
    /**
     * requires_shipping
     * Whether the item requires shipping.
     */
    requires_shipping?: boolean;
    /**
     * thumbnail
     * The inventory item's thumbnail.
     */
    thumbnail?: string;
    /** The inventory item's metadata, used to store custom key-value pairs. */
    metadata?: object;
}
export interface VendorUpdateInventoryLevel {
    /** The quantity of the InventoryItem in StockLocation. */
    stocked_quantity?: number;
    /**
     * reserved_quantity
     * The quantity reserved from the available stocked_quantity.
     */
    reserved_quantity?: number;
}
export interface VendorUpdateMember {
    /** The name of the member. */
    name?: string;
    /** The member's biography. */
    bio?: string | null;
    /** The member's phone number. */
    phone?: string | null;
    /** URL to the member's photo. */
    photo?: string | null;
}
/**
 * Update Order Return Request
 * A schema for the update of order return request.
 */
export interface VendorUpdateOrderReturnRequest {
    /** Reviewer note. */
    vendor_reviewer_note?: string;
    /** A status of the request */
    status?: "refunded" | "withdrawn" | "escalated";
}
export interface VendorUpdatePriceList {
    /**
     * title
     * The price list's title.
     */
    title?: string;
    /**
     * description
     * The price list's description.
     */
    description?: string;
    /** The price list's rules. */
    rules?: object;
    /**
     * starts_at
     * The date the price list starts.
     */
    starts_at?: string;
    /**
     * ends_at
     * The date the price list ends.
     */
    ends_at?: string;
    /** The price list's status. */
    status?: "draft" | "active";
    /** The price list's type. */
    type?: "sale" | "override";
}
export interface VendorUpdateProduct {
    /** The title of the product. */
    title?: string;
    /** Whether the product can be discounted. */
    discountable?: boolean;
    /** Whether the product is a gift card. */
    is_giftcard?: boolean;
    /** The product options to update. */
    options?: UpdateProductOption[];
    /** The product variants to update. */
    variants?: UpdateProductVariant[];
    /** The status of the product. */
    status?: "draft" | "proposed" | "published" | "rejected";
    /** The subtitle of the product. */
    subtitle?: string | null;
    /** The description of the product. */
    description?: string | null;
    /** Images of the product. */
    images?: {
        url?: string;
    }[];
    /** The thumbnail of the product. */
    thumbnail?: string | null;
    /** The handle of the product. */
    handle?: string | null;
    /** The ID of the product type. */
    type_id?: string | null;
    /** The external ID of the product. */
    external_id?: string | null;
    /** The ID of the collection the product belongs to. */
    collection_id?: string | null;
    /** Product category IDs to associate with the product. */
    categories?: {
        id: string;
    }[];
    /** Product tag IDs to associate with the product. */
    tags?: {
        id: string;
    }[];
    /** The weight of the product. */
    weight?: number | null;
    /** The length of the product. */
    length?: number | null;
    /** The height of the product. */
    height?: number | null;
    /** The width of the product. */
    width?: number | null;
    /** The HS code of the product. */
    hs_code?: string | null;
    /** The MID code of the product. */
    mid_code?: string | null;
    /** The country of origin of the product. */
    origin_country?: string | null;
    /** The material composition of the product. */
    material?: string | null;
    /** Additional metadata for the product. */
    metadata?: object | null;
    /** Sales channels to associate the product with. */
    sales_channels?: {
        id: string;
    }[];
}
export interface VendorUpdateReservation {
    /** The description of the reservation. */
    description?: string;
    /** The location id of the reservation. */
    location_id?: string;
    /** The number of items in the reservation. */
    quantity?: number;
}
/**
 * Update Review
 * A schema for the review update.
 */
export interface VendorUpdateReview {
    /**
     * The seller response to a review.
     * @maxLength 300
     */
    seller_note?: string;
}
/**
 * Update Seller
 * A schema for the update seller request body.
 */
export interface VendorUpdateSeller {
    /**
     * The name of the seller.
     * @minLength 4
     */
    name?: string;
    /** A description of the seller. */
    description?: string | null;
    /** URL to the seller's photo. */
    photo?: string | null;
    /** Store contact email. */
    email?: string;
    /** Store contact phone. */
    phone?: string;
    /** Seller address line. */
    address_line?: string | null;
    /** Seller postal code. */
    postal_code?: string | null;
    /** Seller city. */
    city?: string | null;
    /** Seller state. */
    state?: string | null;
    /** Seller country code. */
    country_code?: string | null;
    /** Seller tax id. */
    tax_id?: string | null;
}
export interface VendorUpdateServiceZone {
    /** The name of the service zone. */
    name?: string;
    /** The geo zones that belong to the service zone. */
    geo_zones?: ((GeoZoneCountry & {
        /** The ID of the geo zone. */
        id?: string;
    }) | (GeoZoneProvince & {
        /** The ID of the geo zone. */
        id?: string;
    }) | (GeoZoneCity & {
        /** The ID of the geo zone. */
        id?: string;
    }) | (GeoZoneZip & {
        /** The ID of the geo zone. */
        id?: string;
    }))[];
}
export interface VendorUpdateShippingOption {
    /** The name of the shipping option. */
    name?: string;
    /** The ID of the shipping profile. */
    shipping_profile_id?: string;
    /** The ID of the fulfillment provider. */
    provider_id?: string;
    /** The prices of the shipping option. */
    prices?: CreateShippingOptionPriceWithCurrency[];
    type?: CreateShippingOptionTypeObject;
}
export interface VendorUpdateStockLocation {
    /** Name of the stock location */
    name?: string;
    address?: UpsertStockLocationAddress;
    /** ID of an existing address to use */
    address_id?: string | null;
    /** Additional metadata */
    metadata?: object | null;
}
export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;
export interface FullRequestParams extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType;
    /** query params */
    query?: QueryParamsType;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken;
}
export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;
export interface ApiConfig<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
    customFetch?: typeof fetch;
}
export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken = Symbol | string | number;
export declare enum ContentType {
    Json = "application/json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
export declare class HttpClient<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType): string;
    protected addQueryParams(rawQuery?: QueryParamsType): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams;
    protected createAbortSignal: (cancelToken: CancelToken) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams) => Promise<HttpResponse<T, E>>;
}
/**
 * @title Medusa API
 * @version 1.0.0
 */
export declare class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
    admin: {
        /**
         * @description Retrieve a list of API keys. The API keys can be filtered by fields such as `id`. The API keys can also be sorted or paginated.
         *
         * @tags Admin Api Keys
         * @name AdminGetApiKeys
         * @summary List API Keys
         * @request GET:/admin/api-keys
         * @secure
         */
        adminGetApiKeys: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * The search term.
             */
            q?: string;
            /** Filter by an API key's ID. */
            id?: string | string[];
            /** Filter by an API key's title. */
            title?: string | string[];
            /** Filter by an API key's token. */
            token?: string | string[];
            /** Filter by the API key's type. */
            type?: "secret" | "publishable";
            /** Filter by the API key's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the API key's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the API key's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the API key's revoke date. */
            revoked_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned in the list.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total count of items.
             */
            count: number;
        } & {
            /** The list of API keys. */
            api_keys: ApiKeyResponse[];
        }, string | Error>>;
        /**
         * @description Create a secret or publishable API key. A secret API key is used for admin authentication. A publishable API key is used by client applications to set the scope of the request.
         *
         * @tags Admin Api Keys
         * @name AdminPostApiKeys
         * @summary Create Api Key
         * @request POST:/admin/api-keys
         * @secure
         */
        adminPostApiKeys: (data: AdminCreateApiKey, params?: RequestParams) => Promise<HttpResponse<AdminApiKeyResponse, string | Error>>;
        /**
         * @description Retrieve an API key by its ID. You can expand the API key's relations or select the fields that should be returned using the query parameters.
         *
         * @tags Admin Api Keys
         * @name AdminGetApiKeysId
         * @summary Get API Key
         * @request GET:/admin/api-keys/{id}
         * @secure
         */
        adminGetApiKeysId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminApiKeyResponse, string | Error>>;
        /**
         * @description Update an API key's details.
         *
         * @tags Admin Api Keys
         * @name AdminPostApiKeysId
         * @summary Update an API Key
         * @request POST:/admin/api-keys/{id}
         * @secure
         */
        adminPostApiKeysId: (id: string, data: AdminUpdateApiKey, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminApiKeyResponse, string | Error>>;
        /**
         * @description Delete a publishable or secret API key.
         *
         * @tags Admin Api Keys
         * @name AdminDeleteApiKeysId
         * @summary Delete an Api Key
         * @request DELETE:/admin/api-keys/{id}
         * @secure
         */
        adminDeleteApiKeysId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The API key's ID.
             */
            id: string;
            /**
             * object
             * The name of the object that was deleted.
             * @default "api_key"
             */
            object: string;
            /**
             * deleted
             * Whether the API key was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Revokes an API key. If the API key is a secret, it can't be used for authentication anymore. If it's publishable, it can't be used by client applications.
         *
         * @tags Admin Api Keys
         * @name AdminPostApiKeysIdRevoke
         * @summary Revoke API Key
         * @request POST:/admin/api-keys/{id}/revoke
         * @secure
         */
        adminPostApiKeysIdRevoke: (id: string, data: AdminRevokeApiKey, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminApiKeyResponse, string | Error>>;
        /**
         * @description Manage the sales channels of a publishable API key, either to associate them or remove them from the API key.
         *
         * @tags Admin Api Keys
         * @name AdminPostApiKeysIdSalesChannels
         * @summary Manage Sales Channels of a Publishable API Key
         * @request POST:/admin/api-keys/{id}/sales-channels
         * @secure
         */
        adminPostApiKeysIdSalesChannels: (id: string, data: {
            /** The sales channels to add to the publishable API key. */
            add?: string[];
            /** The sales channels to remove from the publishable API key. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminApiKeyResponse, string | Error>>;
        /**
         * @description Retrieve a list of campaigns. The campaigns can be filtered by fields such as `id`. The campaigns can also be sorted or paginated.
         *
         * @tags Admin Campaigns
         * @name AdminGetCampaigns
         * @summary List Campaigns
         * @request GET:/admin/campaigns
         * @secure
         */
        adminGetCampaigns: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items retrieved.
             */
            limit: number;
            /**
             * offset
             * The number of its skipped before the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of campaigns. */
            campaigns: CampaignResponse[];
        }, string | Error>>;
        /**
         * @description Create a campaign.
         *
         * @tags Admin Campaigns
         * @name AdminPostCampaigns
         * @summary Create Campaign
         * @request POST:/admin/campaigns
         * @secure
         */
        adminPostCampaigns: (data: {
            /**
             * name
             * The campaign's name.
             */
            name: string;
            /**
             * campaign_identifier
             * The campaign's identifier.
             */
            campaign_identifier: string;
            /**
             * description
             * The campaign's description.
             */
            description: string;
            /** The campaign's budget which, when crossed, ends the campaign. */
            budget: {
                /**
                 * type
                 * The budget's type. This can't be edited later. Use `spend` to set a limit on the total amount discounted by the campaign's promotions. Use `usage` to set a limit on the total number of times the campaign's promotions can be used.
                 */
                type: "spend" | "usage";
                /**
                 * limit
                 * The campaign budget's limit.
                 */
                limit: number;
                /**
                 * currency_code
                 * The campaign budget's currency code. This can't be edited later.
                 */
                currency_code: string;
            };
            /**
             * starts_at
             * The campaign's start date.
             * @format date-time
             */
            starts_at: string;
            /**
             * ends_at
             * The campaign's end date.
             * @format date-time
             */
            ends_at: string;
            /** The campaign's promotions. */
            promotions?: {
                /**
                 * id
                 * A promotion's ID.
                 */
                id: string;
            }[];
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCampaignResponse, string | Error>>;
        /**
         * @description Retrieve a campaign by its ID. You can expand the campaign's relations or select the fields that should be returned using the query parameters.
         *
         * @tags Admin Campaigns
         * @name AdminGetCampaignsId
         * @summary Get a Campaign
         * @request GET:/admin/campaigns/{id}
         * @secure
         */
        adminGetCampaignsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCampaignResponse, string | Error>>;
        /**
         * @description Update a campaign's details.
         *
         * @tags Admin Campaigns
         * @name AdminPostCampaignsId
         * @summary Update a Campaign
         * @request POST:/admin/campaigns/{id}
         * @secure
         */
        adminPostCampaignsId: (id: string, data: {
            /**
             * name
             * The campaign's name.
             */
            name?: string;
            /**
             * campaign_identifier
             * The campaign's identifier.
             */
            campaign_identifier?: string;
            /**
             * description
             * The campaign's description.
             */
            description: string;
            /** The campaign's budget. */
            budget?: {
                /**
                 * limit
                 * The campaign budget's limit.
                 */
                limit: number;
            };
            /**
             * starts_at
             * The campaign's start date.
             * @format date-time
             */
            starts_at: string;
            /**
             * ends_at
             * The campaign's end date.
             * @format date-time
             */
            ends_at: string;
            /** The campaign's promotions. */
            promotions?: {
                /**
                 * id
                 * A promotion's ID.
                 */
                id: string;
            }[];
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCampaignResponse, string | Error>>;
        /**
         * @description Delete a campaign by its ID. This doesn't delete promotions that belong to this campaign.
         *
         * @tags Admin Campaigns
         * @name AdminDeleteCampaignsId
         * @summary Delete a Campaign
         * @request DELETE:/admin/campaigns/{id}
         * @secure
         */
        adminDeleteCampaignsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The campaign's ID.
             */
            id: string;
            /**
             * object
             * The name of the object that was deleted.
             * @default "campaign"
             */
            object: string;
            /**
             * deleted
             * Whether the campaign was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Manage the promotions of a campaign, either by adding them or removing them from the campaign.
         *
         * @tags Admin Campaigns
         * @name AdminPostCampaignsIdPromotions
         * @summary Manage the Promotions of a Campaign
         * @request POST:/admin/campaigns/{id}/promotions
         * @secure
         */
        adminPostCampaignsIdPromotions: (id: string, data: {
            /** The promotions to add to the campaign. */
            add?: string[];
            /** The promotions to remove from the campaign. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCampaignResponse, string | Error>>;
        /**
         * @description Retrieve a list of claims. The claims can be filtered by fields such as `id`. The claims can also be sorted or paginated.
         *
         * @tags Admin Claims
         * @name AdminGetClaims
         * @summary List Claims
         * @request GET:/admin/claims
         * @secure
         */
        adminGetClaims: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** The claim's deleted at. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * q
             * The claim's q.
             */
            q?: string;
            /** The claim's ID. */
            id?: string | string[];
            /** The claim's order id. */
            order_id?: string | string[];
            /** The claim's status. */
            status?: string | string[];
            /** The claim's created at. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** The claim's updated at. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimListResponse, string | Error>>;
        /**
         * @description Create a claim. The claim is still in the request state, and the changes are only applied on the order once the claim is confirmed.
         *
         * @tags Admin Claims
         * @name AdminPostClaims
         * @summary Create a Claim
         * @request POST:/admin/claims
         * @secure
         */
        adminPostClaims: (data: AdminPostOrderClaimsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimOrderResponse, string | Error>>;
        /**
         * @description Retrieve a claim by its ID. You can expand the claim's relations or select the fields that should be returned using the query parameters.
         *
         * @tags Admin Claims
         * @name AdminGetClaimsId
         * @summary Get a Claim
         * @request GET:/admin/claims/{id}
         * @secure
         */
        adminGetClaimsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimResponse, string | Error>>;
        /**
         * @description Cancel a claim and its associated return.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdCancel
         * @summary Cancel a Claim
         * @request POST:/admin/claims/{id}/cancel
         * @secure
         */
        adminPostClaimsIdCancel: (id: string, data: AdminPostCancelClaimReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminClaimResponse, string | Error>>;
        /**
         * @description Add order items to a claim as claim items. These claim items will have the action `WRITE_OFF_ITEM`.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdClaimItems
         * @summary Add Claim Items to a Claim
         * @request POST:/admin/claims/{id}/claim-items
         * @secure
         */
        adminPostClaimsIdClaimItems: (id: string, data: AdminPostClaimItemsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Update an order item in a claim by the ID of the item's `WRITE_OFF_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdClaimItemsActionId
         * @summary Update a Claim Item
         * @request POST:/admin/claims/{id}/claim-items/{action_id}
         * @secure
         */
        adminPostClaimsIdClaimItemsActionId: (id: string, actionId: string, data: AdminPostClaimsItemsActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Remove an order item from a claim by the ID of the item's `WRITE_OFF_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminDeleteClaimsIdClaimItemsActionId
         * @summary Remove a Claim Item from a Claim
         * @request DELETE:/admin/claims/{id}/claim-items/{action_id}
         * @secure
         */
        adminDeleteClaimsIdClaimItemsActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Add inbound (or return) items to a claim. These inbound items will have a `RETURN_ITEM` action.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdInboundItems
         * @summary Add Inbound Items to a Claim
         * @request POST:/admin/claims/{id}/inbound/items
         * @secure
         */
        adminPostClaimsIdInboundItems: (id: string, data: AdminPostReturnsRequestItemsReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminClaimReturnPreviewResponse, string | Error>>;
        /**
         * @description Update an inbound (or return) item of a claim using the `ID` of the item's `RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdInboundItemsActionId
         * @summary Update Inbound Items of a Claim
         * @request POST:/admin/claims/{id}/inbound/items/{action_id}
         * @secure
         */
        adminPostClaimsIdInboundItemsActionId: (id: string, actionId: string, data: AdminPostReturnsRequestItemsActionReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminClaimReturnPreviewResponse, string | Error>>;
        /**
         * @description Remove an inbound (or return) item from a claim using the `ID` of the item's `RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminDeleteClaimsIdInboundItemsActionId
         * @summary Remove an Inbound Item from Claim
         * @request DELETE:/admin/claims/{id}/inbound/items/{action_id}
         * @secure
         */
        adminDeleteClaimsIdInboundItemsActionId: (id: string, actionId: string, params?: RequestParams) => Promise<HttpResponse<AdminClaimReturnPreviewResponse, string | Error>>;
        /**
         * @description Add an inbound (or return) shipping method to a claim. The inbound shipping method will have a `SHIPPING_ADD` action.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdInboundShippingMethod
         * @summary Add an Inbound Shipping Method to a Claim
         * @request POST:/admin/claims/{id}/inbound/shipping-method
         * @secure
         */
        adminPostClaimsIdInboundShippingMethod: (id: string, data: AdminPostReturnsShippingReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminClaimReturnPreviewResponse, string | Error>>;
        /**
         * @description Update the shipping method for returning items in the claim using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdInboundShippingMethodActionId
         * @summary Update Inbound Shipping Method of a Claim
         * @request POST:/admin/claims/{id}/inbound/shipping-method/{action_id}
         * @secure
         */
        adminPostClaimsIdInboundShippingMethodActionId: (id: string, actionId: string, data: AdminPostClaimsShippingActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Remove the shipping method for returning items in the claim using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminDeleteClaimsIdInboundShippingMethodActionId
         * @summary Remove Inbound Shipping Method from Claim
         * @request DELETE:/admin/claims/{id}/inbound/shipping-method/{action_id}
         * @secure
         */
        adminDeleteClaimsIdInboundShippingMethodActionId: (id: string, actionId: string, params?: RequestParams) => Promise<HttpResponse<AdminClaimReturnPreviewResponse, string | Error>>;
        /**
         * @description Add outbound (or new) items to a claim. These outbound items will have an `ITEM_ADD` action.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdOutboundItems
         * @summary Add Outbound Items to a Claim
         * @request POST:/admin/claims/{id}/outbound/items
         * @secure
         */
        adminPostClaimsIdOutboundItems: (id: string, data: AdminPostClaimsAddItemsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Update an outbound (or new) item of a claim using the `ID` of the item's `ITEM_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdOutboundItemsActionId
         * @summary Update Outbound Item of a Claim
         * @request POST:/admin/claims/{id}/outbound/items/{action_id}
         * @secure
         */
        adminPostClaimsIdOutboundItemsActionId: (id: string, actionId: string, data: AdminPostClaimsItemsActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Remove an outbound (or new) item from a claim using the `ID` of the item's `ITEM_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminDeleteClaimsIdOutboundItemsActionId
         * @summary Remove an Outbound Item from Claim
         * @request DELETE:/admin/claims/{id}/outbound/items/{action_id}
         * @secure
         */
        adminDeleteClaimsIdOutboundItemsActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Add an outbound shipping method to a claim. The outbound shipping method will have a `SHIPPING_ADD` action.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdOutboundShippingMethod
         * @summary Add Outbound Shipping Methods to a Claim
         * @request POST:/admin/claims/{id}/outbound/shipping-method
         * @secure
         */
        adminPostClaimsIdOutboundShippingMethod: (id: string, data: AdminPostClaimsShippingReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Update the shipping method for delivering outbound items in a claim using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdOutboundShippingMethodActionId
         * @summary Update Outbound Shipping Method of a Claim
         * @request POST:/admin/claims/{id}/outbound/shipping-method/{action_id}
         * @secure
         */
        adminPostClaimsIdOutboundShippingMethodActionId: (id: string, actionId: string, data: AdminPostClaimsShippingActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Remove the shipping method for delivering outbound items in the claim using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Claims
         * @name AdminDeleteClaimsIdOutboundShippingMethodActionId
         * @summary Remove Outbound Shipping Method from Claim
         * @request DELETE:/admin/claims/{id}/outbound/shipping-method/{action_id}
         * @secure
         */
        adminDeleteClaimsIdOutboundShippingMethodActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimPreviewResponse, string | Error>>;
        /**
         * @description Confirm a claim request, applying its changes on the associated order.
         *
         * @tags Admin Claims
         * @name AdminPostClaimsIdRequest
         * @summary Confirm a Claim Request
         * @request POST:/admin/claims/{id}/request
         * @secure
         */
        adminPostClaimsIdRequest: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminClaimRequestResponse, string | Error>>;
        /**
         * @description Cancel a requested claim.
         *
         * @tags Admin Claims
         * @name AdminDeleteClaimsIdRequest
         * @summary Cancel Claim Request
         * @request DELETE:/admin/claims/{id}/request
         * @secure
         */
        adminDeleteClaimsIdRequest: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminClaimDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of collections. The collections can be filtered by fields such as `id`. The collections can also be sorted or paginated.
         *
         * @tags Admin Collections
         * @name AdminGetCollections
         * @summary List Collections
         * @request GET:/admin/collections
         * @secure
         */
        adminGetCollections: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by the collection's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * q
             * Search term to filter the collection's searchable properties by.
             */
            q?: string;
            /** Filter by a collection's ID. */
            id?: string | string[];
            /** Filter by a collection's handle. */
            handle?: string | string[];
            /** Filter by a collection's title. */
            title?: string | string[];
            /** Filter by the collection's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the collection's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminCollectionListResponse, string | Error>>;
        /**
         * @description Create a collection.
         *
         * @tags Admin Collections
         * @name AdminPostCollections
         * @summary Create Collection
         * @request POST:/admin/collections
         * @secure
         */
        adminPostCollections: (data: AdminCreateCollection, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCollectionResponse, string | Error>>;
        /**
         * @description Retrieve a collection by its ID. You can expand the collection's relations or select the fields that should be returned using the query parameters.
         *
         * @tags Admin Collections
         * @name AdminGetCollectionsId
         * @summary Get a Collection
         * @request GET:/admin/collections/{id}
         * @secure
         */
        adminGetCollectionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCollectionResponse, string | Error>>;
        /**
         * @description Update a collection's details.
         *
         * @tags Admin Collections
         * @name AdminPostCollectionsId
         * @summary Update a Collection
         * @request POST:/admin/collections/{id}
         * @secure
         */
        adminPostCollectionsId: (id: string, data: AdminUpdateCollection, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCollectionResponse, string | Error>>;
        /**
         * @description Delete a product collection.
         *
         * @tags Admin Collections
         * @name AdminDeleteCollectionsId
         * @summary Delete a Collection
         * @request DELETE:/admin/collections/{id}
         * @secure
         */
        adminDeleteCollectionsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminCollectionDeleteResponse, string | Error>>;
        /**
         * @description Manage the products of a collection by adding or removing them from the collection.
         *
         * @tags Admin Collections
         * @name AdminPostCollectionsIdProducts
         * @summary Manage Products of a Collection
         * @request POST:/admin/collections/{id}/products
         * @secure
         */
        adminPostCollectionsIdProducts: (id: string, data: {
            /** The products to add to the collection. */
            add?: string[];
            /** The products to remove from the collection. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCollectionResponse, string | Error>>;
        /**
         * @description Retrieve a list of currencies. The currencies can be filtered by fields such as `id`. The currencies can also be sorted or paginated.
         *
         * @tags Admin Currencies
         * @name AdminGetCurrencies
         * @summary List Currencies
         * @request GET:/admin/currencies
         * @secure
         */
        adminGetCurrencies: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * The search term to filter the currency's searchable properties by.
             */
            q?: string;
            /** Filter by a currency code. */
            code?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminCurrencyListResponse, string | Error>>;
        /**
         * @description Retrieve a currency by its code. You can expand the currency's relations or select the fields that should be returned using the query parameters.
         *
         * @tags Admin Currencies
         * @name AdminGetCurrenciesCode
         * @summary Get a Currency
         * @request GET:/admin/currencies/{code}
         * @secure
         */
        adminGetCurrenciesCode: (code: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCurrencyResponse, string | Error>>;
        /**
         * @description Retrieve a list of customer groups. The customer groups can be filtered by fields such as `id`. The customer groups can also be sorted or paginated.
         *
         * @tags Admin Customer Groups
         * @name AdminGetCustomerGroups
         * @summary List Customer Groups
         * @request GET:/admin/customer-groups
         * @secure
         */
        adminGetCustomerGroups: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the customer group's searchable properties.
             */
            q?: string;
            /** Filter by a customer group's IDs. */
            id?: string | string[];
            /** Filter by a customer group's name. */
            name?: string | string[];
            /** Filter by the ID of a customer to retrieve its groups. */
            customers?: string | string[] | AdminCustomerInGroupFilters;
            /** Filter by an ID of a user to retrieve the customer groups they created. */
            created_by?: string | string[];
            /** Filter the customer group by its creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter the customer groups by their update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter the customer groups by their deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items retrieved.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items
             */
            count: number;
        } & {
            /** The list of customer groups. */
            customer_groups: AdminCustomerGroup[];
        }, string | Error>>;
        /**
         * @description Create a customer group.
         *
         * @tags Admin Customer Groups
         * @name AdminPostCustomerGroups
         * @summary Create Customer Group
         * @request POST:/admin/customer-groups
         * @secure
         */
        adminPostCustomerGroups: (data: AdminCreateCustomerGroup, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerGroupResponse, string | Error>>;
        /**
         * @description Retrieve a customer group by its ID. You can expand the customer group's relations or select the fields that should be returned.
         *
         * @tags Admin Customer Groups
         * @name AdminGetCustomerGroupsId
         * @summary Get a Customer Group
         * @request GET:/admin/customer-groups/{id}
         * @secure
         */
        adminGetCustomerGroupsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerGroupResponse, string | Error>>;
        /**
         * @description Update a customer group's details.
         *
         * @tags Admin Customer Groups
         * @name AdminPostCustomerGroupsId
         * @summary Update a Customer Group
         * @request POST:/admin/customer-groups/{id}
         * @secure
         */
        adminPostCustomerGroupsId: (id: string, data: AdminUpdateCustomerGroup, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerGroupResponse, string | Error>>;
        /**
         * @description Delete a customer group. Customers in the group aren't deleted.
         *
         * @tags Admin Customer Groups
         * @name AdminDeleteCustomerGroupsId
         * @summary Delete a Customer Group
         * @request DELETE:/admin/customer-groups/{id}
         * @secure
         */
        adminDeleteCustomerGroupsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The customer group's ID.
             */
            id: string;
            /**
             * object
             * The customer group's object.
             */
            object: string;
            /**
             * deleted
             * The customer group's deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Manage the customers of a group to add or remove them from the group.
         *
         * @tags Admin Customer Groups
         * @name AdminPostCustomerGroupsIdCustomers
         * @summary Manage Customers of a Customer Group
         * @request POST:/admin/customer-groups/{id}/customers
         * @secure
         */
        adminPostCustomerGroupsIdCustomers: (id: string, data: {
            /** The customers to add to the group. */
            add?: string[];
            /** The customers to remove from the group. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerGroupResponse, string | Error>>;
        /**
         * @description Retrieve a list of customers. The customers can be filtered by fields such as `id`. The customers can also be sorted or paginated.
         *
         * @tags Admin Customers
         * @name AdminGetCustomers
         * @summary List Customers
         * @request GET:/admin/customers
         * @secure
         */
        adminGetCustomers: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a customer group's ID to retrieve customers that belong to it. */
            groups?: string | CustomerGroupInCustomerFilters | string[];
            /**
             * q
             * Search term to filter the customer's searchable properties by.
             */
            q?: string;
            /** Filter by a customer's ID. */
            id?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a customer email. */
            email?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a customer's company name. */
            company_name?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a customer's first name. */
            first_name?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a customer's last name. */
            last_name?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a user ID to retrieve the customers they created. */
            created_by?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the customer's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a customer's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter a customer by their deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /**
             * has_account
             * Filter by whether the customer is registered.
             */
            has_account?: boolean;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned in the list.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The customer's details. */
            customers: AdminCustomer;
        }, string | Error>>;
        /**
         * @description Create a customer.
         *
         * @tags Admin Customers
         * @name AdminPostCustomers
         * @summary Create Customer
         * @request POST:/admin/customers
         * @secure
         */
        adminPostCustomers: (data: {
            /**
             * email
             * The customer's email.
             * @format email
             */
            email: string;
            /**
             * company_name
             * The customer's company name.
             */
            company_name: string;
            /**
             * first_name
             * The customer's first name.
             */
            first_name: string;
            /**
             * last_name
             * The customer's last name.
             */
            last_name: string;
            /**
             * phone
             * The customer's phone.
             */
            phone: string;
            /** The customer's metadata. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerResponse, string | Error>>;
        /**
         * @description Retrieve a customer by its ID. You can expand the customer's relations or select the fields that should be returned.
         *
         * @tags Admin Customers
         * @name AdminGetCustomersId
         * @summary Get a Customer
         * @request GET:/admin/customers/{id}
         * @secure
         */
        adminGetCustomersId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerResponse, string | Error>>;
        /**
         * @description Update a customer's details.
         *
         * @tags Admin Customers
         * @name AdminPostCustomersId
         * @summary Update a Customer
         * @request POST:/admin/customers/{id}
         * @secure
         */
        adminPostCustomersId: (id: string, data: {
            /**
             * email
             * The customer's email.
             * @format email
             */
            email: string;
            /**
             * company_name
             * The customer's company name.
             */
            company_name: string;
            /**
             * first_name
             * The customer's first name.
             */
            first_name: string;
            /**
             * last_name
             * The customer's last name.
             */
            last_name: string;
            /**
             * phone
             * The customer's phone.
             */
            phone: string;
            /** The customer's metadata. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerResponse, string | Error>>;
        /**
         * @description Delete a customer.
         *
         * @tags Admin Customers
         * @name AdminDeleteCustomersId
         * @summary Delete a Customer
         * @request DELETE:/admin/customers/{id}
         * @secure
         */
        adminDeleteCustomersId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The customer's ID.
             */
            id: string;
            /**
             * object
             * The customer's object.
             */
            object: string;
            /**
             * deleted
             * The customer's deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Retrieve a list of addresses in a customer. The addresses can be filtered by fields like `query`. The addresses can also be paginated.
         *
         * @tags Admin Customers
         * @name AdminGetCustomersIdAddresses
         * @summary List Addresses
         * @request GET:/admin/customers/{id}/addresses
         * @secure
         */
        adminGetCustomersIdAddresses: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to apply on the address's searchable properties.
             */
            q?: string;
            /** Filter by a company. */
            company?: string | string[];
            /** Filter by a city. */
            city?: string | string[];
            /** Filter by a currency code. */
            country_code?: string | string[];
            /** Filter by a province. */
            province?: string | string[];
            /** Filter by a postal code. */
            postal_code?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The customer addresses. */
            addresses: AdminCustomerAddress[];
        }, string | Error>>;
        /**
         * @description Add an address to a customer.
         *
         * @tags Admin Customers
         * @name AdminPostCustomersIdAddresses
         * @summary Add a Customer Address
         * @request POST:/admin/customers/{id}/addresses
         * @secure
         */
        adminPostCustomersIdAddresses: (id: string, data: {
            /**
             * address_name
             * The name of the address.
             */
            address_name: string;
            /**
             * is_default_shipping
             * Whether this address is used by default for shipping when placing an order.
             */
            is_default_shipping?: boolean;
            /**
             * is_default_billing
             * Whether this address is used by default for billing when placing an order.
             */
            is_default_billing?: boolean;
            /**
             * company
             * The address's company.
             */
            company: string;
            /**
             * first_name
             * The address's first name.
             */
            first_name: string;
            /**
             * last_name
             * The address's last name.
             */
            last_name: string;
            /**
             * address_1
             * The address's first line.
             */
            address_1: string;
            /**
             * address_2
             * The address's second line.
             */
            address_2: string;
            /**
             * city
             * The address's city.
             */
            city: string;
            /**
             * country_code
             * The address's country code.
             */
            country_code: string;
            /**
             * province
             * The address's province.
             */
            province: string;
            /**
             * postal_code
             * The address's postal code.
             */
            postal_code: string;
            /**
             * phone
             * The address's phone.
             */
            phone: string;
            /** The address's metadata. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerResponse, string | Error>>;
        /**
         * @description Retrieve a list of a customer's addresses. The addresses can be filtered by fields like `company`. The addresses can also be paginated.
         *
         * @tags Admin Customers
         * @name AdminGetCustomersIdAddressesAddressId
         * @summary List Addresses
         * @request GET:/admin/customers/{id}/addresses/{address_id}
         * @secure
         */
        adminGetCustomersIdAddressesAddressId: (id: string, addressId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerAddressResponse, string | Error>>;
        /**
         * @description Update a customer address's details.
         *
         * @tags Admin Customers
         * @name AdminPostCustomersIdAddressesAddressId
         * @summary Update a Customer's Address
         * @request POST:/admin/customers/{id}/addresses/{address_id}
         * @secure
         */
        adminPostCustomersIdAddressesAddressId: (id: string, addressId: string, data: {
            /**
             * address_name
             * The name of the address.
             */
            address_name: string;
            /**
             * is_default_shipping
             * Whether this address is used by default for shipping when placing an order.
             */
            is_default_shipping?: boolean;
            /**
             * is_default_billing
             * Whether this address is used by default for billing when placing an order.
             */
            is_default_billing?: boolean;
            /**
             * company
             * The address's company.
             */
            company: string;
            /**
             * first_name
             * The address's first name.
             */
            first_name: string;
            /**
             * last_name
             * The address's last name.
             */
            last_name: string;
            /**
             * address_1
             * The address's first line
             */
            address_1: string;
            /**
             * address_2
             * The address's second line
             */
            address_2: string;
            /**
             * city
             * The address's city.
             */
            city: string;
            /**
             * country_code
             * The address's country code.
             */
            country_code: string;
            /**
             * province
             * The address's province.
             */
            province: string;
            /**
             * postal_code
             * The address's postal code.
             */
            postal_code: string;
            /**
             * phone
             * The address's phone.
             */
            phone: string;
            /** The address's metadata. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerResponse, string | Error>>;
        /**
         * @description Remove a customer's address.
         *
         * @tags Admin Customers
         * @name AdminDeleteCustomersIdAddressesAddressId
         * @summary Remove an Address from Customer
         * @request DELETE:/admin/customers/{id}/addresses/{address_id}
         * @secure
         */
        adminDeleteCustomersIdAddressesAddressId: (id: string, addressId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The customer's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             */
            object: string;
            /**
             * deleted
             * Whether the Customer was deleted.
             */
            deleted: boolean;
        } & {
            /** The customer's details. */
            parent?: AdminCustomer;
        }, string | Error>>;
        /**
         * @description Manage the customer groups of a customer, adding or removing the customer from those groups.
         *
         * @tags Admin Customers
         * @name AdminPostCustomersIdCustomerGroups
         * @summary Manage Customer Groups of Customer
         * @request POST:/admin/customers/{id}/customer-groups
         * @secure
         */
        adminPostCustomersIdCustomerGroups: (id: string, data: {
            /** The customer groups to add the customer to. */
            add?: string[];
            /** The customer groups to remove the customer from. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminCustomerResponse, string | Error>>;
        /**
         * @description Retrieve a list of draft orders. The draft orders can be filtered by fields such as `id`. The draft orders can also be sorted or paginated.
         *
         * @tags Admin Draft Orders
         * @name AdminGetDraftOrders
         * @summary List Draft Orders
         * @request GET:/admin/draft-orders
         * @secure
         */
        adminGetDraftOrders: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a draft order's ID. */
            id?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a draft order's status. */
            status?: string | string[] | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[] | (string | string[])[];
                /** Filter by values not equal to this parameter. */
                $ne?: string | string[];
                /** Filter by values in this array. */
                $in?: (string | string[])[];
                /** Filter by values not in this array. */
                $nin?: (string | string[])[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[] | (string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                })[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string | string[];
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string | string[];
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string | string[];
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string | string[];
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /** Filter by the associated sales channels to retrieve its draft orders. */
            sales_channel_id?: string[];
            /** Filter by region IDs to retrieve their associated draft orders. */
            region_id?: string | string[];
            /**
             * q
             * Search term to filter the order's searchable properties.
             */
            q?: string;
            /** Filter by the draft order's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the draft order's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** The draft order's customer id. */
            customer_id?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminDraftOrderListResponse, string | Error>>;
        /**
         * @description Create a draft order. This creates an order with the `is_draft_order` property enabled.
         *
         * @tags Admin Draft Orders
         * @name AdminPostDraftOrders
         * @summary Create Draft Order
         * @request POST:/admin/draft-orders
         * @secure
         */
        adminPostDraftOrders: (data: {
            /**
             * status
             * The draft order's status.
             */
            status?: "completed";
            /**
             * sales_channel_id
             * The ID of the associated sales channel.
             */
            sales_channel_id: string;
            /**
             * email
             * The email of the draft order's customer.
             * @format email
             */
            email: string;
            /**
             * customer_id
             * The ID of the draft order's customer.
             */
            customer_id: string;
            /** The billing address's details. */
            billing_address?: {
                /**
                 * first_name
                 * The billing address's first name.
                 */
                first_name: string;
                /**
                 * last_name
                 * The billing address's last name.
                 */
                last_name: string;
                /**
                 * phone
                 * The billing address's phone.
                 */
                phone: string;
                /**
                 * company
                 * The billing address's company.
                 */
                company: string;
                /**
                 * address_1
                 * The billing address's first line.
                 */
                address_1: string;
                /**
                 * address_2
                 * The billing address's second line.
                 */
                address_2: string;
                /**
                 * city
                 * The billing address's city.
                 */
                city: string;
                /**
                 * country_code
                 * The billing address's country code.
                 */
                country_code: string;
                /**
                 * province
                 * The billing address's province.
                 */
                province: string;
                /**
                 * postal_code
                 * The billing address's postal code.
                 */
                postal_code: string;
                /** The billing address's metadata. */
                metadata: object;
            };
            /** The draft order's shipping address. */
            shipping_address?: {
                /**
                 * first_name
                 * The shipping address's first name.
                 */
                first_name: string;
                /**
                 * last_name
                 * The shipping address's last name.
                 */
                last_name: string;
                /**
                 * phone
                 * The shipping address's phone.
                 */
                phone: string;
                /**
                 * company
                 * The shipping address's company.
                 */
                company: string;
                /**
                 * address_1
                 * The shipping address's first line.
                 */
                address_1: string;
                /**
                 * address_2
                 * The shipping address's second line.
                 */
                address_2: string;
                /**
                 * city
                 * The shipping address's city.
                 */
                city: string;
                /**
                 * country_code
                 * The shipping address's country code.
                 */
                country_code: string;
                /**
                 * province
                 * The shipping address's province.
                 */
                province: string;
                /**
                 * postal_code
                 * The shipping address's postal code.
                 */
                postal_code: string;
                /** The shipping address's metadata. */
                metadata: object;
            };
            /** The draft order's items. */
            items?: {
                /**
                 * title
                 * The item's title.
                 */
                title: string;
                /**
                 * sku
                 * The item's SKU.
                 */
                sku: string;
                /**
                 * barcode
                 * The item's barcode.
                 */
                barcode: string;
                /**
                 * variant_id
                 * The ID of the associated product variant.
                 */
                variant_id: string;
                /** The item's unit price. */
                unit_price: string | number | {
                    /**
                     * value
                     * The unit price's value.
                     */
                    value: string;
                    /**
                     * precision
                     * The unit price's rounding precision.
                     */
                    precision: number;
                };
                /**
                 * quantity
                 * The item's ordered quantity.
                 */
                quantity: number;
                /** The item's metadata. */
                metadata: object;
            }[];
            /**
             * region_id
             * The ID of the associated region.
             */
            region_id: string;
            /** The promotion codes applied on the draft order. */
            promo_codes?: string[];
            /**
             * currency_code
             * The draft order's currency code.
             */
            currency_code: string;
            /**
             * no_notification_order
             * Whether to send the customer notifications on order changes.
             */
            no_notification_order?: boolean;
            /** The draft order's shipping methods. */
            shipping_methods: {
                /**
                 * shipping_method_id
                 * The ID of an existing shipping method.
                 */
                shipping_method_id?: string;
                /**
                 * name
                 * The shipping method's name.
                 */
                name: string;
                /**
                 * option_id
                 * The ID of the shipping option this method is created from.
                 */
                option_id: string;
                /** The shipping method's data, useful for fulfillment providers. */
                data?: object;
                /** The shipping method's amount. */
                amount: string | number | {
                    /**
                     * value
                     * The amount's value.
                     */
                    value: string;
                    /**
                     * precision
                     * The amount's rounding precision.
                     */
                    precision: number;
                };
            }[];
            /** The draft order's metadata. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminDraftOrderResponse, string | Error>>;
        /**
         * @description Retrieve a draft order by its ID. You can expand the draft order's relations or select the fields that should be returned using the query parameters.
         *
         * @tags Admin Draft Orders
         * @name AdminGetDraftOrdersId
         * @summary Get a Draft Order
         * @request GET:/admin/draft-orders/{id}
         * @secure
         */
        adminGetDraftOrdersId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminDraftOrderResponse, string | Error>>;
        /**
         * @description Update a draft order's details.
         *
         * @tags Admin Draft Orders
         * @name AdminPostDraftOrdersId
         * @summary Update a Draft Order
         * @request POST:/admin/draft-orders/{id}
         * @secure
         */
        adminPostDraftOrdersId: (id: string, data: AdminUpdateDraftOrder, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminDraftOrderResponse, string | Error>>;
        /**
         * @description Retrieve a list of exchanges. The exchanges can be filtered by fields such as `id`. The exchanges can also be sorted or paginated.
         *
         * @tags Admin Exchanges
         * @name AdminGetExchanges
         * @summary List Exchanges
         * @request GET:/admin/exchanges
         * @secure
         */
        adminGetExchanges: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by an exchange's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by an exchange ID. */
            id?: string | string[];
            /** Filter by an exchange's order ID. */
            order_id?: string | string[];
            /** Filter by an exchange's status. */
            status?: string | string[];
            /** Filter by the exchange's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the exchange's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The exchange's exchanges. */
            exchanges: AdminExchange[];
        }, string | Error>>;
        /**
         * @description Create an exchange request. Its changes aren't applied on the order until the exchange is confirmed.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchanges
         * @summary Create Exchange
         * @request POST:/admin/exchanges
         * @secure
         */
        adminPostExchanges: (data: AdminPostOrderExchangesReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangeOrderResponse, string | Error>>;
        /**
         * @description Retrieve an exchange by its ID. You can expand the exchange's relations or select the fields that should be returned using query parameters.
         *
         * @tags Admin Exchanges
         * @name AdminGetExchangesId
         * @summary Get an Exchange
         * @request GET:/admin/exchanges/{id}
         * @secure
         */
        adminGetExchangesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangeResponse, string | Error>>;
        /**
         * @description Cancel an exchange and its associated return.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdCancel
         * @summary Cancel an Exchange
         * @request POST:/admin/exchanges/{id}/cancel
         * @secure
         */
        adminPostExchangesIdCancel: (id: string, data: AdminPostCancelExchangeReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminExchangeResponse, string | Error>>;
        /**
         * @description Add inbound (or return) items to an exchange. These inbound items will have the action `RETURN_ITEM`.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdInboundItems
         * @summary Add Inbound Items to an Exchange
         * @request POST:/admin/exchanges/{id}/inbound/items
         * @secure
         */
        adminPostExchangesIdInboundItems: (id: string, data: AdminPostExchangesReturnRequestItemsReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminExchangeReturnResponse, string | Error>>;
        /**
         * @description Update an inbound (or return) item from an exchange using the `ID` of the item's `RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdInboundItemsActionId
         * @summary Update an Inbount Item of an Exchange
         * @request POST:/admin/exchanges/{id}/inbound/items/{action_id}
         * @secure
         */
        adminPostExchangesIdInboundItemsActionId: (id: string, actionId: string, data: AdminPostExchangesRequestItemsReturnActionReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminExchangeReturnResponse, string | Error>>;
        /**
         * @description Remove an inbound (or return) item from an exchange using the `ID` of the item's `RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminDeleteExchangesIdInboundItemsActionId
         * @summary Remove Inbound Item from Exchange
         * @request DELETE:/admin/exchanges/{id}/inbound/items/{action_id}
         * @secure
         */
        adminDeleteExchangesIdInboundItemsActionId: (id: string, actionId: string, params?: RequestParams) => Promise<HttpResponse<AdminExchangeReturnResponse, string | Error>>;
        /**
         * @description Add an inbound (or return) shipping method to an exchange. The inbound shipping method will have a `SHIPPING_ADD` action.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdInboundShippingMethod
         * @summary Add an Inbound Shipping Method to an Exchange
         * @request POST:/admin/exchanges/{id}/inbound/shipping-method
         * @secure
         */
        adminPostExchangesIdInboundShippingMethod: (id: string, data: AdminPostReturnsShippingReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminExchangeReturnResponse, string | Error>>;
        /**
         * @description Update the shipping method for returning items in the exchange using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdInboundShippingMethodActionId
         * @summary Update Inbound Shipping Method of an Exchange
         * @request POST:/admin/exchanges/{id}/inbound/shipping-method/{action_id}
         * @secure
         */
        adminPostExchangesIdInboundShippingMethodActionId: (id: string, actionId: string, data: AdminPostExchangesShippingActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Remove the shipping method for returning items in the exchange using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminDeleteExchangesIdInboundShippingMethodActionId
         * @summary Remove Inbound Shipping Method from Exchange
         * @request DELETE:/admin/exchanges/{id}/inbound/shipping-method/{action_id}
         * @secure
         */
        adminDeleteExchangesIdInboundShippingMethodActionId: (id: string, actionId: string, params?: RequestParams) => Promise<HttpResponse<AdminExchangeReturnResponse, string | Error>>;
        /**
         * @description Add outbound (or new) items to an exchange. These outbound items will have the action `ITEM_ADD`.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdOutboundItems
         * @summary Add Outbound Items to Exchange
         * @request POST:/admin/exchanges/{id}/outbound/items
         * @secure
         */
        adminPostExchangesIdOutboundItems: (id: string, data: AdminPostExchangesAddItemsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Update an outbound (or new) item from an exchange using the `ID` of the item's `ITEM_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdOutboundItemsActionId
         * @summary Update Outbound Item of an Exchange
         * @request POST:/admin/exchanges/{id}/outbound/items/{action_id}
         * @secure
         */
        adminPostExchangesIdOutboundItemsActionId: (id: string, actionId: string, data: AdminPostExchangesItemsActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Remove an outbound (or new) item from an exchange using the `ID` of the item's `ITEM_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminDeleteExchangesIdOutboundItemsActionId
         * @summary Remove Outbound Item from Exchange
         * @request DELETE:/admin/exchanges/{id}/outbound/items/{action_id}
         * @secure
         */
        adminDeleteExchangesIdOutboundItemsActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Add an outbound shipping method to an exchange. The outbound shipping method will have a `SHIPPING_ADD` action.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdOutboundShippingMethod
         * @summary Add Outbound Shipping Method to Exchange
         * @request POST:/admin/exchanges/{id}/outbound/shipping-method
         * @secure
         */
        adminPostExchangesIdOutboundShippingMethod: (id: string, data: AdminPostExchangesShippingReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Update the shipping method for delivering outbound items in the exchange using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdOutboundShippingMethodActionId
         * @summary Update Outbound Shipping Method of Exchange
         * @request POST:/admin/exchanges/{id}/outbound/shipping-method/{action_id}
         * @secure
         */
        adminPostExchangesIdOutboundShippingMethodActionId: (id: string, actionId: string, data: AdminPostExchangesShippingActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Remove the shipping method for delivering outbound items in the exchange using the `ID` of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Exchanges
         * @name AdminDeleteExchangesIdOutboundShippingMethodActionId
         * @summary Remove Outbound Shipping Method from Exchange
         * @request DELETE:/admin/exchanges/{id}/outbound/shipping-method/{action_id}
         * @secure
         */
        adminDeleteExchangesIdOutboundShippingMethodActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangePreviewResponse, string | Error>>;
        /**
         * @description Confirm an exchange request, applying its changes on the associated order.
         *
         * @tags Admin Exchanges
         * @name AdminPostExchangesIdRequest
         * @summary Confirm an Exchange
         * @request POST:/admin/exchanges/{id}/request
         * @secure
         */
        adminPostExchangesIdRequest: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExchangeRequestResponse, string | Error>>;
        /**
         * @description Cancel a requested exchange.
         *
         * @tags Admin Exchanges
         * @name AdminDeleteExchangesIdRequest
         * @summary Cancel Exchange Request
         * @request DELETE:/admin/exchanges/{id}/request
         * @secure
         */
        adminDeleteExchangesIdRequest: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminExchangeDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of fulfillment providers. The fulfillment providers can be filtered by fields such as `id`. The fulfillment providers can also be sorted or paginated.
         *
         * @tags Admin Fulfillment Providers
         * @name AdminGetFulfillmentProviders
         * @summary List Fulfillment Providers
         * @request GET:/admin/fulfillment-providers
         * @secure
         */
        adminGetFulfillmentProviders: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a fulfillment provider's ID. */
            id?: string | string[];
            /**
             * is_enabled
             * Filter by whether the fulfillment provider is enabled.
             */
            is_enabled?: boolean;
            /**
             * q
             * Search term to filter a fulfillment provider's searchable properties.
             */
            q?: string;
            /** Filter by associated stock location's ID. */
            stock_location_id?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentProviderListResponse, string | Error>>;
        /**
         * @description Retrieve the list of fulfillment options of a fulfillment provider. These options may be retrieved from an integrated third-party service.
         *
         * @tags Admin Fulfillment Providers
         * @name AdminGetFulfillmentProvidersIdOptions
         * @summary List Fulfillment Options
         * @request GET:/admin/fulfillment-providers/{id}/options
         * @secure
         */
        adminGetFulfillmentProvidersIdOptions: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentProviderOptionsListResponse, string | Error>>;
        /**
         * @description Delete a fulfillment set.
         *
         * @tags Admin Fulfillment Sets
         * @name AdminDeleteFulfillmentSetsId
         * @summary Delete Fulfillment Set
         * @request DELETE:/admin/fulfillment-sets/{id}
         * @secure
         */
        adminDeleteFulfillmentSetsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentSetDeleteResponse, string | Error>>;
        /**
         * @description Add a service zone to a fulfillment set.
         *
         * @tags Admin Fulfillment Sets
         * @name AdminPostFulfillmentSetsIdServiceZones
         * @summary Add a Service Zone to a Fulfillment Set
         * @request POST:/admin/fulfillment-sets/{id}/service-zones
         * @secure
         */
        adminPostFulfillmentSetsIdServiceZones: (id: string, data: {
            /**
             * name
             * The service zone's name.
             */
            name: string;
            /** The service zone's geo zones. */
            geo_zones?: ({
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * type
                 * The geo zone's type.
                 * @default "country"
                 */
                type: string;
            } | {
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * type
                 * The geo zone's type.
                 * @default "province"
                 */
                type: string;
                /**
                 * province_code
                 * The geo zone's province code.
                 */
                province_code: string;
            } | {
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * type
                 * The geo zone's type.
                 * @default "city"
                 */
                type: string;
                /**
                 * province_code
                 * The geo zone's province code.
                 */
                province_code: string;
                /**
                 * city
                 * The geo zone's city.
                 */
                city: string;
            } | {
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * type
                 * The geo zone's type.
                 * @default "zip"
                 */
                type: string;
                /**
                 * province_code
                 * The geo zone's province code.
                 */
                province_code: string;
                /**
                 * city
                 * The geo zone's city.
                 */
                city: string;
                /** The geo zone's postal expression or ZIP code. */
                postal_expression: object;
            })[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentSetResponse, string | Error>>;
        /**
         * @description Retrieve a service zone that belongs to a fulfillment set. be paginated.
         *
         * @tags Admin Fulfillment Sets
         * @name AdminGetFulfillmentSetsIdServiceZonesZoneId
         * @summary Get a Service Zone in a Fulfillment Set
         * @request GET:/admin/fulfillment-sets/{id}/service-zones/{zone_id}
         * @secure
         */
        adminGetFulfillmentSetsIdServiceZonesZoneId: (id: string, zoneId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminServiceZoneResponse, string | Error>>;
        /**
         * @description Update the details of a service zone in a fulfillment set.
         *
         * @tags Admin Fulfillment Sets
         * @name AdminPostFulfillmentSetsIdServiceZonesZoneId
         * @summary Update the Service Zone of a Fulfillment Set
         * @request POST:/admin/fulfillment-sets/{id}/service-zones/{zone_id}
         * @secure
         */
        adminPostFulfillmentSetsIdServiceZonesZoneId: (id: string, zoneId: string, data: {
            /**
             * name
             * The service zone's name.
             */
            name?: string;
            /** The service zone's associated geo zones. */
            geo_zones?: ({
                /**
                 * type
                 * The geo zone's type.
                 * @default "country"
                 */
                type: string;
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * id
                 * The ID of an existing geo zone.
                 */
                id?: string;
            } | {
                /**
                 * type
                 * The geo zone's type.
                 * @default "province"
                 */
                type: string;
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * province_code
                 * The geo zone's province code.
                 */
                province_code: string;
                /**
                 * id
                 * The ID of an existing geo zone.
                 */
                id?: string;
            } | {
                /**
                 * type
                 * The geo zone's type.
                 * @default "city"
                 */
                type: string;
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * city
                 * The geo zone's city.
                 */
                city: string;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * province_code
                 * The geo zone's province code.
                 */
                province_code: string;
                /**
                 * id
                 * The ID of an existing geo zone.
                 */
                id?: string;
            } | {
                /**
                 * type
                 * The geo zone's type.
                 * @default "zip"
                 */
                type: string;
                /** The geo zone's metadata. */
                metadata: object;
                /**
                 * city
                 * The geo zone's city.
                 */
                city: string;
                /**
                 * country_code
                 * The geo zone's country code.
                 */
                country_code: string;
                /**
                 * province_code
                 * The geo zone's province code.
                 */
                province_code: string;
                /** The geo zone's postal expression or ZIP code. */
                postal_expression: object;
                /**
                 * id
                 * The ID of an existing geo zone.
                 */
                id?: string;
            })[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentSetResponse, string | Error>>;
        /**
         * @description Remove a service zone that belongs to a fulfillment set.
         *
         * @tags Admin Fulfillment Sets
         * @name AdminDeleteFulfillmentSetsIdServiceZonesZoneId
         * @summary Remove a Service Zone from Fulfillment Set
         * @request DELETE:/admin/fulfillment-sets/{id}/service-zones/{zone_id}
         * @secure
         */
        adminDeleteFulfillmentSetsIdServiceZonesZoneId: (id: string, zoneId: string, params?: RequestParams) => Promise<HttpResponse<AdminServiceZoneDeleteResponse, string | Error>>;
        /**
         * @description Create a fulfillment for an order, return, exchange, and more.
         *
         * @tags Admin Fulfillments
         * @name AdminPostFulfillments
         * @summary Create Fulfillment
         * @request POST:/admin/fulfillments
         * @secure
         */
        adminPostFulfillments: (data: AdminCreateFulfillment, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentResponse, string | Error>>;
        /**
         * @description Cancel a fulfillment. The fulfillment can't be shipped or delivered. To cancel the fulfillment, the `cancelFulfillment` method of the associated fulfillment provider is used.
         *
         * @tags Admin Fulfillments
         * @name AdminPostFulfillmentsIdCancel
         * @summary Cancel a Fulfillment
         * @request POST:/admin/fulfillments/{id}/cancel
         * @secure
         */
        adminPostFulfillmentsIdCancel: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentResponse, string | Error>>;
        /**
         * @description Create a shipment for a fulfillment. The fulfillment must not be shipped or canceled.
         *
         * @tags Admin Fulfillments
         * @name AdminPostFulfillmentsIdShipment
         * @summary Create a Shipment for a Fulfillment
         * @request POST:/admin/fulfillments/{id}/shipment
         * @secure
         */
        adminPostFulfillmentsIdShipment: (id: string, data: AdminCreateShipment, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminFulfillmentResponse, string | Error>>;
        /**
         * @description Retrieve a list of inventory items. The inventory items can be filtered by fields such as `id`. The inventory items can also be sorted or paginated.
         *
         * @tags Admin Inventory Items
         * @name AdminGetInventoryItems
         * @summary List Inventory Items
         * @request GET:/admin/inventory-items
         * @secure
         */
        adminGetInventoryItems: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * The inventory item's q.
             */
            q?: string;
            /** The inventory item's ID. */
            id?: string | string[];
            /** The inventory item's sku. */
            sku?: string | string[];
            /** The inventory item's origin country. */
            origin_country?: string | string[];
            /** The inventory item's mid code. */
            mid_code?: string | string[];
            /** The inventory item's hs code. */
            hs_code?: string | string[];
            /** The inventory item's material. */
            material?: string | string[];
            /**
             * requires_shipping
             * The inventory item's requires shipping.
             */
            requires_shipping?: boolean;
            /** Filter the inventory item's weight. */
            weight?: {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter the inventory item's length. */
            length?: {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by the inventory item's height. */
            height?: {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by the inventory item's width. */
            width?: {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by the inventory item's associated location IDs. */
            location_levels?: {
                /** The associated location's ID. */
                location_id: string | string[];
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The inventory item's inventory items. */
            inventory_items: AdminInventoryItem[];
        }, string | Error>>;
        /**
         * @description Create an inventory item.
         *
         * @tags Admin Inventory Items
         * @name AdminPostInventoryItems
         * @summary Create Inventory Item
         * @request POST:/admin/inventory-items
         * @secure
         */
        adminPostInventoryItems: (data: AdminCreateInventoryItem, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInventoryItemResponse, string | Error>>;
        /**
         * @description Manage inventory levels to create, update, or delete them.
         *
         * @tags Admin Inventory Items
         * @name AdminPostInventoryItemsLocationLevelsBatch
         * @summary Manage Inventory Levels
         * @request POST:/admin/inventory-items/location-levels/batch
         * @secure
         */
        adminPostInventoryItemsLocationLevelsBatch: (data: AdminBatchInventoryItemsLocationLevels, params?: RequestParams) => Promise<HttpResponse<AdminBatchInventoryItemsLocationLevelsResponse, string | Error>>;
        /**
         * @description Retrieve a inventory item by its ID. You can expand the inventory item's relations or select the fields that should be returned.
         *
         * @tags Admin Inventory Items
         * @name AdminGetInventoryItemsId
         * @summary Get a Inventory Item
         * @request GET:/admin/inventory-items/{id}
         * @secure
         */
        adminGetInventoryItemsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInventoryItemResponse, string | Error>>;
        /**
         * @description Update an inventory item's details.
         *
         * @tags Admin Inventory Items
         * @name AdminPostInventoryItemsId
         * @summary Update an Inventory Item
         * @request POST:/admin/inventory-items/{id}
         * @secure
         */
        adminPostInventoryItemsId: (id: string, data: {
            /**
             * sku
             * The inventory item's SKU.
             */
            sku?: string;
            /**
             * hs_code
             * The inventory item's HS code.
             */
            hs_code?: string;
            /**
             * weight
             * The inventory item's weight.
             */
            weight?: number;
            /**
             * length
             * The inventory item's length.
             */
            length?: number;
            /**
             * height
             * The inventory item's height.
             */
            height?: number;
            /**
             * width
             * The inventory item's width.
             */
            width?: number;
            /**
             * origin_country
             * The inventory item's origin country.
             */
            origin_country?: string;
            /**
             * mid_code
             * The inventory item's MID code.
             */
            mid_code?: string;
            /**
             * material
             * The inventory item's material.
             */
            material?: string;
            /**
             * title
             * The inventory item's title.
             */
            title?: string;
            /**
             * description
             * The inventory item's description.
             */
            description?: string;
            /**
             * requires_shipping
             * Whether the inventory item requires shipping.
             */
            requires_shipping?: boolean;
            /**
             * thumbnail
             * The URL of an image to be used as the inventory item's thumbnail. You can use the Upload API routes to upload an image and get its URL.
             */
            thumbnail?: string;
            /** The inventory item's metadata. Can be custom data in key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInventoryItemResponse, string | Error>>;
        /**
         * @description Delete an inventory item.
         *
         * @tags Admin Inventory Items
         * @name AdminDeleteInventoryItemsId
         * @summary Delete Inventory Item
         * @request DELETE:/admin/inventory-items/{id}
         * @secure
         */
        adminDeleteInventoryItemsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The inventory item's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "inventory_item"
             */
            object: string;
            /**
             * deleted
             * Whether the inventory item was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Retrieve a list of inventory levels associated with an inventory item. The inventory levels can be filtered by fields like `location_id`. The inventory levels can also be paginated.
         *
         * @tags Admin Inventory Items
         * @name AdminGetInventoryItemsIdLocationLevels
         * @summary List Inventory Levels
         * @request GET:/admin/inventory-items/{id}/location-levels
         * @secure
         */
        adminGetInventoryItemsIdLocationLevels: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The inventory item's inventory levels. */
            inventory_levels: InventoryLevel[];
        }, string | Error>>;
        /**
         * @description Create an inventory level for an inventory item.
         *
         * @tags Admin Inventory Items
         * @name AdminPostInventoryItemsIdLocationLevels
         * @summary Create Inventory Level for Inventory Item
         * @request POST:/admin/inventory-items/{id}/location-levels
         * @secure
         */
        adminPostInventoryItemsIdLocationLevels: (id: string, data: {
            /**
             * location_id
             * The ID of the associated location.
             */
            location_id: string;
            /**
             * stocked_quantity
             * The inventory level's stocked quantity.
             */
            stocked_quantity?: number;
            /**
             * incoming_quantity
             * The inventory level's incoming quantity.
             */
            incoming_quantity?: number;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInventoryItemResponse, string | Error>>;
        /**
         * @description Manage the inventory levels of an inventory item to create or delete them.
         *
         * @tags Admin Inventory Items
         * @name AdminPostInventoryItemsIdLocationLevelsBatch
         * @summary Manage Inventory Levels of Inventory Item
         * @request POST:/admin/inventory-items/{id}/location-levels/batch
         * @secure
         */
        adminPostInventoryItemsIdLocationLevelsBatch: (id: string, data: AdminBatchInventoryItemLocationsLevel, params?: RequestParams) => Promise<HttpResponse<any, string | Error>>;
        /**
         * @description Updates the details of an inventory item's inventory level using its associated location ID.
         *
         * @tags Admin Inventory Items
         * @name AdminPostInventoryItemsIdLocationLevelsLocationId
         * @summary Update an Inventory Level of an Inventory Item
         * @request POST:/admin/inventory-items/{id}/location-levels/{location_id}
         * @secure
         */
        adminPostInventoryItemsIdLocationLevelsLocationId: (id: string, locationId: string, data: {
            /**
             * stocked_quantity
             * The inventory level's stocked quantity.
             */
            stocked_quantity?: number;
            /**
             * incoming_quantity
             * The inventory level's incoming quantity.
             */
            incoming_quantity?: number;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInventoryItemResponse, string | Error>>;
        /**
         * @description Remove the inventory level of an inventory item. If the inventory level has reserved quantity greater than `0`, an error is thrown.
         *
         * @tags Admin Inventory Items
         * @name AdminDeleteInventoryItemsIdLocationLevelsLocationId
         * @summary Remove Inventory Level of Inventory Item
         * @request DELETE:/admin/inventory-items/{id}/location-levels/{location_id}
         * @secure
         */
        adminDeleteInventoryItemsIdLocationLevelsLocationId: (id: string, locationId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The inventory item's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             */
            object: string;
            /**
             * deleted
             * Whether the Inventory Item was deleted.
             */
            deleted: boolean;
        } & {
            /** The inventory item's details. */
            parent?: AdminInventoryItem;
        }, string | Error>>;
        /**
         * @description Retrieve a list of invites. The invites can be filtered by fields such as `id`. The invites can also be sorted or paginated.
         *
         * @tags Admin Invites
         * @name AdminGetInvites
         * @summary List Invites
         * @request GET:/admin/invites
         * @secure
         */
        adminGetInvites: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to apply on an invite's searchable properties.
             */
            q?: string;
            /** Filter by an invite's ID. */
            id?: string | string[];
            /** Filter by an invite's email. */
            email?: string | string[];
            /** Filter by the invite's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the invite's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the invite's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items retrieved.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of invites. */
            invites: AdminInvite[];
        }, string | Error>>;
        /**
         * @description Create a invite.
         *
         * @tags Admin Invites
         * @name AdminPostInvites
         * @summary Create Invite
         * @request POST:/admin/invites
         * @secure
         */
        adminPostInvites: (data: {
            /**
             * email
             * The email of the user to invite.
             * @format email
             */
            email: string;
            /** The invite's metadata. Can be custom data in key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInviteResponse, string | Error>>;
        /**
         * @description Accept an invite and create a new user. Since the user isn't created yet, the JWT token used in the authorization header is retrieved from the `/auth/user/emailpass/register` API route (or a provider other than `emailpass`). The user can then authenticate using the `/auth/user/emailpass` API route.
         *
         * @tags Admin Invites
         * @name AdminPostInvitesAccept
         * @summary Accept Invite
         * @request POST:/admin/invites/accept
         * @secure
         */
        adminPostInvitesAccept: (data: {
            /**
             * email
             * The user's email.
             * @format email
             */
            email?: string;
            /**
             * first_name
             * The user's first name.
             */
            first_name?: string;
            /**
             * last_name
             * The user's last name.
             */
            last_name?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The user's details. */
            user: AdminUser;
        } | {
            /**
             * message
             * The error message.
             */
            message: string;
        }, string | Error>>;
        /**
         * @description Retrieve an invite by its ID. You can expand the invite's relations or select the fields that should be returned.
         *
         * @tags Admin Invites
         * @name AdminGetInvitesId
         * @summary Get an Invite
         * @request GET:/admin/invites/{id}
         * @secure
         */
        adminGetInvitesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInviteResponse, string | Error>>;
        /**
         * @description Delete an invite.
         *
         * @tags Admin Invites
         * @name AdminDeleteInvitesId
         * @summary Delete Invite
         * @request DELETE:/admin/invites/{id}
         * @secure
         */
        adminDeleteInvitesId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The invite's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "invite"
             */
            object: string;
            /**
             * deleted
             * Whether the invite was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Refresh the token of an invite.
         *
         * @tags Admin Invites
         * @name AdminPostInvitesIdResend
         * @summary Refresh Invite Token
         * @request POST:/admin/invites/{id}/resend
         * @secure
         */
        adminPostInvitesIdResend: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminInviteResponse, string | Error>>;
        /**
         * @description Retrieve a list of notifications. The notifications can be filtered by fields such as `id`. The notifications can also be sorted or paginated.
         *
         * @tags Admin Notifications
         * @name AdminGetNotifications
         * @summary List Notifications
         * @request GET:/admin/notifications
         * @secure
         */
        adminGetNotifications: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to apply on the notification's searchable properties.
             */
            q?: string;
            /** Filter by a notification ID. */
            id?: string | string[];
            /** Filter by a notification channel. */
            channel?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminNotificationListResponse, string | Error>>;
        /**
         * @description Retrieve a notification by its ID. You can expand the notification's relations or select the fields that should be returned.
         *
         * @tags Admin Notifications
         * @name AdminGetNotificationsId
         * @summary Get a Notification
         * @request GET:/admin/notifications/{id}
         * @secure
         */
        adminGetNotificationsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminNotificationResponse, string | Error>>;
        /**
         * @description Create an order edit.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEdits
         * @summary Create Order Edit
         * @request POST:/admin/order-edits
         * @secure
         */
        adminPostOrderEdits: (data: AdminPostOrderEditsReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditResponse, string | Error>>;
        /**
         * @description Cancel an order edit.
         *
         * @tags Admin Order Edits
         * @name AdminDeleteOrderEditsId
         * @summary Cancel Order Edit
         * @request DELETE:/admin/order-edits/{id}
         * @secure
         */
        adminDeleteOrderEditsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The order edit's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "order-edit"
             */
            object: string;
            /**
             * deleted
             * Whether the order edit was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Confirm an order edit request and apply the changes on the order.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdConfirm
         * @summary Confirm Order Edit
         * @request POST:/admin/order-edits/{id}/confirm
         * @secure
         */
        adminPostOrderEditsIdConfirm: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Add new items to an order edit. These items will have the action `ITEM_ADD`.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdItems
         * @summary Add Items to Order Edit
         * @request POST:/admin/order-edits/{id}/items
         * @secure
         */
        adminPostOrderEditsIdItems: (id: string, data: AdminPostOrderEditsAddItemsReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Update an existing order item's quantity of an order edit.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdItemsItemItemId
         * @summary Update Order Item Quantity of Order Edit
         * @request POST:/admin/order-edits/{id}/items/item/{item_id}
         * @secure
         */
        adminPostOrderEditsIdItemsItemItemId: (id: string, itemId: string, data: AdminPostOrderEditsUpdateItemQuantityReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Update an added item in the order edit by the ID of the item's `ITEM_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdItemsActionId
         * @summary Update an Item in an Order Edit
         * @request POST:/admin/order-edits/{id}/items/{action_id}
         * @secure
         */
        adminPostOrderEditsIdItemsActionId: (id: string, actionId: string, data: AdminPostOrderEditsItemsActionReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Remove an added item in the order edit by the ID of the item's `ITEM_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Order Edits
         * @name AdminDeleteOrderEditsIdItemsActionId
         * @summary Remove Item from Order Edit
         * @request DELETE:/admin/order-edits/{id}/items/{action_id}
         * @secure
         */
        adminDeleteOrderEditsIdItemsActionId: (id: string, actionId: string, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Change the status of an active order edit to requested.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdRequest
         * @summary Request Order Edit
         * @request POST:/admin/order-edits/{id}/request
         * @secure
         */
        adminPostOrderEditsIdRequest: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Add a shipping method to an exchange. The shipping method will have a `SHIPPING_ADD` action.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdShippingMethod
         * @summary Add Shipping Method to Order Edit
         * @request POST:/admin/order-edits/{id}/shipping-method
         * @secure
         */
        adminPostOrderEditsIdShippingMethod: (id: string, data: AdminPostOrderEditsShippingReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Update a shipping method in the order edit by the ID of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Order Edits
         * @name AdminPostOrderEditsIdShippingMethodActionId
         * @summary Update Shipping Method of an Order Edit
         * @request POST:/admin/order-edits/{id}/shipping-method/{action_id}
         * @secure
         */
        adminPostOrderEditsIdShippingMethodActionId: (id: string, actionId: string, data: AdminPostOrderEditsShippingActionReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Remove a shipping method in the order edit by the ID of the method's `SHIPPING_ADD` action. Every shipping method has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Order Edits
         * @name AdminDeleteOrderEditsIdShippingMethodActionId
         * @summary Remove Shipping Method from Order Edit
         * @request DELETE:/admin/order-edits/{id}/shipping-method/{action_id}
         * @secure
         */
        adminDeleteOrderEditsIdShippingMethodActionId: (id: string, actionId: string, params?: RequestParams) => Promise<HttpResponse<AdminOrderEditPreviewResponse, string | Error>>;
        /**
         * @description Retrieve a list of orders. The orders can be filtered by fields such as `id`. The orders can also be sorted or paginated.
         *
         * @tags Admin Orders
         * @name AdminGetOrders
         * @summary List Orders
         * @request GET:/admin/orders
         * @secure
         */
        adminGetOrders: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by an order ID. */
            id?: string | string[];
            /** Filter by the order's status. */
            status?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /** Filter by sales channel IDs to retrieve the orders associated with them. */
            sales_channel_id?: string[];
            /** Filter by region IDs to retrieve their associated orders. */
            region_id?: string | string[];
            /**
             * q
             * Search term to filter the order's searchable properties.
             */
            q?: string;
            /** Filter by the order's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the order's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** The order's customer id. */
            customer_id?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before the returned items.
             */
            offset: number;
            /**
             * count
             * The total count of items.
             */
            count: number;
        } & {
            /** The list of orders. */
            orders: AdminOrder[];
        }, string | Error>>;
        /**
         * @description Retrieve an order by its ID. You can expand the order's relations or select the fields that should be returned.
         *
         * @tags Admin Orders
         * @name AdminGetOrdersId
         * @summary Get an Order
         * @request GET:/admin/orders/{id}
         * @secure
         */
        adminGetOrdersId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /** The order's ID. */
            id?: string | string[];
            /** The order's status. */
            status?: string | string[];
            /**
             * version
             * The order's version.
             */
            version?: number;
            created_at?: any;
            updated_at?: any;
            deleted_at?: any;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Update an order's details.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersId
         * @summary Update Order
         * @request POST:/admin/orders/{id}
         * @secure
         */
        adminPostOrdersId: (id: string, data: AdminUpdateOrder, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Change the status of an order to archived.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdArchive
         * @summary Archive an Order
         * @request POST:/admin/orders/{id}/archive
         * @secure
         */
        adminPostOrdersIdArchive: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Cancel an order. The cancelation fails if: - The order has captured payments. - The order has refund payments. - The order has fulfillments that aren't canceled.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdCancel
         * @summary Cancel Order
         * @request POST:/admin/orders/{id}/cancel
         * @secure
         */
        adminPostOrdersIdCancel: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Retrieve a list of changes made on an order, including returns, exchanges, etc... The changes can be filtered by fields like FILTER FIELDS. The changes can also be paginated.
         *
         * @tags Admin Orders
         * @name AdminGetOrdersIdChanges
         * @summary List Changes on an Order
         * @request GET:/admin/orders/{id}/changes
         * @secure
         */
        adminGetOrdersIdChanges: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data.
             * if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields.
             * without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderChangesResponse, string | Error>>;
        /**
         * @description Mark an order as completed.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdComplete
         * @summary Complete Order
         * @request POST:/admin/orders/{id}/complete
         * @secure
         */
        adminPostOrdersIdComplete: (id: string, data: {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Create a fulfillment for an order. The creation fails if the order is canceled.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdFulfillments
         * @summary Create an Order Fulfillment
         * @request POST:/admin/orders/{id}/fulfillments
         * @secure
         */
        adminPostOrdersIdFulfillments: (id: string, data: {
            /** The items to fulfill. */
            items: {
                /**
                 * id
                 * The item's ID.
                 */
                id: string;
                /**
                 * quantity
                 * The item's quantity to fulfill.
                 */
                quantity: number;
            }[];
            /**
             * location_id
             * The ID of the location to fulfill the items from. If not provided, the location associated with the shipping option of the order's shipping method is used.
             */
            location_id: string;
            /**
             * no_notification
             * Whether to send the customer a notification about the created fulfillment.
             */
            no_notification?: boolean;
            /** The order's metadata. Can hold custom key-value pairs. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Cancel an order's fulfillment. The fulfillment can't be canceled if it's shipped.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdFulfillmentsFulfillmentIdCancel
         * @summary Cancel Fulfillment
         * @request POST:/admin/orders/{id}/fulfillments/{fulfillment_id}/cancel
         * @secure
         */
        adminPostOrdersIdFulfillmentsFulfillmentIdCancel: (id: string, fulfillmentId: string, data: {
            /**
             * no_notification
             * Whether the customer should receive a notification about this change.
             */
            no_notification?: boolean;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Mark an order's fulfillment as delivered.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdFulfillmentsFulfillmentIdMarkAsDelivered
         * @summary Mark a Fulfillment as Delivered.
         * @request POST:/admin/orders/{id}/fulfillments/{fulfillment_id}/mark-as-delivered
         * @secure
         */
        adminPostOrdersIdFulfillmentsFulfillmentIdMarkAsDelivered: (id: string, fulfillmentId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Create a shipment for an order's fulfillment.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdFulfillmentsFulfillmentIdShipments
         * @summary Create Shipment for an Order's Fulfillment
         * @request POST:/admin/orders/{id}/fulfillments/{fulfillment_id}/shipments
         * @secure
         */
        adminPostOrdersIdFulfillmentsFulfillmentIdShipments: (id: string, fulfillmentId: string, data: {
            /** The items to create shipment for. */
            items: {
                /**
                 * id
                 * The item's ID.
                 */
                id: string;
                /**
                 * quantity
                 * The item's quantity to ship.
                 */
                quantity: number;
            }[];
            /** The labels to create for the shipment. */
            labels?: {
                /**
                 * tracking_number
                 * The label's tracking number.
                 */
                tracking_number: string;
                /**
                 * tracking_url
                 * The label's tracking url.
                 */
                tracking_url: string;
                /**
                 * label_url
                 * The label's url.
                 */
                label_url: string;
            }[];
            /**
             * no_notification
             * Whether to send the customer a notification about the created shipment.
             */
            no_notification?: boolean;
            /** The shipment's metadata. Can hold custom key-value pairs. */
            metadata: object;
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Retrieve a list of line items in a order. The line items can be filtered by fields like FILTER FIELDS. The line items can also be paginated.
         *
         * @tags Admin Orders
         * @name AdminGetOrdersIdLineItems
         * @summary List Line Items
         * @request GET:/admin/orders/{id}/line-items
         * @secure
         */
        adminGetOrdersIdLineItems: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
            /** The order's ID. */
            id?: string | string[];
            /** The order's item id. */
            item_id?: string | string[];
            /** The order's order id. */
            order_id?: string | string[];
            /** The order's version. */
            version?: number | number[];
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The order's order items. */
            order_items: AdminOrderItem[];
        }, string | Error>>;
        /**
         * @description Retrieve a preview of an order using its associated change, such as an edit.
         *
         * @tags Admin Orders
         * @name AdminGetOrdersIdPreview
         * @summary Get Preview
         * @request GET:/admin/orders/{id}/preview
         * @secure
         */
        adminGetOrdersIdPreview: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminOrderPreviewResponse, string | Error>>;
        /**
         * @description Request an order to be transfered to another customer. The transfer is confirmed by sending a request to the [Accept Order Transfer](https://docs.medusajs.com/api/store#orders_postordersidtransferaccept) Store API route.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdTransfer
         * @summary Request Order Transfer
         * @request POST:/admin/orders/{id}/transfer
         * @secure
         */
        adminPostOrdersIdTransfer: (id: string, data: AdminTransferOrder, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Cancel a request to transfer an order to another customer.
         *
         * @tags Admin Orders
         * @name AdminPostOrdersIdTransferCancel
         * @summary Cancel Transfer Request
         * @request POST:/admin/orders/{id}/transfer/cancel
         * @secure
         */
        adminPostOrdersIdTransferCancel: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderResponse, string | Error>>;
        /**
         * @description Create a payment collection.
         *
         * @tags Admin Payment Collections
         * @name AdminPostPaymentCollections
         * @summary Create Payment Collection
         * @request POST:/admin/payment-collections
         * @secure
         */
        adminPostPaymentCollections: (data: {
            /**
             * order_id
             * The ID of the associated order.
             */
            order_id: string;
            /**
             * amount
             * The amount to be paid.
             */
            amount: number;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPaymentCollectionResponse, string | Error>>;
        /**
         * @description Delete a payment collection.
         *
         * @tags Admin Payment Collections
         * @name AdminDeletePaymentCollectionsId
         * @summary Delete a Payment Collection
         * @request DELETE:/admin/payment-collections/{id}
         * @secure
         */
        adminDeletePaymentCollectionsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminDeletePaymentCollectionResponse, string | Error>>;
        /**
         * @description Mark a payment collection as paid. This creates and authorizes a payment session, then capture its payment, using the manual payment provider.
         *
         * @tags Admin Payment Collections
         * @name AdminPostPaymentCollectionsIdMarkAsPaid
         * @summary Mark a Payment Collection as Paid
         * @request POST:/admin/payment-collections/{id}/mark-as-paid
         * @secure
         */
        adminPostPaymentCollectionsIdMarkAsPaid: (id: string, data: {
            /**
             * order_id
             * The ID of the order associated with the payment collection.
             */
            order_id: string;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPaymentCollectionResponse, string | Error>>;
        /**
         * @description Retrieve a list of payments. The payments can be filtered by fields such as `id`. The payments can also be sorted or paginated.
         *
         * @tags Admin Payments
         * @name AdminGetPayments
         * @summary List Payments
         * @request GET:/admin/payments
         * @secure
         */
        adminGetPayments: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the payment's searchable properties.
             */
            q?: string;
            /** Filter by a payment ID. */
            id?: string | string[];
            /** Filter by a payment session ID to retrieve its associated payments. */
            payment_session_id?: string | string[];
            /** Filter by the payment's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the payment's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the payment's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of returned items.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of payments.
             */
            count: number;
        } & {
            /** The list of payments. */
            payments: AdminPayment[];
        }, string | Error>>;
        /**
         * @description Retrieve a list of payment providers. The payment providers can be filtered by fields such as `id`. The payment providers can also be sorted or paginated.
         *
         * @tags Admin Payments
         * @name AdminGetPaymentsPaymentProviders
         * @summary List Payment Providers
         * @request GET:/admin/payments/payment-providers
         * @secure
         */
        adminGetPaymentsPaymentProviders: (query: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a payment provider's ID. */
            id: string | string[];
            /**
             * is_enabled
             * Filter by whether the payment provider is enabled.
             */
            is_enabled?: boolean;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of payment providers. */
            payment_providers: AdminPaymentProvider[];
        }, string | Error>>;
        /**
         * @description Retrieve a payment by its ID. You can expand the payment's relations or select the fields that should be returned.
         *
         * @tags Admin Payments
         * @name AdminGetPaymentsId
         * @summary Get a Payment
         * @request GET:/admin/payments/{id}
         * @secure
         */
        adminGetPaymentsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPaymentResponse, string | Error>>;
        /**
         * @description Capture an amount of a payment. This uses the `capturePayment` method of the payment provider associated with the payment's collection.
         *
         * @tags Admin Payments
         * @name AdminPostPaymentsIdCapture
         * @summary Capture Payment
         * @request POST:/admin/payments/{id}/capture
         * @secure
         */
        adminPostPaymentsIdCapture: (id: string, data: {
            /**
             * amount
             * The amount to capture.
             */
            amount?: number;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPaymentResponse, string | Error>>;
        /**
         * @description Refund an amount of a payment. This uses the `refundPayment` method of the payment provider associated with the payment's collection.
         *
         * @tags Admin Payments
         * @name AdminPostPaymentsIdRefund
         * @summary Refund Payment
         * @request POST:/admin/payments/{id}/refund
         * @secure
         */
        adminPostPaymentsIdRefund: (id: string, data: {
            /**
             * amount
             * The amount to refund.
             */
            amount?: number;
            /**
             * refund_reason_id
             * The ID of a refund reason.
             */
            refund_reason_id?: string;
            /**
             * note
             * A note to attach to the refund.
             */
            note?: string;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPaymentResponse, string | Error>>;
        /**
         * @description Retrieve a list of price lists. The price lists can be filtered by fields such as `id`. The price lists can also be sorted or paginated.
         *
         * @tags Admin Price Lists
         * @name AdminGetPriceLists
         * @summary List Price Lists
         * @request GET:/admin/price-lists
         * @secure
         */
        adminGetPriceLists: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the price list's searchable properties.
             */
            q?: string;
            /** Filter by a price list ID. */
            id?: string | string[];
            /** Filter by a price list's start date. */
            starts_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the price list's end date. */
            ends_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the price list's status. */
            status?: ("active" | "draft")[];
            /** Filter by the price list's rules count. */
            rules_count?: number[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminPriceListListResponse, string | Error>>;
        /**
         * @description Create a price list.
         *
         * @tags Admin Price Lists
         * @name AdminPostPriceLists
         * @summary Create Price List
         * @request POST:/admin/price-lists
         * @secure
         */
        adminPostPriceLists: (data: AdminCreatePriceList, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPriceListResponse, string | Error>>;
        /**
         * @description Retrieve a price list by its ID. You can expand the price list's relations or select the fields that should be returned.
         *
         * @tags Admin Price Lists
         * @name AdminGetPriceListsId
         * @summary Get a Price List
         * @request GET:/admin/price-lists/{id}
         * @secure
         */
        adminGetPriceListsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPriceListResponse, string | Error>>;
        /**
         * @description Update a price list's details.
         *
         * @tags Admin Price Lists
         * @name AdminPostPriceListsId
         * @summary Update a Price List
         * @request POST:/admin/price-lists/{id}
         * @secure
         */
        adminPostPriceListsId: (id: string, data: AdminUpdatePriceList, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPriceListResponse, string | Error>>;
        /**
         * @description Delete a price list.
         *
         * @tags Admin Price Lists
         * @name AdminDeletePriceListsId
         * @summary Delete a Price List
         * @request DELETE:/admin/price-lists/{id}
         * @secure
         */
        adminDeletePriceListsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminPriceListDeleteResponse, string | Error>>;
        /**
         * @description Manage the prices of a price list to create, update, or delete them.
         *
         * @tags Admin Price Lists
         * @name AdminPostPriceListsIdPricesBatch
         * @summary Manage Prices in Price List
         * @request POST:/admin/price-lists/{id}/prices/batch
         * @secure
         */
        adminPostPriceListsIdPricesBatch: (id: string, data: {
            /** The prices to create. */
            create?: {
                /**
                 * currency_code
                 * The price's currency code.
                 */
                currency_code: string;
                /**
                 * amount
                 * The price's amount.
                 */
                amount: number;
                /**
                 * variant_id
                 * The ID of the variant this price is for.
                 */
                variant_id: string;
                /**
                 * min_quantity
                 * The minimum quantity that must be available of the associated variant in the cart for this price to apply.
                 */
                min_quantity?: number;
                /**
                 * max_quantity
                 * The maximum quantity that must be available of the associated variant in the cart for this price list to apply.
                 */
                max_quantity?: number;
                /**
                 * Key-value pair rules to apply on the price.
                 * @example {"region_id":123}
                 */
                rules?: object;
            }[];
            /** The prices to update. */
            update?: {
                /**
                 * id
                 * The price's ID.
                 */
                id: string;
                /**
                 * currency_code
                 * The price's currency code.
                 */
                currency_code?: string;
                /**
                 * amount
                 * The price's amount.
                 */
                amount?: number;
                /**
                 * variant_id
                 * The ID of the variant this price is for.
                 */
                variant_id: string;
                /**
                 * min_quantity
                 * The minimum quantity that must be available of the associated variant in the cart for this price to apply.
                 */
                min_quantity?: number;
                /**
                 * max_quantity
                 * The maximum quantity that must be available of the associated variant in the cart for this price list to apply.
                 */
                max_quantity?: number;
                /**
                 * Key-value pair rules to apply on the price.
                 * @example {"region_id":123}
                 */
                rules?: object;
            }[];
            /** The prices to delete. */
            delete?: string[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminPriceListBatchResponse, string | Error>>;
        /**
         * @description Remove products from a price list.
         *
         * @tags Admin Price Lists
         * @name AdminPostPriceListsIdProducts
         * @summary Remove Products from Price List
         * @request POST:/admin/price-lists/{id}/products
         * @secure
         */
        adminPostPriceListsIdProducts: (id: string, data: AdminLinkPriceListProducts, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPriceListResponse, string | Error>>;
        /**
         * @description Retrieve a list of price preferences. The price preferences can be filtered by fields such as `id`. The price preferences can also be sorted or paginated.
         *
         * @tags Admin Price Preferences
         * @name AdminGetPricePreferences
         * @summary List Price Preferences
         * @request GET:/admin/price-preferences
         * @secure
         */
        adminGetPricePreferences: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a price preference ID. */
            id?: string | string[];
            /** Filter by a price preference's attribute. */
            attribute?: string | string[];
            /** Filter by a price preference's value. */
            value?: string | string[];
            /**
             * q
             * Search term to apply on the price preference's searchable properties.
             */
            q?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminPricePreferenceListResponse, string | Error>>;
        /**
         * @description Create a price preference.
         *
         * @tags Admin Price Preferences
         * @name AdminPostPricePreferences
         * @summary Create Price Preference
         * @request POST:/admin/price-preferences
         * @secure
         */
        adminPostPricePreferences: (data: AdminCreatePricePreference, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPricePreferenceResponse, string | Error>>;
        /**
         * @description Retrieve a price preference by its ID. You can expand the price preference's relations or select the fields that should be returned.
         *
         * @tags Admin Price Preferences
         * @name AdminGetPricePreferencesId
         * @summary Get a Price Preference
         * @request GET:/admin/price-preferences/{id}
         * @secure
         */
        adminGetPricePreferencesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPricePreferenceResponse, string | Error>>;
        /**
         * @description Update a price preference's details.
         *
         * @tags Admin Price Preferences
         * @name AdminPostPricePreferencesId
         * @summary Update a Price Preference
         * @request POST:/admin/price-preferences/{id}
         * @secure
         */
        adminPostPricePreferencesId: (id: string, data: AdminUpdatePricePreference, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPricePreferenceResponse, string | Error>>;
        /**
         * @description Delete a price preference.
         *
         * @tags Admin Price Preferences
         * @name AdminDeletePricePreferencesId
         * @summary Delete a Price Preference
         * @request DELETE:/admin/price-preferences/{id}
         * @secure
         */
        adminDeletePricePreferencesId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminPricePreferenceDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of product categories. The product categories can be filtered by fields such as `id`. The product categories can also be sorted or paginated.
         *
         * @tags Admin Product Categories
         * @name AdminGetProductCategories
         * @summary List Product Categories
         * @request GET:/admin/product-categories
         * @secure
         */
        adminGetProductCategories: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter on the product category's searchable properties.
             */
            q?: string;
            /** Filter by a product category's ID. */
            id?: string | string[];
            /** Filter by the category's description. This performs a full-text search. To do keyword search, use the `q` parameter instead. */
            description?: string | string[];
            /** Filter by a category's handle. */
            handle?: string | string[];
            /** Filter by a parent category's ID to retrieve its child categories. */
            parent_category_id?: string | string[];
            /**
             * include_ancestors_tree
             * Whether to include the parent category of each category. If you enable this, add to the `fields` query parameter `parent_category` to set the parent of a category in this field. You can either pass `*parent_category` to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, `fields=parent_category.id,parent_category.name`.
             */
            include_ancestors_tree?: boolean;
            /**
             * include_descendants_tree
             * Whether to include the child categories of each category. If you enable this, add to the `fields` query parameter `category_children` to set the children of a category in this field. You can either pass `*category_children` to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, `fields=category_children.id,category_children.name`.
             */
            include_descendants_tree?: boolean;
            /**
             * is_internal
             * Filter by whether the category is internal.
             */
            is_internal?: boolean;
            /**
             * is_active
             * Filter by whether the category is active.
             */
            is_active?: boolean;
            /** Filter by the category's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the category's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the category's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /** The product category's name. */
            name?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductCategoryListResponse, string | Error>>;
        /**
         * @description Create a product category.
         *
         * @tags Admin Product Categories
         * @name AdminPostProductCategories
         * @summary Create Product Category
         * @request POST:/admin/product-categories
         * @secure
         */
        adminPostProductCategories: (data: AdminCreateProductCategory, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductCategoryResponse, string | Error>>;
        /**
         * @description Retrieve a product category by its ID. You can expand the product category's relations or select the fields that should be returned.
         *
         * @tags Admin Product Categories
         * @name AdminGetProductCategoriesId
         * @summary Get a Product Category
         * @request GET:/admin/product-categories/{id}
         * @secure
         */
        adminGetProductCategoriesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
            /**
             * include_ancestors_tree
             * Whether to retrieve the category's parent. If you enable this, add to the `fields` query parameter `parent_category` to set the parent of a category in this field. You can either pass `*parent_category` to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, `fields=parent_category.id,parent_category.name`.
             */
            include_ancestors_tree?: boolean;
            /**
             * include_descendants_tree
             * Whether to retrieve a list of child categories. If you enable this, add to the `fields` query parameter `category_children` to set the children of a category in this field. You can either pass `*category_children` to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, `fields=category_children.id,category_children.name`.
             */
            include_descendants_tree?: boolean;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductCategoryResponse, string | Error>>;
        /**
         * @description Update a product category's details.
         *
         * @tags Admin Product Categories
         * @name AdminPostProductCategoriesId
         * @summary Update a Product Category
         * @request POST:/admin/product-categories/{id}
         * @secure
         */
        adminPostProductCategoriesId: (id: string, data: {
            /**
             * name
             * The product category's name.
             */
            name?: string;
            /**
             * description
             * The product category's description.
             */
            description?: string;
            /**
             * handle
             * The product category's handle. Must be a unique value.
             */
            handle?: string;
            /**
             * is_internal
             * Whether the product category is only used for internal purposes and shouldn't be shown the customer.
             */
            is_internal?: boolean;
            /**
             * is_active
             * Whether the product category is active.
             */
            is_active?: boolean;
            /**
             * parent_category_id
             * The ID of a parent category.
             */
            parent_category_id?: string;
            /** The product category's metadata. Can hold custom key-value pairs. */
            metadata?: object;
            /**
             * rank
             * The product category's rank among other categories.
             */
            rank?: number;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductCategoryResponse, string | Error>>;
        /**
         * @description Delete a product category. This doesn't deleted products in that category.
         *
         * @tags Admin Product Categories
         * @name AdminDeleteProductCategoriesId
         * @summary Delete a Product Category
         * @request DELETE:/admin/product-categories/{id}
         * @secure
         */
        adminDeleteProductCategoriesId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminProductCategoryDeleteResponse, string | Error>>;
        /**
         * @description Manage products of a category to add or remove them.
         *
         * @tags Admin Product Categories
         * @name AdminPostProductCategoriesIdProducts
         * @summary Manage Products in Product Category
         * @request POST:/admin/product-categories/{id}/products
         * @secure
         */
        adminPostProductCategoriesIdProducts: (id: string, data: {
            /** The products to add. */
            add?: string[];
            /** The product to remove. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. NOTE: This route doesn't allow expanding custom relations.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductCategoryResponse, string | Error>>;
        /**
         * @description Retrieve a list of product tags. The product tags can be filtered by fields such as `id`. The product tags can also be sorted or paginated.
         *
         * @tags Admin Product Tags
         * @name AdminGetProductTags
         * @summary List Product Tags
         * @request GET:/admin/product-tags
         * @secure
         */
        adminGetProductTags: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the product tag's searchable properties.
             */
            q?: string;
            /** Filter by a product tag's ID. */
            id?: string | string[];
            /** Filter by a product tag's value. */
            value?: string | string[];
            /** Filter by the tag's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the tag's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the tag's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTagListResponse, string | Error>>;
        /**
         * @description Create a product tag.
         *
         * @tags Admin Product Tags
         * @name AdminPostProductTags
         * @summary Create Product Tag
         * @request POST:/admin/product-tags
         * @secure
         */
        adminPostProductTags: (data: AdminCreateProductTag, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTagResponse, string | Error>>;
        /**
         * @description Retrieve a product tag by its ID. You can expand the product tag's relations or select the fields that should be returned.
         *
         * @tags Admin Product Tags
         * @name AdminGetProductTagsId
         * @summary Get a Product Tag
         * @request GET:/admin/product-tags/{id}
         * @secure
         */
        adminGetProductTagsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTagResponse, string | Error>>;
        /**
         * @description Update a product tag's details.
         *
         * @tags Admin Product Tags
         * @name AdminPostProductTagsId
         * @summary Update a Product Tag
         * @request POST:/admin/product-tags/{id}
         * @secure
         */
        adminPostProductTagsId: (id: string, data: {
            /**
             * value
             * The product tag's value.
             */
            value?: string;
            /** The product tag's metadata. Can hold custom key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTagResponse, string | Error>>;
        /**
         * @description Delete a product tag. This doesn't delete products using the tag.
         *
         * @tags Admin Product Tags
         * @name AdminDeleteProductTagsId
         * @summary Delete a Product Tag
         * @request DELETE:/admin/product-tags/{id}
         * @secure
         */
        adminDeleteProductTagsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminProductTagDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of product types. The product types can be filtered by fields such as `id`. The product types can also be sorted or paginated.
         *
         * @tags Admin Product Types
         * @name AdminGetProductTypes
         * @summary List Product Types
         * @request GET:/admin/product-types
         * @secure
         */
        adminGetProductTypes: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the product type's searchable properties.
             */
            q?: string;
            /** Filter by a product type's ID. */
            id?: string | string[];
            /** Filter by a type's value. */
            value?: string | string[];
            /** Filter by the type's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the type's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the type's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTypeListResponse, string | Error>>;
        /**
         * @description Create a product type.
         *
         * @tags Admin Product Types
         * @name AdminPostProductTypes
         * @summary Create Product Type
         * @request POST:/admin/product-types
         * @secure
         */
        adminPostProductTypes: (data: AdminCreateProductType, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTypeResponse, string | Error>>;
        /**
         * @description Retrieve a product type by its ID. You can expand the product type's relations or select the fields that should be returned.
         *
         * @tags Admin Product Types
         * @name AdminGetProductTypesId
         * @summary Get a Product Type
         * @request GET:/admin/product-types/{id}
         * @secure
         */
        adminGetProductTypesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTypeResponse, string | Error>>;
        /**
         * @description Update a product type's details.
         *
         * @tags Admin Product Types
         * @name AdminPostProductTypesId
         * @summary Update a Product Type
         * @request POST:/admin/product-types/{id}
         * @secure
         */
        adminPostProductTypesId: (id: string, data: {
            /**
             * value
             * The product type's value.
             */
            value?: string;
            /** The product type's metadata. Can hold custom key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductTypeResponse, string | Error>>;
        /**
         * @description Delete a product type. This doesn't delete products of this type.
         *
         * @tags Admin Product Types
         * @name AdminDeleteProductTypesId
         * @summary Delete a Product Type
         * @request DELETE:/admin/product-types/{id}
         * @secure
         */
        adminDeleteProductTypesId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminProductTypeDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of product variants. The product variants can be filtered by fields such as `id`. The product variants can also be sorted or paginated.
         *
         * @tags Admin Product Variants
         * @name AdminGetProductVariants
         * @summary List Product Variants
         * @request GET:/admin/product-variants
         * @secure
         */
        adminGetProductVariants: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the product variant's searchable properties.
             */
            q?: string;
            /** Filter by a variant's ID. */
            id?: string | string[];
            /**
             * manage_inventory
             * Filter by whether a variant's `manage_inventory` is enabled.
             */
            manage_inventory?: boolean;
            /**
             * allow_backorder
             * Filter by whether backorder is allowed for a variant.
             */
            allow_backorder?: boolean;
            /** Filter by the product variant's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the product variant's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the product variant's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The product variant's variants. */
            variants: AdminProductVariant[];
        }, string | Error>>;
        /**
         * @description Retrieve a list of products. The products can be filtered by fields such as `id`. The products can also be sorted or paginated.
         *
         * @tags Admin Products
         * @name AdminGetProducts
         * @summary List Products
         * @request GET:/admin/products
         * @secure
         */
        adminGetProducts: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a price list's ID to retrieve its associated products. */
            price_list_id?: string | string[];
            /**
             * q
             * Search term to filter a product's searchable properties.
             */
            q?: string;
            /** Filter by a product status. */
            status?: string | ("draft" | "proposed" | "published" | "rejected")[];
            /** Filter by a sales channel's ID to retrieve its associated products. */
            sales_channel_id?: string | string[];
            /** Filter by a title. */
            title?: string | string[];
            /** Filter by a handle. */
            handle?: string | string[];
            /** Filter by a product ID. */
            id?: string | string[];
            /**
             * is_giftcard
             * Filter by whether a product is a gift card.
             */
            is_giftcard?: boolean;
            /** Filter by associated tags to retrieve their products. */
            tags?: {
                /** Filter by tag values. */
                value?: string[];
            };
            /** Filter by a product type's ID to retrieve its associated products. */
            type_id?: string | string[];
            /** Filter by a product category's ID to retrieve its associated products. */
            category_id?: string | string[];
            /** Filter by a product's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a product's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a product's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /** Filter by a product collection ID. */
            collection_id?: string | string[];
            /** Filter the retrieved products' variants. */
            variants?: {
                /**
                 * q
                 * Search term to apply on the variant's searchable properties.
                 */
                q?: string;
                /** Filter by a variant's ID. */
                id?: string | string[];
                /**
                 * manage_inventory
                 * Filter by whether the Medusa application manages the variant's inventory.
                 */
                manage_inventory?: boolean;
                /**
                 * allow_backorder
                 * Filter by whether the variant can be ordered even if it's out of stock.
                 */
                allow_backorder?: boolean;
                /** Filter by the variant's creation date. */
                created_at?: {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                };
                /** The variant's updated at. */
                updated_at?: {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                };
                /** The variant's deleted at. */
                deleted_at?: {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                };
                /**
                 * limit
                 * Limit the number of items returned in the list.
                 */
                limit?: number;
                /**
                 * offset
                 * The number of items to skip when retrieving a list.
                 */
                offset?: number;
                /**
                 * order
                 * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
                 */
                order?: string;
                /**
                 * fields
                 * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
                 */
                fields?: string;
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
            };
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of products. */
            products: object[];
        }, string | Error>>;
        /**
         * @description Create a product.
         *
         * @tags Admin Products
         * @name AdminPostProducts
         * @summary Create Product
         * @request POST:/admin/products
         * @secure
         */
        adminPostProducts: (data: AdminCreateProduct & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Manage products to create, update, or delete them.
         *
         * @tags Admin Products
         * @name AdminPostProductsBatch
         * @summary Manage Products
         * @request POST:/admin/products/batch
         * @secure
         */
        adminPostProductsBatch: (data: AdminBatchProductRequest, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminBatchProductResponse, string | Error>>;
        /**
         * @description Start a product export process to retrieve a CSV of exported products. You'll receive in the response the transaction ID of the workflow generating the CSV file. To check the status of the execution, send a GET request to `/admin/workflows-executions/export-products/:transaction-id`. Once the execution finishes successfully, a notification is created for the export. You can retrieve the notifications using the `/admin/notification` API route to retrieve the file's download URL.
         *
         * @tags Admin Products
         * @name AdminPostProductsExport
         * @summary Export Products
         * @request POST:/admin/products/export
         * @secure
         */
        adminPostProductsExport: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminExportProductResponse, string | Error>>;
        /**
         * @description Create a new product import process. The products aren't imported until the import is confirmed with the `/admin/products/:transaction-id/import` API route.
         *
         * @tags Admin Products
         * @name AdminPostProductsImport
         * @summary Create Product Import
         * @request POST:/admin/products/import
         * @secure
         */
        adminPostProductsImport: (data: AdminImportProductRequest, params?: RequestParams) => Promise<HttpResponse<AdminImportProductResponse, string | Error>>;
        /**
         * @description Confirm that a created product import should start importing the products into Medusa.
         *
         * @tags Admin Products
         * @name AdminPostProductsImportTransactionIdConfirm
         * @summary Confirm Product Import
         * @request POST:/admin/products/import/{transaction_id}/confirm
         * @secure
         */
        adminPostProductsImportTransactionIdConfirm: (transactionId: string, params?: RequestParams) => Promise<HttpResponse<any, string | Error>>;
        /**
         * @description Retrieve a product by its ID. You can expand the product's relations or select the fields that should be returned.
         *
         * @tags Admin Products
         * @name AdminGetProductsId
         * @summary Get a Product
         * @request GET:/admin/products/{id}
         * @secure
         */
        adminGetProductsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Update a product's details.
         *
         * @tags Admin Products
         * @name AdminPostProductsId
         * @summary Update a Product
         * @request POST:/admin/products/{id}
         * @secure
         */
        adminPostProductsId: (id: string, data: AdminUpdateProduct & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Delete a product.
         *
         * @tags Admin Products
         * @name AdminDeleteProductsId
         * @summary Delete a Product
         * @request DELETE:/admin/products/{id}
         * @secure
         */
        adminDeleteProductsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminProductDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of options of a product. The options can be filtered by fields like `id`. The options can also be paginated.
         *
         * @tags Admin Products
         * @name AdminGetProductsIdOptions
         * @summary List a Product's Options
         * @request GET:/admin/products/{id}/options
         * @secure
         */
        adminGetProductsIdOptions: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the product option's searchable fields.
             */
            q?: string;
            /** Filter by the product option's ID. */
            id?: string | string[];
            /** Filter by a title. */
            title?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of product options. */
            product_options: AdminProductOption[];
        }, string | Error>>;
        /**
         * @description Create an option for a product.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdOptions
         * @summary Create a Product Option
         * @request POST:/admin/products/{id}/options
         * @secure
         */
        adminPostProductsIdOptions: (id: string, data: AdminCreateProductOption & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Retrieve a product's option by its ID.
         *
         * @tags Admin Products
         * @name AdminGetProductsIdOptionsOptionId
         * @summary Get a Product's Option
         * @request GET:/admin/products/{id}/options/{option_id}
         * @secure
         */
        adminGetProductsIdOptionsOptionId: (id: string, optionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductOptionResponse, string | Error>>;
        /**
         * @description Update the details of a product option.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdOptionsOptionId
         * @summary Update a Product's Option
         * @request POST:/admin/products/{id}/options/{option_id}
         * @secure
         */
        adminPostProductsIdOptionsOptionId: (id: string, optionId: string, data: AdminUpdateProductOption & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Delete an option from a product. Values of this option in the product's variants are removed.
         *
         * @tags Admin Products
         * @name AdminDeleteProductsIdOptionsOptionId
         * @summary Delete an Option from Product
         * @request DELETE:/admin/products/{id}/options/{option_id}
         * @secure
         */
        adminDeleteProductsIdOptionsOptionId: (id: string, optionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductOptionDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of variants in a product. The variants can be filtered by fields like FILTER FIELDS. The variants can also be paginated.
         *
         * @tags Admin Products
         * @name AdminGetProductsIdVariants
         * @summary List Variants of a Product
         * @request GET:/admin/products/{id}/variants
         * @secure
         */
        adminGetProductsIdVariants: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the variant's search attributes.
             */
            q?: string;
            /** Filter by a variant's ID. */
            id?: string | string[];
            /**
             * manage_inventory
             * Filter by whether a variant's `manage_inventory` property is enabled.
             */
            manage_inventory?: boolean;
            /**
             * allow_backorder
             * Filter by whether backorders are allowed for the variant.
             */
            allow_backorder?: boolean;
            /** Filter by the product's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the product's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the product's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of returned items.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before the returned item.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of product variants. */
            variants: AdminProductVariant[];
        }, string | Error>>;
        /**
         * @description Create a variant for a product.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdVariants
         * @summary Create a Product Variant
         * @request POST:/admin/products/{id}/variants
         * @secure
         */
        adminPostProductsIdVariants: (id: string, data: AdminCreateProductVariant & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Manage variants in a product to create, update, or delete them.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdVariantsBatch
         * @summary Manage Variants in a Product
         * @request POST:/admin/products/{id}/variants/batch
         * @secure
         */
        adminPostProductsIdVariantsBatch: (id: string, data: AdminBatchProductVariantRequest, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminBatchProductVariantResponse, string | Error>>;
        /**
         * @description Manage a product's variant's inventoris to associate them with inventory items, update their inventory items, or delete their association with inventory items.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdVariantsInventoryItemsBatch
         * @summary Manage Variants Inventory in a Product
         * @request POST:/admin/products/{id}/variants/inventory-items/batch
         * @secure
         */
        adminPostProductsIdVariantsInventoryItemsBatch: (id: string, data: {
            /** The The associations to create between product variants and inventory items. */
            create?: {
                /**
                 * required_quantity
                 * The number of units a single quantity is equivalent to. For example, if a customer orders one quantity of the variant, Medusa checks the availability of the quantity multiplied by the value set for `required_quantity`. When the customer orders the quantity, Medusa reserves the ordered quantity multiplied by the value set for `required_quantity`.
                 */
                required_quantity: number;
                /**
                 * inventory_item_id
                 * The ID of the inventory item to associate the variant with.
                 */
                inventory_item_id: string;
                /**
                 * variant_id
                 * The ID of the variant.
                 */
                variant_id: string;
            }[];
            /** The product variants to update their association with inventory items. */
            update?: {
                /**
                 * required_quantity
                 * The number of units a single quantity is equivalent to. For example, if a customer orders one quantity of the variant, Medusa checks the availability of the quantity multiplied by the value set for `required_quantity`. When the customer orders the quantity, Medusa reserves the ordered quantity multiplied by the value set for `required_quantity`.
                 */
                required_quantity: number;
                /**
                 * inventory_item_id
                 * The ID of the inventory item the variant is associated with.
                 */
                inventory_item_id: string;
                /**
                 * variant_id
                 * The ID of the variant.
                 */
                variant_id: string;
            }[];
            /** The product variants to delete their association with inventory items. */
            delete?: {
                /**
                 * inventory_item_id
                 * The ID of the inventory item associated with the variant.
                 */
                inventory_item_id: string;
                /**
                 * variant_id
                 * The ID of the variant.
                 */
                variant_id: string;
            }[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductVariantInventoryBatchResponse, string | Error>>;
        /**
         * @description Retrieve a product's variant by its ID.
         *
         * @tags Admin Products
         * @name AdminGetProductsIdVariantsVariantId
         * @summary Get Variant of a Product
         * @request GET:/admin/products/{id}/variants/{variant_id}
         * @secure
         */
        adminGetProductsIdVariantsVariantId: (id: string, variantId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductVariantResponse, string | Error>>;
        /**
         * @description Update a variant's details.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdVariantsVariantId
         * @summary Update a Product Variant
         * @request POST:/admin/products/{id}/variants/{variant_id}
         * @secure
         */
        adminPostProductsIdVariantsVariantId: (id: string, variantId: string, data: AdminUpdateProductVariant & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductResponse, string | Error>>;
        /**
         * @description Delete a variant of a product.
         *
         * @tags Admin Products
         * @name AdminDeleteProductsIdVariantsVariantId
         * @summary Delete Product Variant
         * @request DELETE:/admin/products/{id}/variants/{variant_id}
         * @secure
         */
        adminDeleteProductsIdVariantsVariantId: (id: string, variantId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductVariantDeleteResponse, string | Error>>;
        /**
         * @description Associate with a product variant an inventory item that manages its inventory details.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdVariantsVariantIdInventoryItems
         * @summary Associate Variant with Inventory Item
         * @request POST:/admin/products/{id}/variants/{variant_id}/inventory-items
         * @secure
         */
        adminPostProductsIdVariantsVariantIdInventoryItems: (id: string, variantId: string, data: AdminCreateVariantInventoryItem, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductVariantResponse, string | Error>>;
        /**
         * @description Update the inventory item that manages the inventory details of a product variant.
         *
         * @tags Admin Products
         * @name AdminPostProductsIdVariantsVariantIdInventoryItemsInventoryItemId
         * @summary Update Product Variant's Inventory Details
         * @request POST:/admin/products/{id}/variants/{variant_id}/inventory-items/{inventory_item_id}
         * @secure
         */
        adminPostProductsIdVariantsVariantIdInventoryItemsInventoryItemId: (id: string, variantId: string, inventoryItemId: string, data: AdminUpdateVariantInventoryItem, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductVariantResponse, string | Error>>;
        /**
         * @description Remove the association between an inventory item and its product variant.
         *
         * @tags Admin Products
         * @name AdminDeleteProductsIdVariantsVariantIdInventoryItemsInventoryItemId
         * @summary Remove Inventory Item Association with Product Variant
         * @request DELETE:/admin/products/{id}/variants/{variant_id}/inventory-items/{inventory_item_id}
         * @secure
         */
        adminDeleteProductsIdVariantsVariantIdInventoryItemsInventoryItemId: (id: string, variantId: string, inventoryItemId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminProductVariantInventoryLinkDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of promotions. The promotions can be filtered by fields such as `id`. The promotions can also be sorted or paginated.
         *
         * @tags Admin Promotions
         * @name AdminGetPromotions
         * @summary List Promotions
         * @request GET:/admin/promotions
         * @secure
         */
        adminGetPromotions: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the promotion's searchable attributes.
             */
            q?: string;
            /** Filter by a promotion code. */
            code?: string | string[];
            /** Filter by a campaign's ID to retrieve its associated promotions. */
            campaign_id?: string | string[];
            /** Apply filters on the application methods to retrieve the promotions of the matching application methods. */
            application_method?: {
                /** Filter by a currency code. */
                currency_code?: string | string[];
            };
            /** Filter by a promotion's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a promotion's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a promotion's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of promotions. */
            promotions: AdminPromotion[];
        }, string | Error>>;
        /**
         * @description Create a promotion.
         *
         * @tags Admin Promotions
         * @name AdminPostPromotions
         * @summary Create Promotion
         * @request POST:/admin/promotions
         * @secure
         */
        adminPostPromotions: (data: {
            /**
             * code
             * The promotion's code.
             */
            code: string;
            /**
             * is_automatic
             * Whether the promotion is applied automatically.
             */
            is_automatic?: boolean;
            /** The promotion's type. */
            type: "standard" | "buyget";
            /**
             * campaign_id
             * The ID of the campaign that the promotion belongs to.
             */
            campaign_id: string;
            /** The details of a campaign to create and add the promotion to it. */
            campaign?: {
                /**
                 * name
                 * The campaign's name.
                 */
                name: string;
                /**
                 * campaign_identifier
                 * The campaign's identifier.
                 */
                campaign_identifier: string;
                /**
                 * description
                 * The campaign's description.
                 */
                description: string;
                /** The campaign's budget which, when crossed, ends the campaign. */
                budget: {
                    /** The budget's type. This can't be edited later. Use `spend` to set a limit on the total amount discounted by the campaign's promotions. Use `usage` to set a limit on the total number of times the campaign's promotions can be used. */
                    type: "spend" | "usage";
                    /**
                     * limit
                     * The budget's limit.
                     */
                    limit: number;
                    /**
                     * currency_code
                     * The campaign budget's currency code. This can't be edited later.
                     */
                    currency_code: string;
                };
                /**
                 * starts_at
                 * The campaign's start date.
                 * @format date-time
                 */
                starts_at: string;
                /**
                 * ends_at
                 * The campaign's end date.
                 * @format date-time
                 */
                ends_at: string;
            };
            /** The promotion's application method. */
            application_method: {
                /**
                 * description
                 * The application method's description.
                 */
                description: string;
                /**
                 * value
                 * The discounted amount applied by the associated promotion based on the `type`.
                 */
                value: number;
                /**
                 * currency_code
                 * The application method's currency code.
                 */
                currency_code: string;
                /**
                 * max_quantity
                 * The max quantity allowed in the cart for the associated promotion to be applied.
                 */
                max_quantity: number;
                /** The type of the application method indicating how the associated promotion is applied. */
                type: "fixed" | "percentage";
                /** The target type of the application method indicating whether the associated promotion is applied to the cart's items, shipping methods, or the whole order. */
                target_type: "order" | "shipping_methods" | "items";
                /** The allocation value that indicates whether the associated promotion is applied on each item in a cart or split between the items in the cart. */
                allocation?: "each" | "across";
                /** The application method's target rules. */
                target_rules?: {
                    /** The operator used to check whether the target rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value. */
                    operator: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
                    /**
                     * description
                     * The target rule's description.
                     */
                    description: string;
                    /**
                     * attribute
                     * The attribute to compare against when checking whether a promotion can be applied on a cart.
                     * @example "items.product.id"
                     */
                    attribute: string;
                    /** The attribute's value. */
                    values: string | string[];
                }[];
                /** The application method's buy rules. */
                buy_rules?: {
                    /** The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value. */
                    operator: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
                    /**
                     * description
                     * The buy rule's description.
                     */
                    description: string;
                    /**
                     * attribute
                     * The attribute to compare against when checking whether a promotion can be applied on a cart.
                     * @example "items.product.id"
                     */
                    attribute: string;
                    /** The attribute's value. */
                    values: string | string[];
                }[];
                /**
                 * apply_to_quantity
                 * The quantity that results from matching the `buyget` promotion's condition. For example, if the promotion is a "Buy 2 shirts get 1 free", the value f this attribute is `1`.
                 */
                apply_to_quantity: number;
                /**
                 * buy_rules_min_quantity
                 * The minimum quantity required for a `buyget` promotion to be applied. For example, if the promotion is a "Buy 2 shirts get 1 free", the value of this attribute is `2`.
                 */
                buy_rules_min_quantity: number;
            };
            /** The promotion's rules. */
            rules?: {
                /** The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value. */
                operator: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
                /**
                 * description
                 * The rule's description.
                 */
                description: string;
                /**
                 * attribute
                 * The attribute to compare against when checking whether a promotion can be applied on a cart.
                 * @example "items.product.id"
                 */
                attribute: string;
                /** The attribute's value. */
                values: string | string[];
            }[];
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPromotionResponse, string | Error>>;
        /**
         * @description Retrieve a list of potential rule attributes for the promotion and application method types specified in the query parameters. Only the attributes of the rule type specified in the path parameter are retrieved: - If `rule_type` is `rules`, the attributes of the promotion's type are retrieved. - If `rule_type` is `target-rules`, the target rules' attributes of the application method's type are retrieved. - If `rule_type` is `buy-rules`, the buy rules' attributes of the application method's type are retrieved.
         *
         * @tags Admin Promotions
         * @name AdminGetPromotionsRuleAttributeOptionsRuleType
         * @summary List Rule Attribute Options of a Rule Type
         * @request GET:/admin/promotions/rule-attribute-options/{rule_type}
         * @secure
         */
        adminGetPromotionsRuleAttributeOptionsRuleType: (ruleType: "rules" | "target-rules" | "buy-rules", query?: {
            /**
             * promotion_type
             * The promotion type to retrieve rules for.
             */
            promotion_type?: "standard" | "buyget";
            /**
             * application_method_type
             * The application method type to retrieve rules for.
             */
            application_method_type?: "fixed" | "percentage";
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The list of attributes. */
            attributes: AdminRuleAttributeOption[];
        }, string | Error>>;
        /**
         * @description Retrieve all potential values for promotion rules and target and buy rules based on the specified rule attribute and type. For example, if you provide the ID of the `currency_code` rule attribute, and set `rule_type` to `rules`, a list of currencies are retrieved in label-value pairs.
         *
         * @tags Admin Promotions
         * @name AdminGetPromotionsRuleValueOptionsRuleTypeRuleAttributeId
         * @summary List Rule Values Given a Rule Attribute
         * @request GET:/admin/promotions/rule-value-options/{rule_type}/{rule_attribute_id}
         * @secure
         */
        adminGetPromotionsRuleValueOptionsRuleTypeRuleAttributeId: (ruleType: "rules" | "target-rules" | "buy-rules", ruleAttributeId: string, query?: {
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * promotion_type
             * The promotion type to retrieve rules for.
             */
            promotion_type?: "standard" | "buyget";
            /**
             * application_method_type
             * The application method type to retrieve rules for.
             */
            application_method_type?: "fixed" | "percentage";
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The list of rule values. */
            values: AdminRuleValueOption[];
        }, string | Error>>;
        /**
         * @description Retrieve a promotion by its ID. You can expand the promotion's relations or select the fields that should be returned.
         *
         * @tags Admin Promotions
         * @name AdminGetPromotionsId
         * @summary Get a Promotion
         * @request GET:/admin/promotions/{id}
         * @secure
         */
        adminGetPromotionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPromotionResponse, string | Error>>;
        /**
         * @description Update a promotion's details.
         *
         * @tags Admin Promotions
         * @name AdminPostPromotionsId
         * @summary Update a Promotion
         * @request POST:/admin/promotions/{id}
         * @secure
         */
        adminPostPromotionsId: (id: string, data: {
            /**
             * code
             * The promotion's code.
             */
            code?: string;
            /**
             * is_automatic
             * Whether the promotion is applied automatically.
             */
            is_automatic?: boolean;
            /** The promotion's type. */
            type?: "standard" | "buyget";
            /**
             * campaign_id
             * The ID of the campaign that the promotion belongs to.
             */
            campaign_id: string;
            /** The properties to update in the application method. */
            application_method?: {
                /**
                 * id
                 * The application method's ID.
                 */
                id: string;
                /**
                 * description
                 * The application method's description.
                 */
                description: string;
                /**
                 * value
                 * The discounted amount applied by the associated promotion based on the `type`.
                 */
                value?: number;
                /**
                 * max_quantity
                 * The max quantity allowed in the cart for the associated promotion to be applied.
                 */
                max_quantity: number;
                /**
                 * currency_code
                 * The application method's currency code.
                 */
                currency_code: string;
                /** The type of the application method indicating how the associated promotion is applied. */
                type?: "fixed" | "percentage";
                /** The target type of the application method indicating whether the associated promotion is applied to the cart's items, shipping methods, or the whole order. */
                target_type?: "order" | "shipping_methods" | "items";
                /** The allocation value that indicates whether the associated promotion is applied on each item in a cart or split between the items in the cart. */
                allocation?: "each" | "across";
                /**
                 * apply_to_quantity
                 * The quantity that results from matching the `buyget` promotion's condition. For example, if the promotion is a "Buy 2 shirts get 1 free", the value f this attribute is `1`.
                 */
                apply_to_quantity: number;
                /**
                 * buy_rules_min_quantity
                 * The minimum quantity required for a `buyget` promotion to be applied. For example, if the promotion is a "Buy 2 shirts get 1 free", the value of this attribute is `2`.
                 */
                buy_rules_min_quantity: number;
            };
        } & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminPromotionResponse, string | Error>>;
        /**
         * @description Delete a promotion.
         *
         * @tags Admin Promotions
         * @name AdminDeletePromotionsId
         * @summary Delete a Promotion
         * @request DELETE:/admin/promotions/{id}
         * @secure
         */
        adminDeletePromotionsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The promotion's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "promotion"
             */
            object: string;
            /**
             * deleted
             * Whether the promotion was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Manage the buy rules of a `buyget` promotion to create, update, or delete them.
         *
         * @tags Admin Promotions
         * @name AdminPostPromotionsIdBuyRulesBatch
         * @summary Manage the Buy Rules of a Promotion
         * @request POST:/admin/promotions/{id}/buy-rules/batch
         * @secure
         */
        adminPostPromotionsIdBuyRulesBatch: (id: string, data: {
            /** The buy rules to create. */
            create?: AdminCreatePromotionRule[];
            /** The buy rules to update. */
            update?: AdminUpdatePromotionRule[];
            /** The buy rules to delete. */
            delete?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The created buy rules. */
            created: AdminPromotionRule[];
            /** The updated buy rules. */
            updated: AdminPromotionRule[];
            /** The details of the deleted buy rules. */
            deleted: {
                /** The IDs of the buy rules that were deleted. */
                ids: string[];
                /**
                 * object
                 * The name of the object that was deleted.
                 * @default "promotion-rule"
                 */
                object: string;
                /**
                 * deleted
                 * Whether the buy rules were deleted.
                 */
                deleted: boolean;
            };
        }, string | Error>>;
        /**
         * @description Manage the rules of a promotion to create, update, or delete them.
         *
         * @tags Admin Promotions
         * @name AdminPostPromotionsIdRulesBatch
         * @summary Manage a Promotion's Rules
         * @request POST:/admin/promotions/{id}/rules/batch
         * @secure
         */
        adminPostPromotionsIdRulesBatch: (id: string, data: {
            /** The rules to create. */
            create?: AdminCreatePromotionRule[];
            /** The rules to update. */
            update?: AdminUpdatePromotionRule[];
            /** The rules to delete. */
            delete?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The created rules. */
            created: AdminPromotionRule[];
            /** The updated rules. */
            updated: AdminPromotionRule[];
            /** The details of the deleted buy rules. */
            deleted: {
                /** The IDs of the deleted rules. */
                ids: string[];
                /**
                 * object
                 * The name of the object that was deleted.
                 * @default "promotion-rule"
                 */
                object: string;
                /**
                 * deleted
                 * Whether the rules were deleted.
                 */
                deleted: boolean;
            };
        }, string | Error>>;
        /**
         * @description Manage the target rules of a promotion to create, update, or delete them.
         *
         * @tags Admin Promotions
         * @name AdminPostPromotionsIdTargetRulesBatch
         * @summary Manage Target Rules of a Promotion
         * @request POST:/admin/promotions/{id}/target-rules/batch
         * @secure
         */
        adminPostPromotionsIdTargetRulesBatch: (id: string, data: {
            /** The target rules to create. */
            create?: AdminCreatePromotionRule[];
            /** The target rules to update. */
            update?: AdminUpdatePromotionRule[];
            /** The target rules to delete. */
            delete?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The created target rules. */
            created: AdminPromotionRule[];
            /** The updated target rules. */
            updated: AdminPromotionRule[];
            /** The details of the deleted target rules. */
            deleted: {
                /** The IDs of deleted target rules. */
                ids: string[];
                /**
                 * object
                 * The name of the object that was deleted.
                 * @default "promotion-rule"
                 */
                object: string;
                /**
                 * deleted
                 * Whether the target rules were deleted.
                 */
                deleted: boolean;
            };
        }, string | Error>>;
        /**
         * @description Retrieve a list of rules in a promotion. The type of rules retrieved depend on the value of the `rule_type` path parameter: - If `rule_type` is `rules`, the promotion's rules are retrivied. - If `rule_type` is `target-rules`, the target rules of the promotion's application method are retrieved. - If `rule_type` is `buy-rules`, the buy rules of the promotion's application method are retrieved.
         *
         * @tags Admin Promotions
         * @name AdminGetPromotionsIdRuleType
         * @summary List Rules of a Promotion
         * @request GET:/admin/promotions/{id}/{rule_type}
         * @secure
         */
        adminGetPromotionsIdRuleType: (id: string, ruleType: "rules" | "target-rules" | "buy-rules", query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The list of promotion rules. */
            rules: AdminPromotionRule[];
        }, string | Error>>;
        /**
         * @description Retrieve a list of refund reasons. The refund reasons can be filtered by fields such as `id`. The refund reasons can also be sorted or paginated.
         *
         * @tags Admin Refund Reasons
         * @name AdminGetRefundReasons
         * @summary List Refund Reasons
         * @request GET:/admin/refund-reasons
         * @secure
         */
        adminGetRefundReasons: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a refund reason's ID. */
            id?: string | string[];
            /**
             * q
             * Search term to filter the refund reason's searchable properties.
             */
            q?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The refund reason's refund reasons. */
            refund_reasons: AdminRefundReason[];
        }, string | Error>>;
        /**
         * @description Create a refund reason.
         *
         * @tags Admin Refund Reasons
         * @name AdminPostRefundReasons
         * @summary Create Refund Reason
         * @request POST:/admin/refund-reasons
         * @secure
         */
        adminPostRefundReasons: (data: AdminCreateRefundReason, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<RefundReasonResponse, string | Error>>;
        /**
         * @description Retrieve a refund reason by its ID. You can expand the refund reason's relations or select the fields that should be returned.
         *
         * @tags Admin Refund Reasons
         * @name AdminGetRefundReasonsId
         * @summary Get a Refund Reason
         * @request GET:/admin/refund-reasons/{id}
         * @secure
         */
        adminGetRefundReasonsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<RefundReasonResponse, string | Error>>;
        /**
         * @description Update a refund reason's details.
         *
         * @tags Admin Refund Reasons
         * @name AdminPostRefundReasonsId
         * @summary Update a Refund Reason
         * @request POST:/admin/refund-reasons/{id}
         * @secure
         */
        adminPostRefundReasonsId: (id: string, data: {
            /**
             * label
             * The refund reason's label.
             */
            label?: string;
            /**
             * description
             * The refund reason's description.
             */
            description?: string;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<RefundReasonResponse, string | Error>>;
        /**
         * @description Delete a refund reason.
         *
         * @tags Admin Refund Reasons
         * @name AdminDeleteRefundReasonsId
         * @summary Delete a Refund Reason
         * @request DELETE:/admin/refund-reasons/{id}
         * @secure
         */
        adminDeleteRefundReasonsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The refund reason's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "refund_reason"
             */
            object: string;
            /**
             * deleted
             * Whether the refund reason was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Retrieve a list of regions. The regions can be filtered by fields such as `id`. The regions can also be sorted or paginated.
         *
         * @tags Admin Regions
         * @name AdminGetRegions
         * @summary List Regions
         * @request GET:/admin/regions
         * @secure
         */
        adminGetRegions: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the region's searchable properties.
             */
            q?: string;
            /** Filter by a region's ID. */
            id?: string | string[];
            /** Filter by a region's name. */
            name?: string | string[];
            /** Filter by a region's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a region's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a region's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /** The region's currency code. */
            currency_code?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of regions. */
            regions: AdminRegion[];
        }, string | Error>>;
        /**
         * @description Create a region.
         *
         * @tags Admin Regions
         * @name AdminPostRegions
         * @summary Create Region
         * @request POST:/admin/regions
         * @secure
         */
        adminPostRegions: (data: AdminCreateRegion, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminRegionResponse, string | Error>>;
        /**
         * @description Retrieve a region by its ID. You can expand the region's relations or select the fields that should be returned.
         *
         * @tags Admin Regions
         * @name AdminGetRegionsId
         * @summary Get a Region
         * @request GET:/admin/regions/{id}
         * @secure
         */
        adminGetRegionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminRegionResponse, string | Error>>;
        /**
         * @description Update a region's details.
         *
         * @tags Admin Regions
         * @name AdminPostRegionsId
         * @summary Update a Region
         * @request POST:/admin/regions/{id}
         * @secure
         */
        adminPostRegionsId: (id: string, data: {
            /**
             * name
             * The region's name.
             */
            name?: string;
            /**
             * currency_code
             * The region's currency code.
             */
            currency_code?: string;
            /** The region's countries. */
            countries?: string[];
            /**
             * automatic_taxes
             * Whether taxes are calculated automatically for carts in the region.
             */
            automatic_taxes?: boolean;
            /** The payment providers enabled in the region. */
            payment_providers?: string[];
            /** The region's metadata. Can hold custom key-value pairs. */
            metadata?: object;
            /**
             * is_tax_inclusive
             * Whether the prices in the region are tax inclusive.
             */
            is_tax_inclusive?: boolean;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminRegionResponse, string | Error>>;
        /**
         * @description Delete a region.
         *
         * @tags Admin Regions
         * @name AdminDeleteRegionsId
         * @summary Delete a Region
         * @request DELETE:/admin/regions/{id}
         * @secure
         */
        adminDeleteRegionsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The region's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "region"
             */
            object: string;
            /**
             * deleted
             * Whether the region was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Retrieve a list of reservations. The reservations can be filtered by fields such as `id`. The reservations can also be sorted or paginated.
         *
         * @tags Admin Reservations
         * @name AdminGetReservations
         * @summary List Reservations
         * @request GET:/admin/reservations
         * @secure
         */
        adminGetReservations: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a location's ID to retrieve its associated reservations. */
            location_id?: string | string[];
            /** Filter by an inventory item's ID to retrieve its associated reservations. */
            inventory_item_id?: string | string[];
            /** Filter by a line item's ID to retrieve its associated reservations. */
            line_item_id?: string | string[];
            /** Filter by the ID of a user to retrieve the reservations they created. */
            created_by?: string | string[];
            /** Filter by a reservation's description. This filter applies a full-text match. To search by keywords, use the `q` query parameter instead. */
            description?: string | {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by a reservation's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a reservation's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a reservation's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of reservations. */
            reservations: AdminReservation[];
        }, string | Error>>;
        /**
         * @description Create a reservation.
         *
         * @tags Admin Reservations
         * @name AdminPostReservations
         * @summary Create Reservation
         * @request POST:/admin/reservations
         * @secure
         */
        adminPostReservations: (data: AdminCreateReservation, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReservationResponse, string | Error>>;
        /**
         * @description Retrieve a reservation by its ID. You can expand the reservation's relations or select the fields that should be returned.
         *
         * @tags Admin Reservations
         * @name AdminGetReservationsId
         * @summary Get a Reservation
         * @request GET:/admin/reservations/{id}
         * @secure
         */
        adminGetReservationsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReservationResponse, string | Error>>;
        /**
         * @description Update a reservation's details.
         *
         * @tags Admin Reservations
         * @name AdminPostReservationsId
         * @summary Update a Reservation
         * @request POST:/admin/reservations/{id}
         * @secure
         */
        adminPostReservationsId: (id: string, data: {
            /**
             * location_id
             * The ID of the associated location.
             */
            location_id?: string;
            /**
             * quantity
             * The reserved quantity.
             */
            quantity?: number;
            /**
             * description
             * The reservation's description.
             */
            description?: string;
            /** The reservation's metadata. Can hold custom key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReservationResponse, string | Error>>;
        /**
         * @description Delete a reservation.
         *
         * @tags Admin Reservations
         * @name AdminDeleteReservationsId
         * @summary Delete a Reservation
         * @request DELETE:/admin/reservations/{id}
         * @secure
         */
        adminDeleteReservationsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The reservation's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "reservation"
             */
            object: string;
            /**
             * deleted
             * Whether the reservation was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Retrieve a list of return reasons. The return reasons can be filtered by fields such as `id`. The return reasons can also be sorted or paginated.
         *
         * @tags Admin Return Reasons
         * @name AdminGetReturnReasons
         * @summary List Return Reasons
         * @request GET:/admin/return-reasons
         * @secure
         */
        adminGetReturnReasons: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the return reason's searchable properties.
             */
            q?: string;
            /** Filter by a return reason ID. */
            id?: string | string[];
            /** Filter by a return reason's value. */
            value?: string | string[];
            /** Filter by a return reason's label. */
            label?: string | string[];
            /** Filter by a description. This filter looks for an exact match of the return reason's description. To search by a term or keywords, use the  `q` query parameter instead. */
            description?: string | string[];
            /** Filter by a return reason's ID to retrieve its child return reasons. */
            parent_return_reason_id?: string | string[];
            /** Filter by a return reason's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a return reason's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a return reason's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnReasonListResponse, string | Error>>;
        /**
         * @description Create a return reason.
         *
         * @tags Admin Return Reasons
         * @name AdminPostReturnReasons
         * @summary Create Return Reason
         * @request POST:/admin/return-reasons
         * @secure
         */
        adminPostReturnReasons: (data: AdminCreateReturnReason, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnReasonResponse, string | Error>>;
        /**
         * @description Retrieve a return reason by its ID. You can expand the return reason's relations or select the fields that should be returned.
         *
         * @tags Admin Return Reasons
         * @name AdminGetReturnReasonsId
         * @summary Get a Return Reason
         * @request GET:/admin/return-reasons/{id}
         * @secure
         */
        adminGetReturnReasonsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnReasonResponse, string | Error>>;
        /**
         * @description Update a return reason's details.
         *
         * @tags Admin Return Reasons
         * @name AdminPostReturnReasonsId
         * @summary Update a Return Reason
         * @request POST:/admin/return-reasons/{id}
         * @secure
         */
        adminPostReturnReasonsId: (id: string, data: AdminUpdateReturnReason, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnReasonResponse, string | Error>>;
        /**
         * @description Delete a return reason.
         *
         * @tags Admin Return Reasons
         * @name AdminDeleteReturnReasonsId
         * @summary Delete a Return Reason
         * @request DELETE:/admin/return-reasons/{id}
         * @secure
         */
        adminDeleteReturnReasonsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminReturnReasonDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of returns. The returns can be filtered by fields such as `id`. The returns can also be sorted or paginated.
         *
         * @tags Admin Returns
         * @name AdminGetReturns
         * @summary List Returns
         * @request GET:/admin/returns
         * @secure
         */
        adminGetReturns: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a return's ID. */
            id?: string | string[];
            /** Filter by a return status. */
            status?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /** Filter by sales channel IDs to retrieve their associated returns. */
            sales_channel_id?: string[];
            /** Filter by region IDs to retrieve their associated returns. */
            region_id?: string | string[];
            /**
             * q
             * Search term to filter the return's searchable properties.
             */
            q?: string;
            /** Filter by the return's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the return's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** The return's customer id. */
            customer_id?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The return's returns. */
            returns: AdminReturn[];
        }, string | Error>>;
        /**
         * @description Create a return. The return can later be requested or confirmed.
         *
         * @tags Admin Returns
         * @name AdminPostReturns
         * @summary Create Return
         * @request POST:/admin/returns
         * @secure
         */
        adminPostReturns: (data: AdminPostReturnsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderReturnResponse, string | Error>>;
        /**
         * @description Retrieve a return by its ID. You can expand the return's relations or select the fields that should be returned.
         *
         * @tags Admin Returns
         * @name AdminGetReturnsId
         * @summary Get a Return
         * @request GET:/admin/returns/{id}
         * @secure
         */
        adminGetReturnsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnResponse, string | Error>>;
        /**
         * @description Update a return's details.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsId
         * @summary Update a Return
         * @request POST:/admin/returns/{id}
         * @secure
         */
        adminPostReturnsId: (id: string, data: AdminPostReturnsReturnReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Cancel a return.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdCancel
         * @summary Cancel a return.
         * @request POST:/admin/returns/{id}/cancel
         * @secure
         */
        adminPostReturnsIdCancel: (id: string, data: AdminPostCancelReturnReqSchema, params?: RequestParams) => Promise<HttpResponse<AdminReturnResponse, string | Error>>;
        /**
         * @description Add damaged items, whose quantity is to be dismissed, to a return. These items will have the action `RECEIVE_DAMAGED_RETURN_ITEM`.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdDismissItems
         * @summary Add Damaged Items to Return
         * @request POST:/admin/returns/{id}/dismiss-items
         * @secure
         */
        adminPostReturnsIdDismissItems: (id: string, data: AdminPostReturnsReceiveItemsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Update a damaged item, whose quantity is to be dismissed, in the return by the ID of the  item's `RECEIVE_DAMAGED_RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property. return.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdDismissItemsActionId
         * @summary Update Damaged Item of Return
         * @request POST:/admin/returns/{id}/dismiss-items/{action_id}
         * @secure
         */
        adminPostReturnsIdDismissItemsActionId: (id: string, actionId: string, data: AdminPostReturnsDismissItemsActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Remove a damaged item, whose quantity is to be dismissed, in the return by the ID of the  item's `RECEIVE_DAMAGED_RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property. return.
         *
         * @tags Admin Returns
         * @name AdminDeleteReturnsIdDismissItemsActionId
         * @summary Remove Damaged Item from Return
         * @request DELETE:/admin/returns/{id}/dismiss-items/{action_id}
         * @secure
         */
        adminDeleteReturnsIdDismissItemsActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Start a return receival process to be later confirmed using the `/admin/returns/:id/receive/confirm` API route.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdReceive
         * @summary Start Return Receival
         * @request POST:/admin/returns/{id}/receive
         * @secure
         */
        adminPostReturnsIdReceive: (id: string, data: AdminPostReceiveReturnsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminOrderReturnResponse, string | Error>>;
        /**
         * @description Cancel the receival process previously started, and hasn't been confirmed, of a return.
         *
         * @tags Admin Returns
         * @name AdminDeleteReturnsIdReceive
         * @summary Cancel Return Receival
         * @request DELETE:/admin/returns/{id}/receive
         * @secure
         */
        adminDeleteReturnsIdReceive: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The return's ID.
             */
            id: string;
            /**
             * object
             * The name of the returned object.
             * @default "return"
             */
            object: string;
            /**
             * deleted
             * Whether the return was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Add received items in a return. These items will have the action `RECEIVE_RETURN_ITEM`.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdReceiveItems
         * @summary Add Received Items to Return
         * @request POST:/admin/returns/{id}/receive-items
         * @secure
         */
        adminPostReturnsIdReceiveItems: (id: string, data: AdminPostReturnsReceiveItemsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Update a received item in the return by the ID of the  item's `RECEIVE_RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property. return.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdReceiveItemsActionId
         * @summary Update a Received Item in a Return
         * @request POST:/admin/returns/{id}/receive-items/{action_id}
         * @secure
         */
        adminPostReturnsIdReceiveItemsActionId: (id: string, actionId: string, data: AdminPostReturnsReceiveItemsActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Remove a received item in the return by the ID of the  item's `RECEIVE_RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property. return.
         *
         * @tags Admin Returns
         * @name AdminDeleteReturnsIdReceiveItemsActionId
         * @summary Remove a Received Item from Return
         * @request DELETE:/admin/returns/{id}/receive-items/{action_id}
         * @secure
         */
        adminDeleteReturnsIdReceiveItemsActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Confirm that a return has been received. This updates the quantity of the items received, if not damaged, and  reflects the changes on the order.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdReceiveConfirm
         * @summary Confirm Return Receival
         * @request POST:/admin/returns/{id}/receive/confirm
         * @secure
         */
        adminPostReturnsIdReceiveConfirm: (id: string, data: AdminPostReturnsConfirmRequestReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Confirm a requested return. The changes are applied on the inventory quantity and the order only after the return has been confirmed as received using the `/admin/returns/:id/received/confirm`.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdRequest
         * @summary Confirm Return Request
         * @request POST:/admin/returns/{id}/request
         * @secure
         */
        adminPostReturnsIdRequest: (id: string, data: AdminPostReturnsConfirmRequestReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Cancel a requested return.
         *
         * @tags Admin Returns
         * @name AdminDeleteReturnsIdRequest
         * @summary Cancel Return Request
         * @request DELETE:/admin/returns/{id}/request
         * @secure
         */
        adminDeleteReturnsIdRequest: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The return's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "return"
             */
            object: string;
            /**
             * deleted
             * Whether the return was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Add items that are requested to be returned. These items will have the action `RETURN_ITEM`.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdRequestItems
         * @summary Add Requested Items to Return
         * @request POST:/admin/returns/{id}/request-items
         * @secure
         */
        adminPostReturnsIdRequestItems: (id: string, data: AdminPostReturnsRequestItemsReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Update a requested item to be returned by the ID of the  item's `RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property. return.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdRequestItemsActionId
         * @summary Update Requested Item in Return
         * @request POST:/admin/returns/{id}/request-items/{action_id}
         * @secure
         */
        adminPostReturnsIdRequestItemsActionId: (id: string, actionId: string, data: AdminPostReturnsRequestItemsActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Remove a requested item to be returned by the ID of the item's `RETURN_ITEM` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property. return.
         *
         * @tags Admin Returns
         * @name AdminDeleteReturnsIdRequestItemsActionId
         * @summary Remove Item from Return
         * @request DELETE:/admin/returns/{id}/request-items/{action_id}
         * @secure
         */
        adminDeleteReturnsIdRequestItemsActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Add a shipping method to a return. The shipping method will have a `SHIPPING_ADD` action.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdShippingMethod
         * @summary Add a Shipping Method to a Return
         * @request POST:/admin/returns/{id}/shipping-method
         * @secure
         */
        adminPostReturnsIdShippingMethod: (id: string, data: AdminPostReturnsShippingReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Update a shipping method of the return by the ID of the item's `SHIPPING_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Returns
         * @name AdminPostReturnsIdShippingMethodActionId
         * @summary Update a Shipping Method of a Return
         * @request POST:/admin/returns/{id}/shipping-method/{action_id}
         * @secure
         */
        adminPostReturnsIdShippingMethodActionId: (id: string, actionId: string, data: AdminPostReturnsShippingActionReqSchema, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Remove a shipping method of the return by the ID of the item's `SHIPPING_ADD` action. Every item has an `actions` property, whose value is an array of actions. You can check the action's name using its `action` property, and use the value of the `id` property.
         *
         * @tags Admin Returns
         * @name AdminDeleteReturnsIdShippingMethodActionId
         * @summary Remove Shipping Method from Return
         * @request DELETE:/admin/returns/{id}/shipping-method/{action_id}
         * @secure
         */
        adminDeleteReturnsIdShippingMethodActionId: (id: string, actionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminReturnPreviewResponse, string | Error>>;
        /**
         * @description Retrieve a list of sales channels. The sales channels can be filtered by fields such as `id`. The sales channels can also be sorted or paginated.
         *
         * @tags Admin Sales Channels
         * @name AdminGetSalesChannels
         * @summary List Sales Channels
         * @request GET:/admin/sales-channels
         * @secure
         */
        adminGetSalesChannels: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the sales channel's searchable properties.
             */
            q?: string;
            /** Filter by a sales channel ID. */
            id?: string | string[];
            /** Filter by a sales channel name. */
            name?: string | string[];
            /**
             * description
             * Filter by a description. This filter matches an entire description. To search by terms or keywords, use the `q` query parameter instead.
             */
            description?: string;
            /**
             * is_disabled
             * Filter by whether the sales channel is disabled.
             */
            is_disabled?: boolean;
            /** Filter by a sales channel's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a sales channel's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a sales channel's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a location ID to retrieve its associated sales channels. */
            location_id?: string | string[];
            /** Filter by a publishable API key's ID to retrieve its associated sales channels. */
            publishable_key_id?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of sales channels. */
            sales_channels: AdminSalesChannel[];
        }, string | Error>>;
        /**
         * @description Create a sales channel.
         *
         * @tags Admin Sales Channels
         * @name AdminPostSalesChannels
         * @summary Create Sales Channel
         * @request POST:/admin/sales-channels
         * @secure
         */
        adminPostSalesChannels: (data: AdminCreateSalesChannel, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminSalesChannelResponse, string | Error>>;
        /**
         * @description Retrieve a sales channel by its ID. You can expand the sales channel's relations or select the fields that should be returned.
         *
         * @tags Admin Sales Channels
         * @name AdminGetSalesChannelsId
         * @summary Get a Sales Channel
         * @request GET:/admin/sales-channels/{id}
         * @secure
         */
        adminGetSalesChannelsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminSalesChannelResponse, string | Error>>;
        /**
         * @description Update a sales channel's details.
         *
         * @tags Admin Sales Channels
         * @name AdminPostSalesChannelsId
         * @summary Update a Sales Channel
         * @request POST:/admin/sales-channels/{id}
         * @secure
         */
        adminPostSalesChannelsId: (id: string, data: AdminUpdateSalesChannel, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminSalesChannelResponse, string | Error>>;
        /**
         * @description Delete a sales channel.
         *
         * @tags Admin Sales Channels
         * @name AdminDeleteSalesChannelsId
         * @summary Delete a Sales Channel
         * @request DELETE:/admin/sales-channels/{id}
         * @secure
         */
        adminDeleteSalesChannelsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminSalesChannelDeleteResponse, string | Error>>;
        /**
         * @description Manage products in a sales channel to add or remove them from the channel.
         *
         * @tags Admin Sales Channels
         * @name AdminPostSalesChannelsIdProducts
         * @summary Manage Products in Sales Channel
         * @request POST:/admin/sales-channels/{id}/products
         * @secure
         */
        adminPostSalesChannelsIdProducts: (id: string, data: {
            /** The products to add to the sales channel. */
            add?: string[];
            /** The products to remove from the sales channel. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminSalesChannelResponse, string | Error>>;
        /**
         * @description Retrieve a list of shipping options. The shipping options can be filtered by fields such as `id`. The shipping options can also be sorted or paginated.
         *
         * @tags Admin Shipping Options
         * @name AdminGetShippingOptions
         * @summary List Shipping Options
         * @request GET:/admin/shipping-options
         * @secure
         */
        adminGetShippingOptions: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a shipping option ID. */
            id?: string | string[];
            /**
             * q
             * Search term to filter the shipping option's searchable properties.
             */
            q?: string;
            /** Filter by a service zone's ID to retrieve its associated shipping options. */
            service_zone_id?: string | string[];
            /** Filter by a shipping profile's ID to retrieve its associated shipping options. */
            shipping_profile_id?: string | string[];
            /** Filter by a fulfillment provider's ID to retrieve its associated shipping options. */
            provider_id?: string | string[];
            /** Filter by a shipping option type's ID to retrieve its associated shipping options. */
            shipping_option_type_id?: string | string[];
            /** Filter by a shipping option's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a shipping option's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a shipping option's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a location ID to retrieve its associated shipping option. */
            stock_location_id?: string | string[];
            /**
             * is_return
             * Filter by whether the shipping option is used for returns.
             */
            is_return?: boolean;
            /**
             * admin_only
             * Filter by whether the shipping option is used by admin users only.
             */
            admin_only?: boolean;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of shipping options. */
            shipping_options: object[];
        }, string | Error>>;
        /**
         * @description Create a shipping option.
         *
         * @tags Admin Shipping Options
         * @name AdminPostShippingOptions
         * @summary Create Shipping Option
         * @request POST:/admin/shipping-options
         * @secure
         */
        adminPostShippingOptions: (data: AdminCreateShippingOption, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminShippingOptionResponse, string | Error>>;
        /**
         * @description Retrieve a shipping option by its ID. You can expand the shipping option's relations or select the fields that should be returned.
         *
         * @tags Admin Shipping Options
         * @name AdminGetShippingOptionsId
         * @summary Get a Shipping Option
         * @request GET:/admin/shipping-options/{id}
         * @secure
         */
        adminGetShippingOptionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminShippingOptionResponse, string | Error>>;
        /**
         * @description Update a shipping option's details.
         *
         * @tags Admin Shipping Options
         * @name AdminPostShippingOptionsId
         * @summary Update a Shipping Option
         * @request POST:/admin/shipping-options/{id}
         * @secure
         */
        adminPostShippingOptionsId: (id: string, data: {
            /**
             * name
             * The shipping option's name.
             */
            name?: string;
            /** The shipping option's data that is useful for third-party providers. */
            data?: object;
            /** The type of the shipping option's price. If `calculated`, its price is retrieved by the  associated fulfillment provider during checkout. If `flat`, its price is set in the `prices` property. */
            price_type?: "calculated" | "flat";
            /**
             * provider_id
             * The ID of the associated fulfillment provider that is used to process the option.
             */
            provider_id?: string;
            /**
             * shipping_profile_id
             * The ID of the shipping profile this shipping option belongs to.
             */
            shipping_profile_id?: string;
            /** The shipping option's type. */
            type?: {
                /**
                 * label
                 * The type's label.
                 */
                label: string;
                /**
                 * description
                 * The type's description.
                 */
                description: string;
                /**
                 * code
                 * The type's code.
                 */
                code: string;
            };
            /** The shipping option's prices. If the `price_type` is `calculated`, pass an empty array. */
            prices?: ({
                /**
                 * id
                 * The ID of an existing price.
                 */
                id?: string;
                /**
                 * currency_code
                 * The price's currency code.
                 */
                currency_code?: string;
                /**
                 * amount
                 * The price's amount.
                 */
                amount?: number;
            } | {
                /**
                 * id
                 * The ID of an existing price.
                 */
                id?: string;
                /**
                 * region_id
                 * The ID of the associated region.
                 */
                region_id?: string;
                /**
                 * amount
                 * The price's amount.
                 */
                amount?: number;
            })[];
            /** The shipping option's rules. */
            rules?: ({
                /** The operator used to check whether a rule applies. */
                operator: "in" | "eq" | "ne" | "gt" | "gte" | "lt" | "lte" | "nin";
                /**
                 * attribute
                 * The name of a property or table that the rule applies to.
                 * @example "customer_group"
                 */
                attribute: string;
                /** A value of the attribute that enables this rule. */
                value: string | string[];
            } | {
                /**
                 * id
                 * The rule's ID.
                 */
                id: string;
                /** The operator used to check whether a rule applies. */
                operator: "in" | "eq" | "ne" | "gt" | "gte" | "lt" | "lte" | "nin";
                /**
                 * attribute
                 * The name of a property or table that the rule applies to.
                 * @example "customer_group"
                 */
                attribute: string;
                /** A value of the attribute that enables this rule. */
                value: string | string[];
            })[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminShippingOptionResponse, string | Error>>;
        /**
         * @description Delete a shipping option.
         *
         * @tags Admin Shipping Options
         * @name AdminDeleteShippingOptionsId
         * @summary Delete a Shipping Option
         * @request DELETE:/admin/shipping-options/{id}
         * @secure
         */
        adminDeleteShippingOptionsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminShippingOptionDeleteResponse, string | Error>>;
        /**
         * @description Manage the rules of a shipping option to create, update, or delete them.
         *
         * @tags Admin Shipping Options
         * @name AdminPostShippingOptionsIdRulesBatch
         * @summary Manage the Rules of a Shipping Option
         * @request POST:/admin/shipping-options/{id}/rules/batch
         * @secure
         */
        adminPostShippingOptionsIdRulesBatch: (id: string, data: {
            /** The shipping option rules to create. */
            create?: AdminCreateShippingOptionRule[];
            /** The shipping option rules to update. */
            update?: AdminUpdateShippingOptionRule[];
            /** The shipping option rules to delete. */
            delete?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The created shipping option rules. */
            created: AdminShippingOptionRule[];
            /** The updated shipping option rules. */
            updated: AdminShippingOptionRule[];
            /** The details of the deleted shipping option rules. */
            deleted: {
                /** The IDs of the deleted shipping option rules. */
                ids: string[];
                /**
                 * object
                 * The name of the deleted object.
                 * @default "shipping_option_rule"
                 */
                object: string;
                /**
                 * deleted
                 * The deleted's details.
                 */
                deleted: boolean;
            };
        }, string | Error>>;
        /**
         * @description Retrieve a list of shipping profiles. The shipping profiles can be filtered by fields such as `id`. The shipping profiles can also be sorted or paginated.
         *
         * @tags Admin Shipping Profiles
         * @name AdminGetShippingProfiles
         * @summary List Shipping Profiles
         * @request GET:/admin/shipping-profiles
         * @secure
         */
        adminGetShippingProfiles: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a shipping profile's ID. */
            id?: string | string[];
            /**
             * q
             * Search term to filter the shipping profile's searchable properties.
             */
            q?: string;
            /**
             * type
             * Filter by a shipping profile's type.
             */
            type?: string;
            /**
             * name
             * Filter by a shipping profile's name.
             */
            name?: string;
            /** Filter by a shipping profile's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a shipping profile's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a shipping profile's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of shipping profiles. */
            shipping_profiles: AdminShippingProfile[];
        }, string | Error>>;
        /**
         * @description Create a shipping profile.
         *
         * @tags Admin Shipping Profiles
         * @name AdminPostShippingProfiles
         * @summary Create Shipping Profile
         * @request POST:/admin/shipping-profiles
         * @secure
         */
        adminPostShippingProfiles: (data: AdminCreateShippingProfile, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminShippingProfileResponse, string | Error>>;
        /**
         * @description Retrieve a shipping profile by its ID. You can expand the shipping profile's relations or select the fields that should be returned.
         *
         * @tags Admin Shipping Profiles
         * @name AdminGetShippingProfilesId
         * @summary Get a Shipping Profile
         * @request GET:/admin/shipping-profiles/{id}
         * @secure
         */
        adminGetShippingProfilesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminShippingProfileResponse, string | Error>>;
        /**
         * @description Update a shipping profile's details.
         *
         * @tags Admin Shipping Profiles
         * @name AdminPostShippingProfilesId
         * @summary Update a Shipping Profile
         * @request POST:/admin/shipping-profiles/{id}
         * @secure
         */
        adminPostShippingProfilesId: (id: string, data: {
            /**
             * name
             * The shipping profile's name.
             */
            name?: string;
            /**
             * type
             * The shipping profile's type.
             */
            type?: string;
            /** The shipping profile's metadata. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminShippingProfileResponse, string | Error>>;
        /**
         * @description Delete a shipping profile.
         *
         * @tags Admin Shipping Profiles
         * @name AdminDeleteShippingProfilesId
         * @summary Delete a Shipping Profile
         * @request DELETE:/admin/shipping-profiles/{id}
         * @secure
         */
        adminDeleteShippingProfilesId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminShippingProfileDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of stock locations. The stock locations can be filtered by fields such as `id`. The stock locations can also be sorted or paginated.
         *
         * @tags Admin Stock Locations
         * @name AdminGetStockLocations
         * @summary List Stock Locations
         * @request GET:/admin/stock-locations
         * @secure
         */
        adminGetStockLocations: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the stock location's searchable properties.
             */
            q?: string;
            /** Filter by a stock location ID. */
            id?: string | string[];
            /** Filter by a stock location name. */
            name?: string | string[];
            /** Filter by an address ID to retrieve its associated locations. */
            address_id?: string | string[];
            /** Filter by a sales channel ID to retrieve its associated locations. */
            sales_channel_id?: string | string[];
            /** Filter by a stock location's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a stock location's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a stock location's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationListResponse, string | Error>>;
        /**
         * @description Create a stock location.
         *
         * @tags Admin Stock Locations
         * @name AdminPostStockLocations
         * @summary Create Stock Location
         * @request POST:/admin/stock-locations
         * @secure
         */
        adminPostStockLocations: (data: AdminCreateStockLocation, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationResponse, string | Error>>;
        /**
         * @description Retrieve a stock location by its ID. You can expand the stock location's relations or select the fields that should be returned.
         *
         * @tags Admin Stock Locations
         * @name AdminGetStockLocationsId
         * @summary Get a Stock Location
         * @request GET:/admin/stock-locations/{id}
         * @secure
         */
        adminGetStockLocationsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationResponse, string | Error>>;
        /**
         * @description Update a stock location's details.
         *
         * @tags Admin Stock Locations
         * @name AdminPostStockLocationsId
         * @summary Update a Stock Location
         * @request POST:/admin/stock-locations/{id}
         * @secure
         */
        adminPostStockLocationsId: (id: string, data: AdminUpdateStockLocation, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationResponse, string | Error>>;
        /**
         * @description Delete a stock location.
         *
         * @tags Admin Stock Locations
         * @name AdminDeleteStockLocationsId
         * @summary Delete a Stock Location
         * @request DELETE:/admin/stock-locations/{id}
         * @secure
         */
        adminDeleteStockLocationsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationDeleteResponse, string | Error>>;
        /**
         * @description Manage the fulfillment providers to add or remove them from a stock location.
         *
         * @tags Admin Stock Locations
         * @name AdminPostStockLocationsIdFulfillmentProviders
         * @summary Manage Fulfillment Providers of a Stock Location
         * @request POST:/admin/stock-locations/{id}/fulfillment-providers
         * @secure
         */
        adminPostStockLocationsIdFulfillmentProviders: (id: string, data: {
            /** The fulfillment providers to add to the stock location. */
            add?: string[];
            /** The fulfillment providers to remove from the stock location. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationResponse, string | Error>>;
        /**
         * @description Create and add a fulfillment set to a stock location.
         *
         * @tags Admin Stock Locations
         * @name AdminPostStockLocationsIdFulfillmentSets
         * @summary Add Fulfillment Set to Stock Location
         * @request POST:/admin/stock-locations/{id}/fulfillment-sets
         * @secure
         */
        adminPostStockLocationsIdFulfillmentSets: (id: string, data: {
            /**
             * name
             * The fulfillment set's name.
             */
            name: string;
            /**
             * type
             * The fulfillment set's type.
             */
            type: string;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationResponse, string | Error>>;
        /**
         * @description Manage the sales channels in a stock location by adding or removing them.
         *
         * @tags Admin Stock Locations
         * @name AdminPostStockLocationsIdSalesChannels
         * @summary Manage Sales Channels of a Stock Location
         * @request POST:/admin/stock-locations/{id}/sales-channels
         * @secure
         */
        adminPostStockLocationsIdSalesChannels: (id: string, data: {
            /** The sales channels to add. */
            add?: string[];
            /** The sales channels to remove. */
            remove?: string[];
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStockLocationResponse, string | Error>>;
        /**
         * @description Retrieve a list of stores. The stores can be filtered by fields such as `id`. The stores can also be sorted or paginated.
         *
         * @tags Admin Stores
         * @name AdminGetStores
         * @summary List Stores
         * @request GET:/admin/stores
         * @secure
         */
        adminGetStores: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the store's searchable properties.
             */
            q?: string;
            /** Filter by a store ID. */
            id?: string | string[];
            /** Filter by a store name. */
            name?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<AdminStoreListResponse, string | Error>>;
        /**
         * @description Retrieve a store by its ID. You can expand the store's relations or select the fields that should be returned.
         *
         * @tags Admin Stores
         * @name AdminGetStoresId
         * @summary Get a Store
         * @request GET:/admin/stores/{id}
         * @secure
         */
        adminGetStoresId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStoreResponse, string | Error>>;
        /**
         * @description Update a store's details.
         *
         * @tags Admin Stores
         * @name AdminPostStoresId
         * @summary Update a Store
         * @request POST:/admin/stores/{id}
         * @secure
         */
        adminPostStoresId: (id: string, data: AdminUpdateStore, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminStoreResponse, string | Error>>;
        /**
         * @description Retrieve a list of tax rates. The tax rates can be filtered by fields such as `id`. The tax rates can also be sorted or paginated.
         *
         * @tags Admin Tax Rates
         * @name AdminGetTaxRates
         * @summary List Tax Rates
         * @request GET:/admin/tax-rates
         * @secure
         */
        adminGetTaxRates: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search terms to filter the tax rate's searchable properties.
             */
            q?: string;
            /** Filter by a tax region ID to retrieve its associated rates. */
            tax_region_id?: string | string[] | {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by whether the tax rate is a default in its tax region. */
            is_default?: "true" | "false";
            /** Filter by a tax rate's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a tax rate's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a tax rate's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /**
             * service_zone_id
             * Filter by a service zone's ID to retrieve its associated tax rates.
             */
            service_zone_id?: string;
            /**
             * shipping_profile_id
             * Filter by a shipping profile's ID to retrieve its associated tax rates.
             */
            shipping_profile_id?: string;
            /**
             * provider_id
             * Filter by a fulfillment provider's ID to retrieve its associated tax rates.
             */
            provider_id?: string;
            /**
             * shipping_option_type_id
             * Filter by a shipping option type's ID to retrieve its associated tax rates.
             */
            shipping_option_type_id?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The tax rate's tax rates. */
            tax_rates: AdminTaxRate[];
        }, string | Error>>;
        /**
         * @description Create a tax rate.
         *
         * @tags Admin Tax Rates
         * @name AdminPostTaxRates
         * @summary Create Tax Rate
         * @request POST:/admin/tax-rates
         * @secure
         */
        adminPostTaxRates: (data: AdminCreateTaxRate, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRateResponse, string | Error>>;
        /**
         * @description Retrieve a tax rate by its ID. You can expand the tax rate's relations or select the fields that should be returned.
         *
         * @tags Admin Tax Rates
         * @name AdminGetTaxRatesId
         * @summary Get a Tax Rate
         * @request GET:/admin/tax-rates/{id}
         * @secure
         */
        adminGetTaxRatesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRateResponse, string | Error>>;
        /**
         * @description Update a tax rate's details.
         *
         * @tags Admin Tax Rates
         * @name AdminPostTaxRatesId
         * @summary Update a Tax Rate
         * @request POST:/admin/tax-rates/{id}
         * @secure
         */
        adminPostTaxRatesId: (id: string, data: AdminUpdateTaxRate, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRateResponse, string | Error>>;
        /**
         * @description Delete a tax rate.
         *
         * @tags Admin Tax Rates
         * @name AdminDeleteTaxRatesId
         * @summary Delete a Tax Rate
         * @request DELETE:/admin/tax-rates/{id}
         * @secure
         */
        adminDeleteTaxRatesId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminTaxRateDeleteResponse, string | Error>>;
        /**
         * @description Create a tax rule for a rate.
         *
         * @tags Admin Tax Rates
         * @name AdminPostTaxRatesIdRules
         * @summary Create Tax Rule for a Rate
         * @request POST:/admin/tax-rates/{id}/rules
         * @secure
         */
        adminPostTaxRatesIdRules: (id: string, data: AdminCreateTaxRateRule, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRateResponse, string | Error>>;
        /**
         * @description Remove a tax rate's rule.
         *
         * @tags Admin Tax Rates
         * @name AdminDeleteTaxRatesIdRulesRuleId
         * @summary Remove Rule of Tax Rate
         * @request DELETE:/admin/tax-rates/{id}/rules/{rule_id}
         * @secure
         */
        adminDeleteTaxRatesIdRulesRuleId: (id: string, ruleId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The tax rate's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             */
            object: string;
            /**
             * deleted
             * Whether the Tax Rate was deleted.
             */
            deleted: boolean;
        } & {
            /** The tax rate's details. */
            parent?: AdminTaxRate;
        }, string | Error>>;
        /**
         * @description Retrieve a list of tax regions. The tax regions can be filtered by fields such as `id`. The tax regions can also be sorted or paginated.
         *
         * @tags Admin Tax Regions
         * @name AdminGetTaxRegions
         * @summary List Tax Regions
         * @request GET:/admin/tax-regions
         * @secure
         */
        adminGetTaxRegions: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter a tax region's searchable properties.
             */
            q?: string;
            /** Filter by a tax region ID. */
            id?: string | string[];
            /** Filter by a country code. */
            country_code?: string | string[] | {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by a province code. */
            province_code?: string | string[] | {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by the ID of a parent tax region to retrieve its child tax regions. */
            parent_id?: string | string[] | {
                /** Filter by an exact match. */
                $eq?: string;
                /** Filter by values not matching this parameter. */
                $ne?: string;
                /** Filter by values in this array's items. */
                $in?: string[];
                /** Filter by values not in this array's items. */
                $nin?: string[];
                /** Apply a `like` filter. Useful for strings only. */
                $like?: string;
                /** Apply a case-insensitive `like` filter. Useful for strings only. */
                $ilike?: string;
                /** Apply a regex filter. Useful for strings only. */
                $re?: string;
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter by values greater than this parameter. Useful for numbers and dates only. */
                $gt?: string;
                /** Filter by values greater than or equal to this parameter. Useful for numbers and dates only. */
                $gte?: string;
                /** Filter by values less than this parameter. Useful for numbers and dates only. */
                $lt?: string;
                /** Filter by values less than or equal to this parameter. Useful for numbers and dates only. */
                $lte?: string;
            };
            /** Filter by the ID of the user to retrieve the tax regions they created. */
            created_by?: string | string[];
            /** Filter by a tax region's creation date. */
            created_at?: string | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a tax region's update date. */
            updated_at?: string | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a tax region's deletion date. */
            deleted_at?: string | {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not equal to this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching the conditions in this parameter. */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of tax regions. */
            tax_regions: object[];
        }, string | Error>>;
        /**
         * @description Create a tax region.
         *
         * @tags Admin Tax Regions
         * @name AdminPostTaxRegions
         * @summary Create Tax Region
         * @request POST:/admin/tax-regions
         * @secure
         */
        adminPostTaxRegions: (data: AdminCreateTaxRegion, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRegionResponse, string | Error>>;
        /**
         * @description Retrieve a tax region by its ID. You can expand the tax region's relations or select the fields that should be returned.
         *
         * @tags Admin Tax Regions
         * @name AdminGetTaxRegionsId
         * @summary Get a Tax Region
         * @request GET:/admin/tax-regions/{id}
         * @secure
         */
        adminGetTaxRegionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRegionResponse, string | Error>>;
        /**
         * @description Update a tax region's details.
         *
         * @tags Admin Tax Regions
         * @name AdminPostTaxRegionsId
         * @summary Update a Tax Region
         * @request POST:/admin/tax-regions/{id}
         * @secure
         */
        adminPostTaxRegionsId: (id: string, data: AdminUpdateTaxRegion, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminTaxRegionResponse, string | Error>>;
        /**
         * @description Delete a tax region.
         *
         * @tags Admin Tax Regions
         * @name AdminDeleteTaxRegionsId
         * @summary Delete a Tax Region
         * @request DELETE:/admin/tax-regions/{id}
         * @secure
         */
        adminDeleteTaxRegionsId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminTaxRegionDeleteResponse, string | Error>>;
        /**
         * @description Upload files to the configured File Module Provider.
         *
         * @tags Admin Uploads
         * @name AdminPostUploads
         * @summary Upload Files
         * @request POST:/admin/uploads
         * @secure
         */
        adminPostUploads: (data: {
            /** The upload's files. */
            files: ({
                /**
                 * name
                 * The file's name.
                 */
                name: string;
                /**
                 * content
                 * The file's content.
                 */
                content: string;
            } | object)[];
        } | object[], params?: RequestParams) => Promise<HttpResponse<AdminFileListResponse, string | Error>>;
        /**
         * @description Retrieve an uploaded file by its ID. You can expand the file's relations or select the fields that should be returned.
         *
         * @tags Admin Uploads
         * @name AdminGetUploadsId
         * @summary Get a File
         * @request GET:/admin/uploads/{id}
         * @secure
         */
        adminGetUploadsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminFileResponse, string | Error>>;
        /**
         * @description Delete a file. Uses the installed file module provider to delete the file.
         *
         * @tags Admin Uploads
         * @name AdminDeleteUploadsId
         * @summary Delete a File
         * @request DELETE:/admin/uploads/{id}
         * @secure
         */
        adminDeleteUploadsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The file's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "file"
             */
            object: string;
            /**
             * deleted
             * Whether the file was deleted.
             */
            deleted: boolean;
        }, string | Error>>;
        /**
         * @description Retrieve a list of users. The users can be filtered by fields such as `id`. The users can also be sorted or paginated.
         *
         * @tags Admin Users
         * @name AdminGetUsers
         * @summary List Users
         * @request GET:/admin/users
         * @secure
         */
        adminGetUsers: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * The search term to filter the user's searchable properties.
             */
            q?: string;
            /** Filter by a user's ID. */
            id?: string | string[];
            /**
             * email
             * Filter by an email.
             * @format email
             */
            email?: string;
            /**
             * first_name
             * Filter by a first name.
             */
            first_name?: string;
            /**
             * last_name
             * Filter by a last name.
             */
            last_name?: string;
            /** Filter by a user's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a user's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a user's deletion date. */
            deleted_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching the conditions in this parameter. */
                $not?: string | object | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
        }, params?: RequestParams) => Promise<HttpResponse<AdminUserListResponse, string | Error>>;
        /**
         * @description Retrieve the logged-in user's details.
         *
         * @tags Admin Users
         * @name AdminGetUsersMe
         * @summary Get Logged-In User
         * @request GET:/admin/users/me
         * @secure
         */
        adminGetUsersMe: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminUserResponse, string | Error>>;
        /**
         * @description Retrieve a user by its ID. You can expand the user's relations or select the fields that should be returned.
         *
         * @tags Admin Users
         * @name AdminGetUsersId
         * @summary Get a User
         * @request GET:/admin/users/{id}
         * @secure
         */
        adminGetUsersId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminUserResponse, string | Error>>;
        /**
         * @description Update a user's details.
         *
         * @tags Admin Users
         * @name AdminPostUsersId
         * @summary Update a User
         * @request POST:/admin/users/{id}
         * @secure
         */
        adminPostUsersId: (id: string, data: AdminUpdateUser, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminUserResponse, string | Error>>;
        /**
         * @description Delete a user.
         *
         * @tags Admin Users
         * @name AdminDeleteUsersId
         * @summary Delete a User
         * @request DELETE:/admin/users/{id}
         * @secure
         */
        adminDeleteUsersId: (id: string, params?: RequestParams) => Promise<HttpResponse<AdminUserDeleteResponse, string | Error>>;
        /**
         * @description Retrieve a list of workflows executions. The workflows executions can be filtered by fields such as `id`. The workflows executions can also be sorted or paginated.
         *
         * @tags Admin Workflows Executions
         * @name AdminGetWorkflowsExecutions
         * @summary List Workflows Executions
         * @request GET:/admin/workflows-executions
         * @secure
         */
        adminGetWorkflowsExecutions: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a transaction ID. */
            transaction_id?: string | string[];
            /** Filter by a workflow ID. */
            workflow_id?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The workflows execution's workflow executions. */
            workflow_executions: AdminWorkflowExecution[];
        }, string | Error>>;
        /**
         * @description Retrieve a workflows execution by its ID. You can expand the workflows execution's relations or select the fields that should be returned.
         *
         * @tags Admin Workflows Executions
         * @name AdminGetWorkflowsExecutionsId
         * @summary Get a Workflows Execution
         * @request GET:/admin/workflows-executions/{id}
         * @secure
         */
        adminGetWorkflowsExecutionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminWorkflowExecutionResponse, string | Error>>;
        /**
         * @description Execute a workflow by its ID.
         *
         * @tags Admin Workflows Executions
         * @name AdminPostWorkflowsExecutionsWorkflowIdRun
         * @summary Execute a Workflow
         * @request POST:/admin/workflows-executions/{workflow_id}/run
         * @secure
         */
        adminPostWorkflowsExecutionsWorkflowIdRun: (workflowId: string, data: AdminCreateWorkflowsRun, params?: RequestParams) => Promise<HttpResponse<{
            /** The workflow's details */
            acknowledgement: {
                /**
                 * workflowId
                 * The ID of the executed workflow.
                 */
                workflowId: string;
                /**
                 * transactionId
                 * The ID of the workflow exection's transaction. Use this later to track the workflow execution's progress or succeed / fail its steps.
                 */
                transactionId: string;
                /**
                 * parentStepIdempotencyKey
                 * The idempotency key of the workflow execution.
                 */
                parentStepIdempotencyKey?: string;
                /**
                 * hasFinished
                 * Whether the workflow execution has finished.
                 */
                hasFinished: boolean;
                /**
                 * hasFailed
                 * Whether the workflow execution has failed.
                 */
                hasFailed: boolean;
            };
        }, string | Error>>;
        /**
         * @description Set the status of a step in a workflow's execution as failed. This is useful for long-running workflows.
         *
         * @tags Admin Workflows Executions
         * @name AdminPostWorkflowsExecutionsWorkflowIdStepsFailure
         * @summary Fail a Step in a Workflow's Execution
         * @request POST:/admin/workflows-executions/{workflow_id}/steps/failure
         * @secure
         */
        adminPostWorkflowsExecutionsWorkflowIdStepsFailure: (workflowId: string, data: AdminCreateWorkflowsAsyncResponse, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * success
             * Whether the workflow step has failed successfully.
             */
            success: boolean;
        }, string | Error>>;
        /**
         * @description Set the status of a step in a workflow's execution as successful. This is useful for long-running workflows.
         *
         * @tags Admin Workflows Executions
         * @name AdminPostWorkflowsExecutionsWorkflowIdStepsSuccess
         * @summary Succeed a Step in a Workflow's Execution
         * @request POST:/admin/workflows-executions/{workflow_id}/steps/success
         * @secure
         */
        adminPostWorkflowsExecutionsWorkflowIdStepsSuccess: (workflowId: string, data: AdminCreateWorkflowsAsyncResponse, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * success
             * Whether the workflow step was succeeded.
             */
            success: boolean;
        }, string | Error>>;
        /**
         * @description Subscribe to a workflow's execution to receive real-time information about its steps, status, and data. This route returns an event stream that you can consume using the [EventSource API](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
         *
         * @tags Admin Workflows Executions
         * @name AdminGetWorkflowsExecutionsWorkflowIdSubscribe
         * @summary Subscribe to a Workflow's Execution
         * @request GET:/admin/workflows-executions/{workflow_id}/subscribe
         * @secure
         */
        adminGetWorkflowsExecutionsWorkflowIdSubscribe: (workflowId: string, params?: RequestParams) => Promise<HttpResponse<string, string | Error>>;
        /**
         * @description Get the details of the workflow's execution.
         *
         * @tags Admin Workflows Executions
         * @name AdminGetWorkflowsExecutionsWorkflowIdTransactionId
         * @summary Get Workflow Execution's Details
         * @request GET:/admin/workflows-executions/{workflow_id}/{transaction_id}
         * @secure
         */
        adminGetWorkflowsExecutionsWorkflowIdTransactionId: (workflowId: string, transactionId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<AdminWorkflowExecutionResponse, string | Error>>;
        /**
         * @description Subscribe to a step in a workflow's execution to receive real-time information about its status and data. This route returns an event stream that you can consume using the [EventSource API](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
         *
         * @tags Admin Workflows Executions
         * @name AdminGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe
         * @summary Subscribe to Step of a Workflow's Execution
         * @request GET:/admin/workflows-executions/{workflow_id}/{transaction_id}/{step_id}/subscribe
         * @secure
         */
        adminGetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribe: (workflowId: string, transactionId: string, stepId: string, params?: RequestParams) => Promise<HttpResponse<string, string | Error>>;
        /**
         * @description Retrieves a commission rule with 'site' reference type.
         *
         * @tags Admin
         * @name AdminGetDefaultCommissionRule
         * @summary Get default commission rule
         * @request GET:/admin/commission/default
         * @secure
         */
        adminGetDefaultCommissionRule: (params?: RequestParams) => Promise<HttpResponse<{
            /** Commission aggregate object */
            commission_rule?: AdminCommissionAggregate;
        }, any>>;
        /**
         * @description Creates or updates default commission rule.
         *
         * @tags Admin
         * @name AdminUpsertDefaultCommissionRule
         * @summary Upsert default CommissionRule
         * @request POST:/admin/commission/default
         * @secure
         */
        adminUpsertDefaultCommissionRule: (data: AdminUpsertDefaultCommissionRule, params?: RequestParams) => Promise<HttpResponse<{
            /** Commission rule object */
            commission_rule?: AdminCommissionRule;
        }, any>>;
        /**
         * @description Retrieves a list of commission rules.
         *
         * @tags Admin
         * @name AdminListCommissionRules
         * @summary List Commission rules
         * @request GET:/admin/commission/rules
         * @secure
         */
        adminListCommissionRules: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
        }, params?: RequestParams) => Promise<HttpResponse<{
            commission_rules?: AdminCommissionAggregate[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a new commission rule.
         *
         * @tags Admin
         * @name AdminCreateCommissionRule
         * @summary Create a CommissionRule
         * @request POST:/admin/commission/rules
         * @secure
         */
        adminCreateCommissionRule: (data: AdminCreateCommissionRule, params?: RequestParams) => Promise<HttpResponse<{
            /** Commission rule object */
            commission_rule?: AdminCommissionRule;
        }, any>>;
        /**
         * @description Retrieves a commission rule by id.
         *
         * @tags Admin
         * @name AdminGetCommissionRuleById
         * @summary Get commission rule by id
         * @request GET:/admin/commission/rules/{id}
         * @secure
         */
        adminGetCommissionRuleById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** Commission aggregate object */
            commission_rule?: AdminCommissionAggregate;
        }, any>>;
        /**
         * @description Updates commission rule by id.
         *
         * @tags Admin
         * @name AdminUpdateCommissionRuleById
         * @summary Update CommissionRule
         * @request POST:/admin/commission/rules/{id}
         * @secure
         */
        adminUpdateCommissionRuleById: (id: string, data: AdminUpdateCommissionRule, params?: RequestParams) => Promise<HttpResponse<{
            /** Commission rule object */
            commission_rule?: AdminCommissionRule;
        }, any>>;
        /**
         * @description Deletes a commission rule by id.
         *
         * @tags Admin
         * @name AdminDeleteCommissionRuleById
         * @summary Delete a Commission Rule
         * @request DELETE:/admin/commission/rules/{id}
         * @secure
         */
        adminDeleteCommissionRuleById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted rule */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves rules list
         *
         * @tags Admin
         * @name AdminListRules
         * @summary List rules
         * @request GET:/admin/configuration
         * @secure
         */
        adminListRules: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
        }, params?: RequestParams) => Promise<HttpResponse<{
            configuration_rules?: ConfigurationRule[];
            /** The total number of requests */
            count?: number;
            /** The number of requests skipped */
            offset?: number;
            /** The number of requests per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a request to admin to accept new resource
         *
         * @tags Admin
         * @name AdminCreateRule
         * @summary Create a configuration rule
         * @request POST:/admin/configuration
         * @secure
         */
        adminCreateRule: (data: AdminCreateRule, params?: RequestParams) => Promise<HttpResponse<{
            /** A configuration rule object */
            configuration_rule?: ConfigurationRule;
        }, any>>;
        /**
         * @description Updates a rule
         *
         * @tags Admin
         * @name AdminUpdateRule
         * @summary Update a configuration rule
         * @request POST:/admin/configuration/{id}
         * @secure
         */
        adminUpdateRule: (id: string, data: AdminUpdateRule, params?: RequestParams) => Promise<HttpResponse<{
            /** A configuration rule object */
            configuration_rule?: ConfigurationRule;
        }, any>>;
        /**
         * @description Retrieves requests list
         *
         * @tags Admin
         * @name AdminListRequests
         * @summary List requests
         * @request GET:/admin/requests
         * @secure
         */
        adminListRequests: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
            /** Filter by request type */
            type?: "product" | "product_collection" | "product_category" | "seller" | "review_remove" | "product_type";
            /** Filter by request status */
            status?: "pending" | "rejected" | "accepted";
        }, params?: RequestParams) => Promise<HttpResponse<{
            requests?: AdminRequest[];
            /** The total number of requests */
            count?: number;
            /** The number of requests skipped */
            offset?: number;
            /** The number of requests per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a request by id.
         *
         * @tags Admin
         * @name AdminGetRequestById
         * @summary Get return request by id
         * @request GET:/admin/requests/{id}
         * @secure
         */
        adminGetRequestById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A request object */
            request?: AdminRequest;
        }, any>>;
        /**
         * @description Retrieves a request by id.
         *
         * @tags Admin
         * @name AdminReviewRequestById
         * @summary Get return request by id
         * @request POST:/admin/requests/{id}
         * @secure
         */
        adminReviewRequestById: (id: string, data: AdminReviewRequest, params?: RequestParams) => Promise<HttpResponse<{
            id?: string;
            status?: "accepted" | "rejected";
        }, any>>;
        /**
         * @description Retrieves requests list
         *
         * @tags OrderReturnRequest
         * @name AdminListOrderReturnRequests
         * @summary List return requests
         * @request GET:/admin/return-request
         * @secure
         */
        adminListOrderReturnRequests: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
            /** Filter by request status */
            status?: "pending" | "refunded" | "withdrawn" | "escalated" | "canceled";
        }, params?: RequestParams) => Promise<HttpResponse<{
            order_return_request?: AdminOrderReturnRequest[];
            /** The total number of requests */
            count?: number;
            /** The number of requests skipped */
            offset?: number;
            /** The number of requests per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a request by id.
         *
         * @tags OrderReturnRequest
         * @name AdminGetOrderReturnRequestById
         * @summary Get return request by id
         * @request GET:/admin/return-request/{id}
         * @secure
         */
        adminGetOrderReturnRequestById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A return request object with its properties */
            orderReturnRequest?: OrderReturnRequest;
        }, any>>;
        /**
         * @description Updates a request by id.
         *
         * @tags OrderReturnRequest
         * @name AdminUpdateOrderReturnRequestById
         * @summary Update return request by id
         * @request POST:/admin/return-request/{id}
         * @secure
         */
        adminUpdateOrderReturnRequestById: (id: string, data: AdminUpdateOrderReturnRequest, params?: RequestParams) => Promise<HttpResponse<{
            /** A return request object with its properties */
            orderReturnRequest?: OrderReturnRequest;
        }, any>>;
        /**
         * @description Retrieves review list
         *
         * @tags Admin
         * @name AdminListReviews
         * @summary List reviews
         * @request GET:/admin/reviews
         * @secure
         */
        adminListReviews: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
            /** Filter by review reference */
            reference?: "product" | "seller";
        }, params?: RequestParams) => Promise<HttpResponse<{
            reviews?: Review[];
            /** The total number of reviews */
            count?: number;
            /** The number of reviews skipped */
            offset?: number;
            /** The number of reviews per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a review by id.
         *
         * @tags Admin
         * @name AdminGetReviewById
         * @summary Get review by id
         * @request GET:/admin/reviews/{id}
         * @secure
         */
        adminGetReviewById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product/seller review with rating and comment */
            review?: Review;
        }, any>>;
        /**
         * @description Retrieves a list of sellers.
         *
         * @tags Admin
         * @name AdminListSellers
         * @summary List Sellers
         * @request GET:/admin/sellers
         * @secure
         */
        adminListSellers: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            sellers?: VendorSeller[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
    };
    auth: {
        /**
         * @description Set the cookie session ID of a customer. The customer must be previously authenticated with the `/auth/customer/{provider}` API route first, as the JWT token is required in the header of the request.
         *
         * @tags Store Auth
         * @name StorePostSession
         * @summary Set Authentication Session
         * @request POST:/auth/session
         */
        storePostSession: (params?: RequestParams) => Promise<HttpResponse<AuthStoreSessionResponse, string | Error>>;
        /**
         * @description Deletes the cookie session ID previously set for authentication.
         *
         * @tags Store Auth
         * @name StoreDeleteSession
         * @summary Delete Authentication Session
         * @request DELETE:/auth/session
         */
        storeDeleteSession: (params?: RequestParams) => Promise<HttpResponse<{
            /**
             * success
             * Whether the session was deleted successfully.
             */
            success: boolean;
        }, string | Error>>;
        /**
         * @description Refresh the authentication token of a customer. This is useful after authenticating a customer with a third-party service to ensure the token holds the new user's details, or when you don't want customers to re-login every day.
         *
         * @tags Store Auth
         * @name StorePostAdminAuthTokenRefresh
         * @summary Refresh Authentication Token
         * @request POST:/auth/token/refresh
         */
        storePostAdminAuthTokenRefresh: (params?: RequestParams) => Promise<HttpResponse<AuthResponse, string | Error>>;
        /**
         * @description Authenticate a user and receive the JWT token to be used in the header of subsequent requests. When used with a third-party provider, such as Google, the request returns a `location` property. You redirect to the specified URL in your frontend to continue authentication with the third-party service.
         *
         * @tags Admin Auth
         * @name AdminPostActorTypeAuthProvider
         * @summary Authenticate User
         * @request POST:/auth/user/{auth_provider}
         */
        adminPostActorTypeAuthProvider: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<AuthCallbackResponse | AuthResponse, string | Error>>;
        /**
         * @description This API route is used by your dashboard or frontend application when a third-party provider redirects to it after authentication. It validates the authentication with the third-party provider and, if successful, returns an authentication token. All query parameters received from the third-party provider, such as `code`, `state`, and `error`, must be passed as query parameters to this route. You can decode the JWT token using libraries like [react-jwt](https://www.npmjs.com/package/react-jwt) in the frontend. If the decoded data doesn't  have an `actor_id` property, then you must create a user, typically using the Accept Invite route passing the token in the request's Authorization header.
         *
         * @tags Admin Auth
         * @name AdminPostActorTypeAuthProviderCallback
         * @summary Validate Authentication Callback
         * @request POST:/auth/user/{auth_provider}/callback
         */
        adminPostActorTypeAuthProviderCallback: (authProvider: string, params?: RequestParams) => Promise<HttpResponse<AuthResponse, string | Error>>;
        /**
         * @description This API route retrieves a registration JWT token of a user that hasn't been registered yet. The token is used in the header of requests that create a user, such as the Accept Invite API route.
         *
         * @tags Admin Auth
         * @name AdminPostActorTypeAuthProviderRegister
         * @summary Retrieve Registration JWT Token
         * @request POST:/auth/user/{auth_provider}/register
         */
        adminPostActorTypeAuthProviderRegister: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<AuthResponse, string | Error>>;
        /**
         * @description Generate a reset password token for an admin user. This API route doesn't reset the admin's password or send them the reset instructions in a notification. Instead, This API route emits the `auth.password_reset` event, passing it the token as a payload. You can listen to that event in a subscriber as explained in [this guide](https://docs.medusajs.com/resources/commerce-modules/auth/reset-password), then send the user a notification. The notification is sent using a [Notification Module Provider](https://docs.medusajs.com/resources/architectural-modules/notification), and it should have the URL to reset the password in the Medusa Admin dashboard, such as `http://localhost:9000/app/reset-password?token=123`. Use the generated token to update the user's password using the [Reset Password API route](https://docs.medusajs.com/api/admin#auth_postactor_typeauth_providerupdate).
         *
         * @tags Admin Auth
         * @name AdminPostActorTypeAuthProviderResetPassword
         * @summary Generate Reset Password Token for Admin User
         * @request POST:/auth/user/{auth_provider}/reset-password
         */
        adminPostActorTypeAuthProviderResetPassword: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<void, string | Error>>;
        /**
         * @description Reset an admin user's password using a reset-password token generated with the [Generate Reset Password Token API route](https://docs.medusajs.com/api/admin#auth_postactor_typeauth_providerresetpassword). You pass the token as a bearer token in the request's Authorization header.
         *
         * @tags Admin Auth
         * @name AdminPostActorTypeAuthProviderUpdate
         * @summary Reset an Admin User's Password
         * @request POST:/auth/user/{auth_provider}/update
         * @secure
         */
        adminPostActorTypeAuthProviderUpdate: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * success
             * Whether the password was reset successfully.
             */
            success: boolean;
        }, string | Error>>;
        /**
         * @description Authenticate a customer and receive the JWT token to be used in the header of subsequent requests. When used with a third-party provider, such as Google, the request returns a `location` property. You redirect to the specified URL in your storefront to continue authentication with the third-party service.
         *
         * @tags Store Auth
         * @name StorePostActorTypeAuthProvider
         * @summary Authenticate Customer
         * @request POST:/auth/customer/{auth_provider}
         */
        storePostActorTypeAuthProvider: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<AuthCallbackResponse | AuthResponse, string | Error>>;
        /**
         * @description This API route is used by your storefront or frontend application when a third-party provider redirects to it after authentication. It validates the authentication with the third-party provider and, if successful, returns an authentication token. All query parameters received from the third-party provider, such as `code`, `state`, and `error`, must be passed as query parameters to this route. You can decode the JWT token using libraries like [react-jwt](https://www.npmjs.com/package/react-jwt) in the storefront. If the decoded data doesn't  have an `actor_id` property, then you must register the customer using the Create Customer API route passing the token in the request's Authorization header.
         *
         * @tags Store Auth
         * @name StorePostActorTypeAuthProviderCallback
         * @summary Validate Authentication Callback
         * @request POST:/auth/customer/{auth_provider}/callback
         */
        storePostActorTypeAuthProviderCallback: (authProvider: string, params?: RequestParams) => Promise<HttpResponse<AuthResponse, string | Error>>;
        /**
         * @description This API route retrieves a registration JWT token of a customer that hasn't been registered yet. The token is used in the header of requests that create a customer.
         *
         * @tags Store Auth
         * @name StorePostActorTypeAuthProviderRegister
         * @summary Retrieve Registration JWT Token
         * @request POST:/auth/customer/{auth_provider}/register
         */
        storePostActorTypeAuthProviderRegister: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<AuthResponse, string | Error>>;
        /**
         * @description Generate a reset password token for a customer. This API route doesn't reset the customer password or send them the reset instructions in a notification. Instead, This API route emits the `auth.password_reset` event, passing it the token as a payload. You can listen to that event in a subscriber as explained in [this guide](https://docs.medusajs.com/resources/commerce-modules/auth/reset-password), then send the customer a notification. The notification is sent using a [Notification Module Provider](https://docs.medusajs.com/resources/architectural-modules/notification), and it should have a URL that accepts a `token` query parameter, allowing the customer to reset their password from the storefront. Use the generated token to update the customer's password using the [Reset Password API route](https://docs.medusajs.com/api/store#auth_postactor_typeauth_providerupdate).
         *
         * @tags Store Auth
         * @name StorePostActorTypeAuthProviderResetPassword
         * @summary Generate Reset Password Token for Customer
         * @request POST:/auth/customer/{auth_provider}/reset-password
         */
        storePostActorTypeAuthProviderResetPassword: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<void, string | Error>>;
        /**
         * @description Reset a customer's password using a reset-password token generated with the [Generate Reset Password Token API route](https://docs.medusajs.com/api/store#auth_postactor_typeauth_providerresetpassword). You pass the token as a bearer token in the request's Authorization header.
         *
         * @tags Store Auth
         * @name StorePostActorTypeAuthProviderUpdate
         * @summary Reset a Customer's Password
         * @request POST:/auth/customer/{auth_provider}/update
         * @secure
         */
        storePostActorTypeAuthProviderUpdate: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * success
             * Whether the password was reset successfully.
             */
            success: boolean;
        }, string | Error>>;
        /**
         * @description Authenticate a seller and receive the JWT token to be used in the header of subsequent requests. When used with a third-party provider, such as Google, the request returns a `location` property. You redirect to the specified URL in your frontend to continue authentication with the third-party service.
         *
         * @tags Auth
         * @name PostSellerTypeAuthProvider
         * @summary Authenticate Seller
         * @request POST:/auth/seller/{auth_provider}
         */
        postSellerTypeAuthProvider: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<AuthCallbackResponse | AuthResponse, string | Error>>;
        /**
         * @description This API route retrieves a registration JWT token of a seller that hasn't been registered yet. The token is used in the header of requests that create a seller, such as the Accept Invite API route.
         *
         * @tags Auth
         * @name PostSellerTypeAuthProviderRegister
         * @summary Retrieve Registration JWT Token
         * @request POST:/auth/seller/{auth_provider}/register
         */
        postSellerTypeAuthProviderRegister: (authProvider: string, data: BaseCartAddress, params?: RequestParams) => Promise<HttpResponse<AuthResponse, string | Error>>;
    };
    store: {
        /**
         * @description Create a cart.
         *
         * @tags Store Carts
         * @name StorePostCarts
         * @summary Create Cart
         * @request POST:/store/carts
         */
        storePostCarts: (data: StoreCreateCart & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Retrieve a cart by its ID. You can expand the cart's relations or select the fields that should be returned.
         *
         * @tags Store Carts
         * @name StoreGetCartsId
         * @summary Get a Cart
         * @request GET:/store/carts/{id}
         */
        storeGetCartsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Update a cart's details. This unsets the payment methods chosen before, and the customer would have to choose them again. Also, if the customer has chosen a shipping method whose option isn't valid for the cart's shipping address anymore, the shipping method will be unset. For example, if the shipping option is valid only in the US geo zone, and the shipping address's country code is `DE`, the shipping method will be unset.
         *
         * @tags Store Carts
         * @name StorePostCartsId
         * @summary Update a Cart
         * @request POST:/store/carts/{id}
         */
        storePostCartsId: (id: string, data: UpdateCartData & {
            /** Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter. */
            additional_data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The cart's details. */
            cart: StoreCart;
        }, string | Error>>;
        /**
         * @description Complete a cart and place an order.
         *
         * @tags Store Carts
         * @name StorePostCartsIdComplete
         * @summary Complete Cart
         * @request POST:/store/carts/{id}/complete
         */
        storePostCartsIdComplete: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * type
             * The type of the returned object. In this case, the order is returned because the cart was completed successfully.
             * @default "order"
             */
            type: string;
            /** The order's details. */
            order: StoreOrder;
        } | {
            /**
             * type
             * The type of the returned object. In this case, the cart is returned because an error has occurred.
             * @default "cart"
             */
            type: string;
            /** The cart's details. */
            cart: StoreCart;
            /** The error's details. */
            error: {
                /**
                 * message
                 * The error's message.
                 */
                message: string;
                /**
                 * name
                 * The error's name.
                 */
                name: string;
                /**
                 * type
                 * The error's type. Can be a [MedusaError type](https://docs.medusajs.com/v2/advanced-development/api-routes/errors#medusaerror-types) or `payment_authorization_error` or `payment_requires_more_error` for payment-related errors.
                 */
                type: string;
            };
        }, string | Error>>;
        /**
         * @description Set the customer of the cart. This is useful when you create the cart for a guest customer, then they log in with their account.
         *
         * @tags Store Carts
         * @name StorePostCartsIdCustomer
         * @summary Set Cart's Customer
         * @request POST:/store/carts/{id}/customer
         */
        storePostCartsIdCustomer: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Add a product variant as a line item in the cart.
         *
         * @tags Store Carts
         * @name StorePostCartsIdLineItems
         * @summary Add Line Item to Cart
         * @request POST:/store/carts/{id}/line-items
         */
        storePostCartsIdLineItems: (id: string, data: StoreAddCartLineItem, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Update a line item's details in the cart.
         *
         * @tags Store Carts
         * @name StorePostCartsIdLineItemsLineId
         * @summary Update a Line Item in a Cart
         * @request POST:/store/carts/{id}/line-items/{line_id}
         */
        storePostCartsIdLineItemsLineId: (id: string, lineId: string, data: StoreUpdateCartLineItem, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Remove a line item from a cart.
         *
         * @tags Store Carts
         * @name StoreDeleteCartsIdLineItemsLineId
         * @summary Remove Line Item from Cart
         * @request DELETE:/store/carts/{id}/line-items/{line_id}
         */
        storeDeleteCartsIdLineItemsLineId: (id: string, lineId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The ID of the deleted line item.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "line-item"
             */
            object: string;
            /**
             * deleted
             * Whether the item was deleted.
             */
            deleted: boolean;
        } & {
            /** The cart that the item belonged to. */
            parent?: StoreCart;
        }, string | Error>>;
        /**
         * @description Add a list of promotions to a cart.
         *
         * @tags Store Carts
         * @name StorePostCartsIdPromotions
         * @summary Add Promotions to Cart
         * @request POST:/store/carts/{id}/promotions
         */
        storePostCartsIdPromotions: (id: string, data: StoreCartAddPromotion, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Remove a list of promotions from a cart.
         *
         * @tags Store Carts
         * @name StoreDeleteCartsIdPromotions
         * @summary Remove Promotions from Cart
         * @request DELETE:/store/carts/{id}/promotions
         */
        storeDeleteCartsIdPromotions: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The cart's details. */
            cart: StoreCart;
        }, string | Error>>;
        /**
         * @description Add a shipping method to a cart. Use this API route when the customer chooses their preferred shipping option.
         *
         * @tags Store Carts
         * @name StorePostCartsIdShippingMethods
         * @summary Add Shipping Method to Cart
         * @request POST:/store/carts/{id}/shipping-methods
         */
        storePostCartsIdShippingMethods: (id: string, data: {
            /**
             * option_id
             * The ID of the shipping option this method is created from.
             */
            option_id: string;
            /** Any additional data relevant for the third-party fulfillment provider to process the shipment. */
            data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Calculate the cart's tax lines and amounts.
         *
         * @tags Store Carts
         * @name StorePostCartsIdTaxes
         * @summary Calculate Cart Taxes
         * @request POST:/store/carts/{id}/taxes
         */
        storePostCartsIdTaxes: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCartResponse, string | Error>>;
        /**
         * @description Retrieve a list of collections. The collections can be filtered by fields such as `handle`. The collections can also be sorted or paginated.
         *
         * @tags Store Collections
         * @name StoreGetCollections
         * @summary List Collections
         * @request GET:/store/collections
         */
        storeGetCollections: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by a collection's title. */
            title?: string | string[];
            /** Filter by the collection's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the collection's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by a collection's handle. */
            handle?: string | string[];
            /**
             * q
             * Search term to filter the collection's searchable properties.
             */
            q?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The collection's collections. */
            collections: StoreCollection[];
        }, string | Error>>;
        /**
         * @description Retrieve a collection by its ID. You can expand the collection's relations or select the fields that should be returned.
         *
         * @tags Store Collections
         * @name StoreGetCollectionsId
         * @summary Get a Collection
         * @request GET:/store/collections/{id}
         */
        storeGetCollectionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCollectionResponse, string | Error>>;
        /**
         * @description Retrieve a list of currencies. The currencies can be filtered by fields such as `code`. The currencies can also be sorted or paginated.
         *
         * @tags Store Currencies
         * @name StoreGetCurrencies
         * @summary List Currencies
         * @request GET:/store/currencies
         */
        storeGetCurrencies: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the currency's searchable properties.
             */
            q?: string;
            /** Filter by a currency code. */
            code?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<StoreCurrencyListResponse, string | Error>>;
        /**
         * @description Retrieve a currency by its code. You can expand the currency's relations or select the fields that should be returned.
         *
         * @tags Store Currencies
         * @name StoreGetCurrenciesCode
         * @summary Get a Currency
         * @request GET:/store/currencies/{code}
         */
        storeGetCurrenciesCode: (code: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCurrencyResponse, string | Error>>;
        /**
         * @description Register a customer. Use the `/auth/customer/emailpass/register` API route first to retrieve the registration token and pass it in the header of the request.
         *
         * @tags Store Customers
         * @name StorePostCustomers
         * @summary Register Customer
         * @request POST:/store/customers
         * @secure
         */
        storePostCustomers: (data: StoreCreateCustomer, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerResponse, string | Error>>;
        /**
         * @description Retrieve the logged-in customer. You can expand the customer's relations or select the fields that should be returned.
         *
         * @tags Store Customers
         * @name StoreGetCustomersMe
         * @summary Get Logged-in Customer
         * @request GET:/store/customers/me
         * @secure
         */
        storeGetCustomersMe: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerResponse, string | Error>>;
        /**
         * @description Update the logged-in customer's details.
         *
         * @tags Store Customers
         * @name StorePostCustomersMe
         * @summary Update Customer
         * @request POST:/store/customers/me
         * @secure
         */
        storePostCustomersMe: (data: StoreUpdateCustomer, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerResponse, string | Error>>;
        /**
         * @description Retrieve the addresses of the logged-in customer. The addresses can be filtered by fields such as `country_code`. The addresses can also be sorted or paginated.
         *
         * @tags Store Customers
         * @name StoreGetCustomersMeAddresses
         * @summary List Customer's Addresses
         * @request GET:/store/customers/me/addresses
         * @secure
         */
        storeGetCustomersMeAddresses: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by the address's city. */
            city?: string | string[];
            /** Filter by the address's postal code. */
            postal_code?: string | string[];
            /** Filter by the address's country code. */
            country_code?: string | string[];
            /**
             * q
             * Search term to filter the address's searchable properties.
             */
            q?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerAddressListResponse, string | Error>>;
        /**
         * @description Create an address for the logged-in customer.
         *
         * @tags Store Customers
         * @name StorePostCustomersMeAddresses
         * @summary Create Address for Logged-In Customer
         * @request POST:/store/customers/me/addresses
         * @secure
         */
        storePostCustomersMeAddresses: (data: {
            /**
             * first_name
             * The customer's first name.
             */
            first_name?: string;
            /**
             * last_name
             * The customer's last name.
             */
            last_name?: string;
            /**
             * phone
             * The customer's phone.
             */
            phone?: string;
            /**
             * company
             * The address's company.
             */
            company?: string;
            /**
             * address_1
             * The address's first line.
             */
            address_1?: string;
            /**
             * address_2
             * The address's second line.
             */
            address_2?: string;
            /**
             * city
             * The address's city.
             */
            city?: string;
            /**
             * country_code
             * The address's country code.
             */
            country_code?: string;
            /**
             * province
             * The address's province.
             */
            province?: string;
            /**
             * postal_code
             * The address's postal code.
             */
            postal_code?: string;
            /**
             * address_name
             * The address's name.
             */
            address_name?: string;
            /**
             * is_default_shipping
             * Whether the address is used by default for shipping during checkout.
             */
            is_default_shipping?: boolean;
            /**
             * is_default_billing
             * Whether the address is used by default for billing during checkout.
             */
            is_default_billing?: boolean;
            /** Holds custom key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerResponse, string | Error>>;
        /**
         * @description Retrieve an address of the logged-in customer. You can expand the address's relations or select the fields that should be returned.
         *
         * @tags Store Customers
         * @name StoreGetCustomersMeAddressesAddressId
         * @summary Get Customer's Address
         * @request GET:/store/customers/me/addresses/{address_id}
         * @secure
         */
        storeGetCustomersMeAddressesAddressId: (addressId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerAddressResponse, string | Error>>;
        /**
         * @description Update the logged-in customer's address.
         *
         * @tags Store Customers
         * @name StorePostCustomersMeAddressesAddressId
         * @summary Update Customer's Address
         * @request POST:/store/customers/me/addresses/{address_id}
         * @secure
         */
        storePostCustomersMeAddressesAddressId: (addressId: string, data: {
            /**
             * first_name
             * The customer's first name.
             */
            first_name?: string;
            /**
             * last_name
             * The customer's last name.
             */
            last_name?: string;
            /**
             * phone
             * The customer's phone.
             */
            phone?: string;
            /**
             * company
             * The address's company.
             */
            company?: string;
            /**
             * address_1
             * The address's first line.
             */
            address_1?: string;
            /**
             * address_2
             * The address's second line.
             */
            address_2?: string;
            /**
             * city
             * The address's city.
             */
            city?: string;
            /**
             * country_code
             * The address's country code.
             */
            country_code?: string;
            /**
             * province
             * The address's province.
             */
            province?: string;
            /**
             * postal_code
             * The address's postal code.
             */
            postal_code?: string;
            /**
             * address_name
             * The address's name.
             */
            address_name?: string;
            /**
             * is_default_shipping
             * Whether the address is used by default for shipping during checkout.
             */
            is_default_shipping?: boolean;
            /**
             * is_default_billing
             * Whether the address is used by default for billing during checkout.
             */
            is_default_billing?: boolean;
            /** Holds custom key-value pairs. */
            metadata?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreCustomerResponse, string | Error>>;
        /**
         * @description Remove an address of the logged-in customer.
         *
         * @tags Store Customers
         * @name StoreDeleteCustomersMeAddressesAddressId
         * @summary Remove Customer's Address
         * @request DELETE:/store/customers/me/addresses/{address_id}
         * @secure
         */
        storeDeleteCustomersMeAddressesAddressId: (addressId: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * id
             * The address's ID.
             */
            id: string;
            /**
             * object
             * The name of the deleted object.
             * @default "address"
             */
            object: string;
            /**
             * deleted
             * Whether the address was deleted.
             */
            deleted: boolean;
        } & {
            /** The details of the customer the address belongs to. */
            parent?: StoreCustomer;
        }, string | Error>>;
        /**
         * @description Retrieve the orders of the logged-in customer. The orders can be filtered by fields such as `id`. The orders can also be sorted or paginated.
         *
         * @tags Store Orders
         * @name StoreGetOrders
         * @summary List Logged-in Customer's Orders
         * @request GET:/store/orders
         * @secure
         */
        storeGetOrders: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /** Filter by an order ID. */
            id?: string | string[];
            /**
             * $and
             * The order's $and.
             */
            $and?: object[];
            /**
             * $or
             * The order's $or.
             */
            $or?: object[];
            /** The order's status. */
            status?: string | ("canceled" | "requires_action" | "pending" | "completed" | "draft" | "archived")[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The order's orders. */
            orders: StoreOrder[];
        }, string | Error>>;
        /**
         * @description Retrieve an order by its ID. You can expand the order's relations or select the fields that should be returned.
         *
         * @tags Store Orders
         * @name StoreGetOrdersId
         * @summary Get an Order
         * @request GET:/store/orders/{id}
         */
        storeGetOrdersId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreOrderResponse, string | Error>>;
        /**
         * @description Accept an order to be transfered to a customer's account, which was specified when the transfer request was created. The transfer is requested previously either by the customer using the [Request Order Transfer Store API route](https://docs.medusajs.com/api/store#orders_postordersidtransferrequest), or by the admin using the [Request Order Transfer Admin API route](https://docs.medusajs.com/api/admin#orders_postordersidtransferrequest).
         *
         * @tags Store Orders
         * @name StorePostOrdersIdTransferAccept
         * @summary Accept Order Transfer
         * @request POST:/store/orders/{id}/transfer/accept
         */
        storePostOrdersIdTransferAccept: (id: string, data: StoreAcceptOrderTransfer, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreOrderResponse, string | Error>>;
        /**
         * @description Cancel an order transfer that the logged-in customer previously requested using the [Request Order Transfer](https://docs.medusajs.com/api/store#orders_postordersidtransferrequest) API route.
         *
         * @tags Store Orders
         * @name StorePostOrdersIdTransferCancel
         * @summary Cancel Order Transfer
         * @request POST:/store/orders/{id}/transfer/cancel
         * @secure
         */
        storePostOrdersIdTransferCancel: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreOrderResponse, string | Error>>;
        /**
         * @description Decline an order transfer previously requested, typically by the admin user using the [Request Order Transfer Admin API route](https://docs.medusajs.com/api/admin#orders_postordersidtransferrequest).
         *
         * @tags Store Orders
         * @name StorePostOrdersIdTransferDecline
         * @summary Decline Order Transfer
         * @request POST:/store/orders/{id}/transfer/decline
         */
        storePostOrdersIdTransferDecline: (id: string, data: StoreDeclineOrderTransferRequest, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreOrderResponse, string | Error>>;
        /**
         * @description Request an order to be transfered to the logged-in customer's account. The transfer is confirmed using the [Accept Order Transfer](https://docs.medusajs.com/api/store#orders_postordersidtransferaccept) API route.
         *
         * @tags Store Orders
         * @name StorePostOrdersIdTransferRequest
         * @summary Request Order Transfer
         * @request POST:/store/orders/{id}/transfer/request
         * @secure
         */
        storePostOrdersIdTransferRequest: (id: string, data: StoreRequestOrderTransfer, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreOrderResponse, string | Error>>;
        /**
         * @description Create a payment collection for a cart. This is used during checkout, where the payment collection holds the cart's payment sessions.
         *
         * @tags Store Payment Collections
         * @name StorePostPaymentCollections
         * @summary Create Payment Collection
         * @request POST:/store/payment-collections
         */
        storePostPaymentCollections: (data: StoreCreatePaymentCollection, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StorePaymentCollectionResponse, string | Error>>;
        /**
         * @description Initialize and add a payment session to a payment collection. This is used during checkout, where you create a payment collection for the cart, then initialize a payment session for the payment provider that the customer chooses.
         *
         * @tags Store Payment Collections
         * @name StorePostPaymentCollectionsIdPaymentSessions
         * @summary Initialize Payment Session of a Payment Collection
         * @request POST:/store/payment-collections/{id}/payment-sessions
         */
        storePostPaymentCollectionsIdPaymentSessions: (id: string, data: StoreInitializePaymentSession, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StorePaymentCollectionResponse, string | Error>>;
        /**
         * @description Retrieve a list of payment providers. You must provide the `region_id` query parameter to retrieve the payment providers enabled in that region.
         *
         * @tags Store Payment Providers
         * @name StoreGetPaymentProviders
         * @summary List Payment Providers
         * @request GET:/store/payment-providers
         */
        storeGetPaymentProviders: (query: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * region_id
             * Filter by a region ID.
             */
            region_id: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of payment providers. */
            payment_providers: StorePaymentProvider[];
        }, string | Error>>;
        /**
         * @description Retrieve a list of product categories. The product categories can be filtered by fields such as `id`. The product categories can also be sorted or paginated.
         *
         * @tags Store Product Categories
         * @name StoreGetProductCategories
         * @summary List Product Categories
         * @request GET:/store/product-categories
         */
        storeGetProductCategories: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the product category's properties.
             */
            q?: string;
            /** Filter by a product category's ID. */
            id?: string | string[];
            /** Filter by a description. This only matches categories with the exact description. To search by a term or keyword, use the `q` query parameter instead. */
            description?: string | string[];
            /** Filter by a category's handle. */
            handle?: string | string[];
            /** The ID of a category to retrieve its child categories. */
            parent_category_id?: string | string[];
            /**
             * include_ancestors_tree
             * Whether to retrieve the category's parent. If you enable this, add to the `fields` query parameter `parent_category` to set the parent of a category in this field. You can either pass `*parent_category` to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, `fields=parent_category.id,parent_category.name`.
             */
            include_ancestors_tree?: boolean;
            /**
             * include_descendants_tree
             * Whether to retrieve a list of child categories. If you enable this, add to the `fields` query parameter `category_children` to set the child of a category in this field. You can either pass `*category_children` to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, `fields=category_children.id,category_children.name`.
             */
            include_descendants_tree?: boolean;
            /** Filter by the category's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the category's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * The product category's $or.
             */
            $or?: object[];
            /** Filter by a product category name. */
            name?: string | string[];
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductCategoryListResponse, string | Error>>;
        /**
         * @description Retrieve a product category by its ID. You can expand the product category's relations or select the fields that should be returned.
         *
         * @tags Store Product Categories
         * @name StoreGetProductCategoriesId
         * @summary Get a Product Category
         * @request GET:/store/product-categories/{id}
         */
        storeGetProductCategoriesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * include_ancestors_tree
             * Whether to retrieve the category's parent. If you enable this, add to the `fields` query parameter `parent_category` to set the parent of a category in this field. You can either pass `*parent_category` to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, `fields=parent_category.id,parent_category.name`.
             */
            include_ancestors_tree?: boolean;
            /**
             * include_descendants_tree
             * Whether to retrieve a list of child categories. If you enable this, add to the `fields` query parameter `category_children` to set the children of a category in this field. You can either pass `*category_children` to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, `fields=category_children.id,category_children.name`.
             */
            include_descendants_tree?: boolean;
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductCategoryResponse, string | Error>>;
        /**
         * @description Retrieve a list of product tags. The product tags can be filtered by fields such as `id`. The product tags can also be sorted or paginated.
         *
         * @tags Store Product Tags
         * @name StoreGetProductTags
         * @summary List Product Tags
         * @request GET:/store/product-tags
         */
        storeGetProductTags: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /**
             * q
             * Query to search product tag's searchable fields.
             */
            q?: string;
            /** Filter by a product tag's ID. */
            id?: string | string[];
            /** Filter by a product tag's value. */
            value?: string | string[];
            /** Filter by the tag's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the tag's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductTagListResponse, string | Error>>;
        /**
         * @description Retrieve a product tag by its ID. You can expand the product tag's relations or select the fields that should be returned.
         *
         * @tags Store Product Tags
         * @name StoreGetProductTagsId
         * @summary Get a Product Tag
         * @request GET:/store/product-tags/{id}
         */
        storeGetProductTagsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductTagResponse, string | Error>>;
        /**
         * @description Retrieve a list of product types. The product types can be filtered by fields such as `id`. The product types can also be sorted or paginated.
         *
         * @tags Store Product Types
         * @name StoreGetProductTypes
         * @summary List Product Types
         * @request GET:/store/product-types
         */
        storeGetProductTypes: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /**
             * q
             * Query to search the product type's searchable fields.
             */
            q?: string;
            /** Filter by a product type's ID. */
            id?: string | string[];
            /** Filter by a product type's value. */
            value?: string | string[];
            /** Filter by the type's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the type's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductTypeListResponse, string | Error>>;
        /**
         * @description Retrieve a product type by its ID. You can expand the product type's relations or select the fields that should be returned.
         *
         * @tags Store Product Types
         * @name StoreGetProductTypesId
         * @summary Get a Product Type
         * @request GET:/store/product-types/{id}
         */
        storeGetProductTypesId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductTypeResponse, string | Error>>;
        /**
         * @description Retrieve a list of products. The products can be filtered by fields such as `id`. The products can also be sorted or paginated.
         *
         * @tags Store Products
         * @name StoreGetProducts
         * @summary List Products
         * @request GET:/store/products
         */
        storeGetProducts: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /**
             * q
             * Search term to filter the product's searchable properties.
             */
            q?: string;
            /** Filter by a product ID. */
            id?: string | string[];
            /** Filter by product titles. */
            title?: string | string[];
            /** Filter by product handles. */
            handle?: string | string[];
            /**
             * is_giftcard
             * Whether the product is a gift card.
             */
            is_giftcard?: boolean;
            /** Filter by a collection's ID to retrieve the products in it. */
            collection_id?: string[];
            /** Filter by a tag's ID to retrieve the products in it. */
            tag_id?: string | string[];
            /** Filter by a type's ID to retrieve the products in it. */
            type_id?: string | string[];
            /** Filter by the product's creation date. */
            created_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /** Filter by the product's update date. */
            updated_at?: {
                /**
                 * $and
                 * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                 */
                $and?: object[];
                /**
                 * $or
                 * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                 */
                $or?: object[];
                /** Filter by an exact match. */
                $eq?: string | string[];
                /**
                 * $ne
                 * Filter by values not equal to this parameter.
                 */
                $ne?: string;
                /** Filter by values in this array. */
                $in?: string[];
                /** Filter by values not in this array. */
                $nin?: string[];
                /** Filter by values not matching this parameter. */
                $not?: string | {
                    /**
                     * $and
                     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
                     */
                    $and?: object[];
                    /**
                     * $or
                     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
                     */
                    $or?: object[];
                    /** Filter by an exact match. */
                    $eq?: string | string[];
                    /**
                     * $ne
                     * Filter by values not matching this parameter.
                     */
                    $ne?: string;
                    /** Filter by values in this array. */
                    $in?: string[];
                    /** Filter by values not in this array. */
                    $nin?: string[];
                    /** Filter by values not matching this parameter */
                    $not?: string | object | string[];
                    /**
                     * $gt
                     * Filter by values greater than this parameter. Useful for numbers and dates only.
                     */
                    $gt?: string;
                    /**
                     * $gte
                     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $gte?: string;
                    /**
                     * $lt
                     * Filter by values less than this parameter. Useful for numbers and dates only.
                     */
                    $lt?: string;
                    /**
                     * $lte
                     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                     */
                    $lte?: string;
                    /**
                     * $like
                     * Apply a `like` filter. Useful for strings only.
                     */
                    $like?: string;
                    /**
                     * $re
                     * Apply a regex filter. Useful for strings only.
                     */
                    $re?: string;
                    /**
                     * $ilike
                     * Apply a case-insensitive `like` filter. Useful for strings only.
                     */
                    $ilike?: string;
                    /**
                     * $fulltext
                     * Filter to apply on full-text properties.
                     */
                    $fulltext?: string;
                    /** Filter arrays that have overlapping values with this parameter. */
                    $overlap?: string[];
                    /** Filter arrays that contain some of the values of this parameter. */
                    $contains?: string[];
                    /** Filter arrays that contain all values of this parameter. */
                    $contained?: string[];
                    /**
                     * $exists
                     * Filter by whether a value for this parameter exists (not `null`).
                     */
                    $exists?: boolean;
                } | string[];
                /**
                 * $gt
                 * Filter by values greater than this parameter. Useful for numbers and dates only.
                 */
                $gt?: string;
                /**
                 * $gte
                 * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
                 */
                $gte?: string;
                /**
                 * $lt
                 * Filter by values less than this parameter. Useful for numbers and dates only.
                 */
                $lt?: string;
                /**
                 * $lte
                 * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
                 */
                $lte?: string;
                /**
                 * $like
                 * Apply a `like` filter. Useful for strings only.
                 */
                $like?: string;
                /**
                 * $re
                 * Apply a regex filter. Useful for strings only.
                 */
                $re?: string;
                /**
                 * $ilike
                 * Apply a case-insensitive `like` filter. Useful for strings only.
                 */
                $ilike?: string;
                /**
                 * $fulltext
                 * Filter to apply on full-text properties.
                 */
                $fulltext?: string;
                /** Filter arrays that have overlapping values with this parameter. */
                $overlap?: string[];
                /** Filter arrays that contain some of the values of this parameter. */
                $contains?: string[];
                /** Filter arrays that contain all values of this parameter. */
                $contained?: string[];
                /**
                 * $exists
                 * Filter by whether a value for this parameter exists (not `null`).
                 */
                $exists?: boolean;
            };
            /**
             * region_id
             * The ID of the region the products are being viewed from. This is required if you're retrieving product variant prices with taxes.
             */
            region_id?: string;
            /**
             * province
             * The province the products are being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
             */
            province?: string;
            /** The ID of a sales channel to retrieve products in it. */
            sales_channel_id?: string | string[];
            /** The ID of a product category to retrieve products in it. */
            category_id?: string | string[];
            /** Filter the products' variants. */
            variants?: {
                /** Filter by the variants' options. */
                options?: {
                    /**
                     * option_id
                     * The ID of the option to filter by.
                     */
                    option_id: string;
                    /**
                     * value
                     * Filter by a value of the option.
                     */
                    value: string;
                };
            };
            /**
             * country_code
             * The product's country code.
             */
            country_code?: string;
            /**
             * cart_id
             * The product's cart id.
             */
            cart_id?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of products. */
            products: object[];
        }, string | Error>>;
        /**
         * @description Retrieve a product by its ID. You can expand the product's relations or select the fields that should be returned.
         *
         * @tags Store Products
         * @name StoreGetProductsId
         * @summary Get a Product
         * @request GET:/store/products/{id}
         */
        storeGetProductsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * region_id
             * The ID of the region the product is being viewed from. This is required if you're retrieving product variant prices with taxes.
             */
            region_id?: string;
            /**
             * country_code
             * The country code the product is being viewed from. This is required if you're retrieving product variant prices with taxes.
             */
            country_code?: string;
            /**
             * province
             * The province the product is being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
             */
            province?: string;
            /**
             * cart_id
             * The ID of the customer's cart. If set, the cart's region and shipping address's country code and province are used instead of the `region_id`, `country_code`, and `province` properties.
             */
            cart_id?: string;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreProductResponse, string | Error>>;
        /**
         * @description Retrieve a list of regions. The regions can be filtered by fields such as `id`. The regions can also be sorted or paginated.
         *
         * @tags Store Regions
         * @name StoreGetRegions
         * @summary List Regions
         * @request GET:/store/regions
         */
        storeGetRegions: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * q
             * Search term to filter the region's searchable properties.
             */
            q?: string;
            /** Filter by a region's ID. */
            id?: string | string[];
            /** Filter by a region name. */
            name?: string | string[];
            /** Filter by a currency code to retrieve regions that use that code. */
            currency_code?: string | string[];
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of regions. */
            regions: StoreRegion[];
        }, string | Error>>;
        /**
         * @description Retrieve a region by its ID. You can expand the region's relations or select the fields that should be returned.
         *
         * @tags Store Regions
         * @name StoreGetRegionsId
         * @summary Get a Region
         * @request GET:/store/regions/{id}
         */
        storeGetRegionsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The region's details. */
            region: StoreRegion;
        }, string | Error>>;
        /**
         * @description Create a return for an order's items. The admin receives the return and process it from their side.
         *
         * @tags Store Return
         * @name StorePostReturn
         * @summary Create Return
         * @request POST:/store/return
         */
        storePostReturn: (data: StoreCreateReturn, params?: RequestParams) => Promise<HttpResponse<StoreReturnResponse, string | Error>>;
        /**
         * @description Retrieve a list of return reasons. The return reasons can be sorted or paginated.
         *
         * @tags Store Return Reasons
         * @name StoreGetReturnReasons
         * @summary List Return Reasons
         * @request GET:/store/return-reasons
         */
        storeGetReturnReasons: (query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /**
             * limit
             * The maximum number of items returned.
             */
            limit: number;
            /**
             * offset
             * The number of items skipped before retrieving the returned items.
             */
            offset: number;
            /**
             * count
             * The total number of items.
             */
            count: number;
        } & {
            /** The list of return reasons. */
            return_reasons: StoreReturnReason[];
        }, string | Error>>;
        /**
         * @description Retrieve a return reason by its ID. You can expand the return reason's relations or select the fields that should be returned.
         *
         * @tags Store Return Reasons
         * @name StoreGetReturnReasonsId
         * @summary Get a Return Reason
         * @request GET:/store/return-reasons/{id}
         */
        storeGetReturnReasonsId: (id: string, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreReturnReasonResponse, string | Error>>;
        /**
         * @description Retrieve a list of shipping options for a cart. The cart's ID is set in the required `cart_id` query parameter. The shipping options also be sorted or paginated.
         *
         * @tags Store Shipping Options
         * @name StoreGetShippingOptions
         * @summary List Shipping Options for Cart
         * @request GET:/store/shipping-options
         */
        storeGetShippingOptions: (query: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
             */
            fields?: string;
            /**
             * offset
             * The number of items to skip when retrieving a list.
             */
            offset?: number;
            /**
             * limit
             * Limit the number of items returned in the list.
             */
            limit?: number;
            /**
             * order
             * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
             */
            order?: string;
            /**
             * cart_id
             * The ID of the cart to retrieve its shipping options.
             */
            cart_id: string;
            /**
             * $and
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: object[];
            /**
             * $or
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: object[];
            /**
             * is_return
             * Whether the shipping option can be used for returns.
             */
            is_return?: boolean;
        }, params?: RequestParams) => Promise<HttpResponse<StoreShippingOptionListResponse, string | Error>>;
        /**
         * @description Calculate the price of a shipping option in a cart.
         *
         * @tags Store Shipping Options
         * @name StorePostShippingOptionsIdCalculate
         * @summary Calculate Shipping Option Price
         * @request POST:/store/shipping-options/{id}/calculate
         */
        storePostShippingOptionsIdCalculate: (id: string, data: {
            /**
             * cart_id
             * The ID of the cart the shipping option is used in.
             */
            cart_id: string;
            /** Custom data that's useful for the fulfillment provider to calculate the price. */
            data?: object;
        }, query?: {
            /**
             * fields
             * Comma-separated fields that should be included in the returned data. If a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. Without prefix it will replace the entire default fields.
             */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<StoreShippingOptionResponse, string | Error>>;
        /**
         * @description Retrieves requests list
         *
         * @tags OrderReturnRequest
         * @name StoreListOrderReturnRequests
         * @summary List return requests
         * @request GET:/store/return-request
         * @secure
         */
        storeListOrderReturnRequests: (query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            order_return_request?: OrderReturnRequest[];
            /** The total number of requests */
            count?: number;
            /** The number of requests skipped */
            offset?: number;
            /** The number of requests per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a new order return request for the authenticated customer.
         *
         * @tags OrderReturnRequest
         * @name StoreCreateOrderReturnRequest
         * @summary Create an order return request
         * @request POST:/store/return-request
         * @secure
         */
        storeCreateOrderReturnRequest: (data: StoreCreateOrderReturnRequest, params?: RequestParams) => Promise<HttpResponse<{
            /** A return request object with its properties */
            invite?: OrderReturnRequest;
        }, any>>;
        /**
         * @description Retrieves a request by id for the authenticated customer.
         *
         * @tags OrderReturnRequest
         * @name StoreGetOrderReturnRequestById
         * @summary Get return request by id
         * @request GET:/store/return-request/{id}
         * @secure
         */
        storeGetOrderReturnRequestById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A return request object with its properties */
            orderReturnRequest?: OrderReturnRequest;
        }, any>>;
        /**
         * @description Retrieves the reviews created by the authenticated user.
         *
         * @tags Review
         * @name StoreGetMyReviews
         * @summary Get reviews of the current user
         * @request GET:/store/reviews
         * @secure
         */
        storeGetMyReviews: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            products?: Review[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates new review with rating and comment
         *
         * @tags Review
         * @name StoreCreateNewReview
         * @summary Create new review
         * @request POST:/store/reviews
         * @secure
         */
        storeCreateNewReview: (data: StoreCreateReview, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product/seller review with rating and comment */
            product?: Review;
        }, any>>;
        /**
         * @description Retrieves a review of specified id
         *
         * @tags Review
         * @name StoreGetReviewById
         * @summary Get Review
         * @request GET:/store/reviews/{id}
         * @secure
         */
        storeGetReviewById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product/seller review with rating and comment */
            product?: Review;
        }, any>>;
        /**
         * @description Updates customer_note and rating for the review of specified id
         *
         * @tags Review
         * @name StoreUpdateReviewById
         * @summary Update a Review
         * @request POST:/store/reviews/{id}
         * @secure
         */
        storeUpdateReviewById: (id: string, data: StoreUpdateReview, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product/seller review with rating and comment */
            product?: Review;
        }, any>>;
        /**
         * @description Deletes a review by id.
         *
         * @tags Review
         * @name StoreDeleteReviewById
         * @summary Delete a Review
         * @request DELETE:/store/reviews/{id}
         * @secure
         */
        storeDeleteReviewById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Review */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
    };
    vendor: {
        /**
         * @description Retrieves a list of campaigns for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorListCampaigns
         * @summary List Campaigns
         * @request GET:/vendor/campaigns
         * @secure
         */
        vendorListCampaigns: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            campaigns?: VendorCampaign[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a new campaign for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorCreateCampaign
         * @summary Create campaign
         * @request POST:/vendor/campaigns
         * @secure
         */
        vendorCreateCampaign: (data: VendorCreateCampaign, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The campaign's details. */
            campaign?: VendorCampaign;
        }, any>>;
        /**
         * @description Retrieves campaign by id for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorGetCampaignById
         * @summary Get campaign
         * @request GET:/vendor/campaigns/{id}
         * @secure
         */
        vendorGetCampaignById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The campaign's details. */
            campaign?: VendorCampaign;
        }, any>>;
        /**
         * @description Updates campaign by id for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorUpdateCampaignById
         * @summary Update campaign
         * @request POST:/vendor/campaigns/{id}
         * @secure
         */
        vendorUpdateCampaignById: (id: string, data: VendorUpdateCampaign, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The campaign's details. */
            campaign?: VendorCampaign;
        }, any>>;
        /**
         * @description Deletes campaign by id for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorDeleteCampaignById
         * @summary Delete campaign
         * @request DELETE:/vendor/campaigns/{id}
         * @secure
         */
        vendorDeleteCampaignById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted campaign. */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves a list of customer groups.
         *
         * @tags Seller
         * @name VendorListCustomerGroups
         * @summary List Customer Groups
         * @request GET:/vendor/customer-groups
         * @secure
         */
        vendorListCustomerGroups: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            customer_groups?: VendorCustomerGroup[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a list of customers who placed an order in sellers store.
         *
         * @tags Seller
         * @name VendorListSellerCustomers
         * @summary List Customers
         * @request GET:/vendor/customers
         * @secure
         */
        vendorListSellerCustomers: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            customers?: VendorCustomer[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves the details of specified customer.
         *
         * @tags Seller
         * @name VendorGetCustomer
         * @summary Get Customer details
         * @request GET:/vendor/customers/{id}
         * @secure
         */
        vendorGetCustomer: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** Customer who placed an order in sellers store. */
            customer?: VendorCustomer;
        }, any>>;
        /**
         * @description Retrieves a list of orders for the specified customer.
         *
         * @tags Order
         * @name VendorListOrdersByCustomerId
         * @summary List Orders by customer id
         * @request GET:/vendor/customers/{id}/orders
         * @secure
         */
        vendorListOrdersByCustomerId: (id: string, query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            orders?: VendorCustomerOrderOverview[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a list of Fulfillment Providers.
         *
         * @tags Stock Location
         * @name VendorListFulfillmentProviders
         * @summary List Fulfillment Providers
         * @request GET:/vendor/fulfillment-providers
         * @secure
         */
        vendorListFulfillmentProviders: (query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
        }, params?: RequestParams) => Promise<HttpResponse<{
            fulfillment_providers?: VendorFulfillmentSet[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Deletes a Fulfillment Set.
         *
         * @tags Fulfillment Set
         * @name VendorDeleteFulfillmentSet
         * @summary Delete a Fulfillment Set
         * @request DELETE:/vendor/fulfillment-sets/{id}
         * @secure
         */
        vendorDeleteFulfillmentSet: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Fulfillment Set. */
            id?: string;
            /**
             * The type of the object that was deleted.
             * @default "fulfillment_set"
             */
            object?: string;
            /**
             * Whether or not the items were deleted.
             * @default true
             */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Creates a Service Zone.
         *
         * @tags Fulfillment Set
         * @name VendorCreateServiceZone
         * @summary Create a Service Zone
         * @request POST:/vendor/fulfillment-sets/{id}/service-zones
         * @secure
         */
        vendorCreateServiceZone: (id: string, data: VendorCreateServiceZone, params?: RequestParams) => Promise<HttpResponse<{
            /** The service zone's fulfillment set. */
            fulfillment_set?: VendorFulfillmentSet;
        }, any>>;
        /**
         * @description Updates a Service Zone.
         *
         * @tags Fulfillment Set
         * @name VendorUpdateServiceZoneById
         * @summary Update a Service Zone
         * @request POST:/vendor/fulfillment-sets/{id}/service-zones/{zone_id}
         * @secure
         */
        vendorUpdateServiceZoneById: (id: string, zoneId: string, data: VendorUpdateServiceZone, params?: RequestParams) => Promise<HttpResponse<{
            /** The service zone's fulfillment set. */
            fulfillment_set?: VendorFulfillmentSet;
        }, any>>;
        /**
         * @description Deletes a Service Zone.
         *
         * @tags Service Zone
         * @name VendorDeleteServiceZoneById
         * @summary Delete a Service Zone
         * @request DELETE:/vendor/fulfillment-sets/{id}/service-zones/{zone_id}
         * @secure
         */
        vendorDeleteServiceZoneById: (id: string, zoneId: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Service Zone. */
            id?: string;
            /**
             * The type of the object that was deleted.
             * @default "service_zone"
             */
            object?: string;
            /**
             * Whether or not the items were deleted.
             * @default true
             */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves list of InventoryItems
         *
         * @tags Product
         * @name VendorListInventoryItem
         * @summary List InventoryItems
         * @request GET:/vendor/inventory-items
         * @secure
         */
        vendorListInventoryItem: (params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Retrieves InventoryItem of specified id
         *
         * @tags Product
         * @name VendorGetInventoryItem
         * @summary Get inventory item
         * @request GET:/vendor/inventory-items/{id}
         * @secure
         */
        vendorGetInventoryItem: (id: string, params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Updates InventoryItem of specified id
         *
         * @tags Product
         * @name VendorUpdateInventoryItem
         * @summary Update inventory item
         * @request POST:/vendor/inventory-items/{id}
         * @secure
         */
        vendorUpdateInventoryItem: (id: string, data: VendorUpdateInventoryItem, params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Retrieves inventory levels of the InventoryItem
         *
         * @tags Product
         * @name VendorGetItemInventoryLevel
         * @summary Get InventoryLevels of specified InventoryItem
         * @request GET:/vendor/inventory-items/{id}/location-levels
         * @secure
         */
        vendorGetItemInventoryLevel: (id: string, params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Creates inventory level of the InventoryItem in the specified location
         *
         * @tags Product
         * @name VendorCreateInventoryLevel
         * @summary Create inventory level
         * @request POST:/vendor/inventory-items/{id}/location-levels
         * @secure
         */
        vendorCreateInventoryLevel: (id: string, data: VendorCreateInventoryLevel, params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Retrieves inventory level of the InventoryItem in the specified location
         *
         * @tags Product
         * @name VendorGetInventoryLevel
         * @summary Get inventory level
         * @request GET:/vendor/inventory-items/{id}/location-levels/{location_id}
         * @secure
         */
        vendorGetInventoryLevel: (id: string, locationId: string, params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Updates inventory level of the InventoryItem in the specified location
         *
         * @tags Product
         * @name VendorUpdateInventoryLevel
         * @summary Update inventory level
         * @request POST:/vendor/inventory-items/{id}/location-levels/{location_id}
         * @secure
         */
        vendorUpdateInventoryLevel: (id: string, locationId: string, data: VendorUpdateInventoryLevel, params?: RequestParams) => Promise<HttpResponse<void, any>>;
        /**
         * @description Retrieves a list of member invites for the authenticated vendor.
         *
         * @tags Member
         * @name VendorListInvites
         * @summary List Member Invites
         * @request GET:/vendor/invites
         * @secure
         */
        vendorListInvites: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
            /** Field used to order the results. */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            invites?: VendorMemberInvite[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a new member invite for the authenticated vendor.
         *
         * @tags Member
         * @name VendorCreateInvite
         * @summary Create a Member Invite
         * @request POST:/vendor/invites
         * @secure
         */
        vendorCreateInvite: (data: VendorInviteMember, params?: RequestParams) => Promise<HttpResponse<{
            /** A member invite object with its properties */
            invite?: VendorMemberInvite;
        }, any>>;
        /**
         * @description Accepts a member invite using the provided token and creates a new member.
         *
         * @tags Member
         * @name VendorAcceptInvite
         * @summary Accept a Member Invite
         * @request POST:/vendor/invites/{id}/accept
         * @secure
         */
        vendorAcceptInvite: (id: string, data: VendorAcceptMemberInvite, params?: RequestParams) => Promise<HttpResponse<{
            /** A member invite object with its properties */
            invite?: VendorMemberInvite;
        }, any>>;
        /**
         * @description Retrieves the member associated with the authenticated user.
         *
         * @tags Member
         * @name VendorGetMemberMe
         * @summary Get Current Member
         * @request GET:/vendor/me
         * @secure
         */
        vendorGetMemberMe: (params?: RequestParams) => Promise<HttpResponse<{
            /** A member object with its properties */
            member?: VendorMember;
        }, any>>;
        /**
         * @description Retrieves a list of members.
         *
         * @tags Member
         * @name VendorListMembers
         * @summary List Members
         * @request GET:/vendor/members
         * @secure
         */
        vendorListMembers: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
            /** Comma-separated relations that should be expanded in the returned data. */
            expand?: string;
            /** Field used to order the results. */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            members?: VendorMember[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a member by id.
         *
         * @tags Member
         * @name VendorGetMemberById
         * @summary Get a Member
         * @request GET:/vendor/members/{id}
         * @secure
         */
        vendorGetMemberById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** A member object with its properties */
            member?: VendorMember;
        }, any>>;
        /**
         * @description Updates a member by id for the authenticated vendor.
         *
         * @tags Member
         * @name VendorUpdateMemberById
         * @summary Update a Member
         * @request POST:/vendor/members/{id}
         * @secure
         */
        vendorUpdateMemberById: (id: string, data: VendorUpdateMember, params?: RequestParams) => Promise<HttpResponse<{
            /** A member object with its properties */
            member?: VendorMember;
        }, any>>;
        /**
         * @description Deletes a member by id.
         *
         * @tags Member
         * @name VendorDeleteMemberById
         * @summary Delete a Member
         * @request DELETE:/vendor/members/{id}
         * @secure
         */
        vendorDeleteMemberById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Member */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves a list of orders for the authenticated vendor.
         *
         * @tags Order
         * @name VendorListOrders
         * @summary List Orders
         * @request GET:/vendor/orders
         * @secure
         */
        vendorListOrders: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
            /** The order of the returned items. */
            order?: string;
            /** Filter by created at date range */
            created_at?: object;
            /** Filter by order status */
            status?: string | string[] | object;
            /** Filter by fulfillment status */
            fulfillment_status?: string;
            /** Filter by payment status */
            payment_status?: string;
            /** Search query for filtering orders */
            q?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            orders?: VendorOrderDetails[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves the details of specified order.
         *
         * @tags Order
         * @name VendorGetOrder
         * @summary Get Order details
         * @request GET:/vendor/orders/{id}
         * @secure
         */
        vendorGetOrder: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The order's details. */
            order?: VendorOrderDetails;
        }, any>>;
        /**
         * @description Mark order as cancelled.
         *
         * @tags Order
         * @name VendorCancelOrder
         * @summary Mark order as cancelled
         * @request POST:/vendor/orders/{id}/cancel
         * @secure
         */
        vendorCancelOrder: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The order's details. */
            member?: VendorOrderDetails;
        }, any>>;
        /**
         * @description Mark order as complete.
         *
         * @tags Order
         * @name VendorCompleteOrder
         * @summary Mark order as complete
         * @request POST:/vendor/orders/{id}/complete
         * @secure
         */
        vendorCompleteOrder: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The order's details. */
            member?: VendorOrderDetails;
        }, any>>;
        /**
         * @description Retrieves the payout account for the authenticated vendor.
         *
         * @tags Payment Account
         * @name VendorGetPayoutAccount
         * @summary Get Payout Account
         * @request GET:/vendor/payout-account
         * @secure
         */
        vendorGetPayoutAccount: (query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A payout account object with its properties */
            payout_account?: VendorPayoutAccount;
        }, any>>;
        /**
         * @description Creates a payout account for the authenticated vendor.
         *
         * @tags Payment Account
         * @name VendorCreatePayoutAccount
         * @summary Create Payout Account
         * @request POST:/vendor/payout-account
         * @secure
         */
        vendorCreatePayoutAccount: (data: VendorCreatePayoutAccount, params?: RequestParams) => Promise<HttpResponse<{
            /** A payout account object with its properties */
            payout_account?: VendorPayoutAccount;
        }, any>>;
        /**
         * @description Creates an onboarding for the authenticated vendor's payout account.
         *
         * @tags Payment Account
         * @name VendorCreateOnboarding
         * @summary Create Onboarding
         * @request POST:/vendor/payout-account/onboarding
         * @secure
         */
        vendorCreateOnboarding: (data: VendorCreateOnboarding, params?: RequestParams) => Promise<HttpResponse<{
            /** A payout account object with its properties */
            payout_account?: VendorPayoutAccount;
        }, any>>;
        /**
         * @description Retrieves a list of price lists.
         *
         * @tags Price Lists
         * @name VendorListPriceLists
         * @summary List Price lists
         * @request GET:/vendor/price-lists
         * @secure
         */
        vendorListPriceLists: (query?: {
            /** The number of items to return. Default 50. */
            limit?: number;
            /** The number of items to skip before starting the response. Default 0. */
            offset?: number;
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            price_lists?: VendorPriceList[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates new price list
         *
         * @tags Price Lists
         * @name VendorCreatePriceList
         * @summary Create price list
         * @request POST:/vendor/price-lists
         * @secure
         */
        vendorCreatePriceList: (data: VendorCreatePriceList, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The price list's details. */
            price_list?: VendorPriceList;
        }, any>>;
        /**
         * @description Retrieves the details of specified price list.
         *
         * @tags Price Lists
         * @name VendorGetPriceListById
         * @summary Get price list details
         * @request GET:/vendor/price-lists/{id}
         * @secure
         */
        vendorGetPriceListById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The price list's details. */
            price_list?: VendorPriceList;
        }, any>>;
        /**
         * @description Updates price list price
         *
         * @tags Price Lists
         * @name VendorUpdatePriceList
         * @summary Update price list
         * @request POST:/vendor/price-lists/{id}
         * @secure
         */
        vendorUpdatePriceList: (id: string, data: VendorUpdatePriceList, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The price list's details. */
            price_list?: VendorPriceList;
        }, any>>;
        /**
         * @description Delete a price list.
         *
         * @tags Price Lists
         * @name VendorDeletePriceListsId
         * @summary Delete a Price List
         * @request DELETE:/vendor/price-lists/{id}
         * @secure
         */
        vendorDeletePriceListsId: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Price list */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Creates new price list price
         *
         * @tags Price Lists
         * @name VendorCreatePriceListPrice
         * @summary Create price list
         * @request POST:/vendor/price-lists/{id}/prices
         * @secure
         */
        vendorCreatePriceListPrice: (id: string, data: VendorCreatePriceListPrice, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The price list's details. */
            price_list?: VendorPriceList;
        }, any>>;
        /**
         * @description Deletes price list price by id.
         *
         * @tags Price Lists
         * @name VendorDeletePriceListPriceById
         * @summary Deletes price list price
         * @request DELETE:/vendor/price-lists/{id}/prices/{price_id}
         * @secure
         */
        vendorDeletePriceListPriceById: (id: string, priceId: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Price */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves a list of product tags.
         *
         * @tags Product
         * @name VendorListProductTags
         * @summary List product tags
         * @request GET:/vendor/product-tags
         * @secure
         */
        vendorListProductTags: (query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
        }, params?: RequestParams) => Promise<HttpResponse<{
            product_tags?: VendorProductTag[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates new product tag
         *
         * @tags Product
         * @name VendorCreateProductTag
         * @summary Create product tag
         * @request POST:/vendor/product-tags
         * @secure
         */
        vendorCreateProductTag: (data: VendorCreateProductTag, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product tag object with its properties */
            product_tag?: VendorProductTag;
        }, any>>;
        /**
         * @description Retrieves product tag by id.
         *
         * @tags Product
         * @name VendorGetProductTagById
         * @summary Get product tag
         * @request GET:/vendor/product-tags/{id}
         * @secure
         */
        vendorGetProductTagById: (id: string, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product tag object with its properties */
            product_tag?: VendorProductTag;
        }, any>>;
        /**
         * @description Retrieves a list of product types.
         *
         * @tags Product
         * @name VendorListProductTypes
         * @summary List product types
         * @request GET:/vendor/product-types
         * @secure
         */
        vendorListProductTypes: (query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
        }, params?: RequestParams) => Promise<HttpResponse<{
            product_types?: VendorProductType[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves product type by id.
         *
         * @tags Product
         * @name VendorGetProductTypeById
         * @summary Get product type
         * @request GET:/vendor/product-types/{id}
         * @secure
         */
        vendorGetProductTypeById: (id: string, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product type object with its properties */
            product_type?: VendorProductType;
        }, any>>;
        /**
         * @description Retrieves a list of products for the authenticated vendor.
         *
         * @tags Product
         * @name VendorListProducts
         * @summary List Products
         * @request GET:/vendor/products
         * @secure
         */
        vendorListProducts: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
            /** The order of the returned items. */
            order?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            products?: VendorProduct[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a new product for the authenticated vendor.
         *
         * @tags Product
         * @name VendorCreateProduct
         * @summary Create a Product
         * @request POST:/vendor/products
         * @secure
         */
        vendorCreateProduct: (data: VendorCreateProduct, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Retrieves a product by id for the authenticated vendor.
         *
         * @tags Product
         * @name VendorGetProductById
         * @summary Get a Product
         * @request GET:/vendor/products/{id}
         * @secure
         */
        vendorGetProductById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Updates an existing product for the authenticated vendor.
         *
         * @tags Product
         * @name VendorUpdateProductById
         * @summary Update a Product
         * @request POST:/vendor/products/{id}
         * @secure
         */
        vendorUpdateProductById: (id: string, data: VendorUpdateProduct, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Deletes a product by id for the authenticated vendor.
         *
         * @tags Product
         * @name VendorDeleteProductById
         * @summary Delete a Product
         * @request DELETE:/vendor/products/{id}
         * @secure
         */
        vendorDeleteProductById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Product */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Upserts brand and links to the product
         *
         * @tags Product
         * @name VendorAssignBrandToProduct
         * @summary Assign brand to the Product
         * @request POST:/vendor/products/{id}/brand
         * @secure
         */
        vendorAssignBrandToProduct: (id: string, data: VendorAssignBrandName, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Updates an existing product for the authenticated vendor.
         *
         * @tags Order
         * @name VendorCreateFulfillment
         * @summary Update a Product
         * @request POST:/vendor/products/{id}/fulfillment
         * @secure
         */
        vendorCreateFulfillment: (id: string, data: VendorCreateFulfillment, params?: RequestParams) => Promise<HttpResponse<{
            /** The fulfillment's details. */
            fulfillment?: VendorOrderFulfillment;
        }, any>>;
        /**
         * @description Creates option for product.
         *
         * @tags Product
         * @name VendorCreateOptionForProductById
         * @summary Create option for product
         * @request POST:/vendor/products/{id}/options
         * @secure
         */
        vendorCreateOptionForProductById: (id: string, data: CreateProductOption, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Updates an existing product option for the authenticated vendor.
         *
         * @tags Product
         * @name VendorUpdateProductOptionById
         * @summary Update a Product option
         * @request POST:/vendor/products/{id}/options/{option_id}
         * @secure
         */
        vendorUpdateProductOptionById: (id: string, optionId: string, data: UpdateProductOption, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Deletes a product option by id for the authenticated vendor.
         *
         * @tags Product
         * @name VendorDeleteProductOptionById
         * @summary Delete a Product option
         * @request DELETE:/vendor/products/{id}/options/{option_id}
         * @secure
         */
        vendorDeleteProductOptionById: (id: string, optionId: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Product option */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Creates variant for product.
         *
         * @tags Product
         * @name VendorCreateVariantForProductById
         * @summary Create variant for product
         * @request POST:/vendor/products/{id}/variants
         * @secure
         */
        vendorCreateVariantForProductById: (id: string, data: CreateProductVariant, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Updates an existing product variant for the authenticated vendor.
         *
         * @tags Product
         * @name VendorUpdateProductVariantById
         * @summary Update a Product variant
         * @request POST:/vendor/products/{id}/variants/{variant_id}
         * @secure
         */
        vendorUpdateProductVariantById: (id: string, variantId: string, data: UpdateProductVariant, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product object with its properties */
            product?: VendorProduct;
        }, any>>;
        /**
         * @description Deletes a product variant by id for the authenticated vendor.
         *
         * @tags Product
         * @name VendorDeleteProductVariantById
         * @summary Delete a Product variant
         * @request DELETE:/vendor/products/{id}/variants/{variant_id}
         * @secure
         */
        vendorDeleteProductVariantById: (id: string, variantId: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Product variant */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves a list of promotions for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorListPromotions
         * @summary List Promotions
         * @request GET:/vendor/promotions
         * @secure
         */
        vendorListPromotions: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            promotions?: VendorPromotion[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a new promotion for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorCreatePromotion
         * @summary Create promotion
         * @request POST:/vendor/promotions
         * @secure
         */
        vendorCreatePromotion: (data: VendorCreatePromotion, params?: RequestParams) => Promise<HttpResponse<{
            /** Promotion object */
            promotion?: VendorPromotion;
        }, any>>;
        /**
         * @description Retrieves promotion by id for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorGetPromotionById
         * @summary Get promotion
         * @request GET:/vendor/promotions/{id}
         * @secure
         */
        vendorGetPromotionById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** Promotion object */
            promotion?: VendorPromotion;
        }, any>>;
        /**
         * @description Deletes promotion by id for the authenticated vendor.
         *
         * @tags Promotion
         * @name VendorDeletePromotionById
         * @summary Delete promotion
         * @request DELETE:/vendor/promotions/{id}
         * @secure
         */
        vendorDeletePromotionById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted promotion */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves submited requests list
         *
         * @tags Requests
         * @name VendorListRequests
         * @summary List requests
         * @request GET:/vendor/requests
         * @secure
         */
        vendorListRequests: (query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            requests?: VendorRequest[];
            /** The total number of requests */
            count?: number;
            /** The number of requests skipped */
            offset?: number;
            /** The number of requests per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a request to admin to accept new resource
         *
         * @tags Requests
         * @name VendorCreateRequest
         * @summary Create a request to admin
         * @request POST:/vendor/requests
         * @secure
         */
        vendorCreateRequest: (data: VendorCreateRequest, params?: RequestParams) => Promise<HttpResponse<{
            /** A request object */
            request?: VendorRequest;
        }, any>>;
        /**
         * @description Retrieves a request by id for the authenticated vendor.
         *
         * @tags Requests
         * @name VendorGetRequestById
         * @summary Get request by id
         * @request GET:/vendor/requests/{id}
         * @secure
         */
        vendorGetRequestById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A request object */
            request?: VendorRequest;
        }, any>>;
        /**
         * @description Retrieves a list of reservations for the authenticated vendor.
         *
         * @tags Reservations
         * @name VendorListReservations
         * @summary List Reservations
         * @request GET:/vendor/reservations
         * @secure
         */
        vendorListReservations: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            reservations?: VendorReservation[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves reservation by id for the authenticated vendor.
         *
         * @tags Reservations
         * @name VendorGetReservationById
         * @summary Get reservation
         * @request GET:/vendor/reservations/{id}
         * @secure
         */
        vendorGetReservationById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The reservation's details. */
            reservation?: VendorReservation;
        }, any>>;
        /**
         * @description Updates an existing reservation for the authenticated vendor.
         *
         * @tags Reservations
         * @name VendorUpdateReservationById
         * @summary Update reservation
         * @request POST:/vendor/reservations/{id}
         * @secure
         */
        vendorUpdateReservationById: (id: string, data: VendorUpdateReservation, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The reservation's details. */
            reservation?: VendorReservation;
        }, any>>;
        /**
         * @description Deletes reservation by id for the authenticated vendor.
         *
         * @tags Reservations
         * @name VendorDeleteReservationById
         * @summary Delete reservation
         * @request DELETE:/vendor/reservations/{id}
         * @secure
         */
        vendorDeleteReservationById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted reservation */
            id?: string;
            /** The type of the object that was deleted */
            object?: string;
            /** Whether or not the items were deleted */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves requests list
         *
         * @tags OrderReturnRequest
         * @name VendorListOrderReturnRequests
         * @summary List return requests
         * @request GET:/vendor/return-request
         * @secure
         */
        vendorListOrderReturnRequests: (query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            order_return_request?: OrderReturnRequest[];
            /** The total number of requests */
            count?: number;
            /** The number of requests skipped */
            offset?: number;
            /** The number of requests per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a request by id for the authenticated vendor.
         *
         * @tags OrderReturnRequest
         * @name VendorGetOrderReturnRequestById
         * @summary Get return request by id
         * @request GET:/vendor/return-request/{id}
         * @secure
         */
        vendorGetOrderReturnRequestById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A return request object with its properties */
            orderReturnRequest?: OrderReturnRequest;
        }, any>>;
        /**
         * @description Updates a request by id for the authenticated vendor.
         *
         * @tags OrderReturnRequest
         * @name VendorUpdateOrderReturnRequestById
         * @summary Update return request by id
         * @request POST:/vendor/return-request/{id}
         * @secure
         */
        vendorUpdateOrderReturnRequestById: (id: string, data: VendorUpdateOrderReturnRequest, params?: RequestParams) => Promise<HttpResponse<{
            /** A return request object with its properties */
            orderReturnRequest?: OrderReturnRequest;
        }, any>>;
        /**
         * @description Retrieves a list of returns for the authenticated vendor.
         *
         * @tags Return
         * @name VendorListReturns
         * @summary List Returns
         * @request GET:/vendor/returns
         * @secure
         */
        vendorListReturns: (query?: {
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            returns?: VendorReturn[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves return by id for the authenticated vendor.
         *
         * @tags Return
         * @name VendorGetReturnById
         * @summary Get return
         * @request GET:/vendor/returns/{id}
         * @secure
         */
        vendorGetReturnById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Add damaged items, whose quantity is to be dismissed, to a return.
         *
         * @tags Return
         * @name VendorAddDismissReturnItemById
         * @summary Add Damaged Item to Return
         * @request POST:/vendor/returns/{id}/dismiss-items
         * @secure
         */
        vendorAddDismissReturnItemById: (id: string, data: VendorReceiveReturnItems, query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Update a damaged item, whose quantity is to be dismissed, in the return by the ID of the  item's `RECEIVE_DAMAGED_RETURN_ITEM` action.
         *
         * @tags Return
         * @name VendorUpdateDismissReturnItemById
         * @summary Update Damaged Item of Return
         * @request POST:/vendor/returns/{id}/dismiss-items/{action_id}
         * @secure
         */
        vendorUpdateDismissReturnItemById: (id: string, actionId: string, data: VendorReturnsDismissItemsAction, query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Remove a damaged item, whose quantity is to be dismissed, in the return by the ID of the  item's `RECEIVE_DAMAGED_RETURN_ITEM` action.
         *
         * @tags Return
         * @name VendorDismissReturnItemById
         * @summary Remove Damaged Item from Return
         * @request DELETE:/vendor/returns/{id}/dismiss-items/{action_id}
         * @secure
         */
        vendorDismissReturnItemById: (id: string, actionId: string, query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Start a return receival process to be later confirmed.
         *
         * @tags Return
         * @name VendorReturnReceiveById
         * @summary Start Return Receival
         * @request POST:/vendor/returns/{id}/receive
         * @secure
         */
        vendorReturnReceiveById: (id: string, data: VendorReceiveReturn, query?: {
            /** Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Add received items to return.
         *
         * @tags Return
         * @name VendorAddReceiveReturnItemById
         * @summary Add received Item to Return
         * @request POST:/vendor/returns/{id}/receive-items
         * @secure
         */
        vendorAddReceiveReturnItemById: (id: string, data: VendorReceiveReturnItems, query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Update a received item.
         *
         * @tags Return
         * @name VendorUpdateReceiveReturnItemById
         * @summary Update received Item of Return
         * @request POST:/vendor/returns/{id}/receive-items/{action_id}
         * @secure
         */
        vendorUpdateReceiveReturnItemById: (id: string, actionId: string, data: VendorReturnsReceiveItemsAction, query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Remove a received item
         *
         * @tags Return
         * @name VendorReceiveReturnItemById
         * @summary Remove received Item from Return
         * @request DELETE:/vendor/returns/{id}/receive-items/{action_id}
         * @secure
         */
        vendorReceiveReturnItemById: (id: string, actionId: string, query?: {
            /** Comma-separated fields that should be included in the returned data. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Confirm a return receival process.
         *
         * @tags Return
         * @name VendorConfirmReturnReceiveById
         * @summary Confirm Return Receival
         * @request POST:/vendor/returns/{id}/receive/confirm
         * @secure
         */
        vendorConfirmReturnReceiveById: (id: string, query?: {
            /** Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The return's details. */
            return?: VendorReturn;
        }, any>>;
        /**
         * @description Retrieves a list of Sales Channels for authenticated vendor.
         *
         * @tags Seller, Sales-channel
         * @name VendorListSalesChannels
         * @summary List Sales Channels
         * @request GET:/vendor/sales-channels
         * @secure
         */
        vendorListSalesChannels: (params?: RequestParams) => Promise<HttpResponse<{
            sales_channels?: VendorSalesChannel[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a request to create a new seller with an initial owner member.
         *
         * @tags Seller
         * @name VendorCreateSeller
         * @summary Create a Seller
         * @request POST:/vendor/sellers
         * @secure
         */
        vendorCreateSeller: (data: VendorCreateSeller, params?: RequestParams) => Promise<HttpResponse<{
            /** A request object */
            request?: VendorRequest;
        }, any>>;
        /**
         * @description Retrieves the seller associated with the authenticated user.
         *
         * @tags Seller
         * @name VendorGetSellerMe
         * @summary Get Current Seller
         * @request GET:/vendor/sellers/me
         * @secure
         */
        vendorGetSellerMe: (params?: RequestParams) => Promise<HttpResponse<{
            /** A seller object with its properties */
            seller?: VendorSeller;
        }, any>>;
        /**
         * @description Updates the seller associated with the authenticated user.
         *
         * @tags Seller
         * @name VendorUpdateSellerMe
         * @summary Update Current Seller
         * @request POST:/vendor/sellers/me
         * @secure
         */
        vendorUpdateSellerMe: (data: VendorUpdateSeller, params?: RequestParams) => Promise<HttpResponse<{
            /** A seller object with its properties */
            seller?: VendorSeller;
        }, any>>;
        /**
         * @description Retrieves the onboarding details of the current authenticated seller.
         *
         * @tags Seller, Onboarding
         * @name VendorGetOnboardingStatus
         * @summary Get onboarding status of the current seller
         * @request GET:/vendor/sellers/me/onboarding
         * @secure
         */
        vendorGetOnboardingStatus: (params?: RequestParams) => Promise<HttpResponse<{
            /** An onboarding object with its properties */
            onboarding?: VendorSellerOnboarding;
        }, any>>;
        /**
         * @description Triggers onboarding status recalculation and retrieves the onboarding details of the current authenticated seller.
         *
         * @tags Seller, Onboarding
         * @name VendorRecalculateOnboardingStatus
         * @summary Recalculates onboarding status
         * @request POST:/vendor/sellers/me/onboarding
         * @secure
         */
        vendorRecalculateOnboardingStatus: (params?: RequestParams) => Promise<HttpResponse<{
            /** An onboarding object with its properties */
            onboarding?: VendorSellerOnboarding;
        }, any>>;
        /**
         * @description Retrieves the reviews about the seller associated with the authenticated user.
         *
         * @tags Seller, Review
         * @name VendorGetSellerMyReviews
         * @summary Get reviews of the current seller
         * @request GET:/vendor/sellers/me/reviews
         * @secure
         */
        vendorGetSellerMyReviews: (params?: RequestParams) => Promise<HttpResponse<{
            products?: Review[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a review by id for the authenticated vendor.
         *
         * @tags Seller, Review
         * @name VendorGetSellerReviewById
         * @summary Get a review by id
         * @request GET:/vendor/sellers/me/reviews/{id}
         * @secure
         */
        vendorGetSellerReviewById: (id: string, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product/seller review with rating and comment */
            product?: Review;
        }, any>>;
        /**
         * @description Updates seller_note for the review of specified id
         *
         * @tags Seller, Review
         * @name VendorUpdateReviewById
         * @summary Update a Review
         * @request POST:/vendor/sellers/me/reviews/{id}
         * @secure
         */
        vendorUpdateReviewById: (id: string, data: VendorUpdateReview, query?: {
            /** Comma-separated fields to include in the response. */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** A product/seller review with rating and comment */
            product?: Review;
        }, any>>;
        /**
         * @description Retrieves a list of Shipping Options for authenticated vendor.
         *
         * @tags Shipping Option
         * @name VendorListShippingOptions
         * @summary List Shipping Options
         * @request GET:/vendor/shipping-options
         * @secure
         */
        vendorListShippingOptions: (params?: RequestParams) => Promise<HttpResponse<{
            shipping_options?: VendorShippingOption[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Creates a Shipping Option for authenticated vendor.
         *
         * @tags Shipping Option
         * @name VendorCreateShippingOption
         * @summary Create a Shipping Option
         * @request POST:/vendor/shipping-options
         * @secure
         */
        vendorCreateShippingOption: (data: VendorCreateShippingOption, params?: RequestParams) => Promise<HttpResponse<{
            /** The shipping option's details. */
            shipping_option?: VendorShippingOption;
        }, any>>;
        /**
         * @description Retrieves a Shipping Option by its ID.
         *
         * @tags Shipping Option
         * @name VendorGetShippingOptionById
         * @summary Get a Shipping Option
         * @request GET:/vendor/shipping-options/{id}
         * @secure
         */
        vendorGetShippingOptionById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The shipping option's details. */
            shipping_option?: VendorShippingOption;
        }, any>>;
        /**
         * @description Updates a Shipping Option.
         *
         * @tags Shipping Option
         * @name VendorUpdateShippingOptionById
         * @summary Update a Shipping Option
         * @request POST:/vendor/shipping-options/{id}
         * @secure
         */
        vendorUpdateShippingOptionById: (id: string, data: VendorUpdateShippingOption, params?: RequestParams) => Promise<HttpResponse<{
            /** The shipping option's details. */
            shipping_option?: VendorShippingOption;
        }, any>>;
        /**
         * @description Deletes a Shipping Option.
         *
         * @tags Shipping Option
         * @name VendorDeleteShippingOptionById
         * @summary Delete a Shipping Option
         * @request DELETE:/vendor/shipping-options/{id}
         * @secure
         */
        vendorDeleteShippingOptionById: (id: string, params?: RequestParams) => Promise<HttpResponse<{
            /** The ID of the deleted Shipping Option. */
            id?: string;
            /**
             * The type of the object that was deleted.
             * @default "shipping_option"
             */
            object?: string;
            /**
             * Whether or not the items were deleted.
             * @default true
             */
            deleted?: boolean;
        }, any>>;
        /**
         * @description Retrieves store statistics.
         *
         * @tags Seller
         * @name VendorGetStoreStatistics
         * @summary GetStoreStatistics
         * @request GET:/vendor/statistics
         * @secure
         */
        vendorGetStoreStatistics: (query?: {
            time_from?: string;
            time_to?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            orders?: VendorDateStatistics[];
            customers?: VendorDateStatistics[];
        }, any>>;
        /**
         * @description Retrieves a list of Stock Locations.
         *
         * @tags Stock Location
         * @name VendorListStockLocations
         * @summary List Stock Locations
         * @request GET:/vendor/stock-locations
         * @secure
         */
        vendorListStockLocations: (query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            stock_locations?: VendorStockLocation[];
        }, any>>;
        /**
         * @description Creates a Stock Location.
         *
         * @tags Stock Location
         * @name VendorCreateStockLocation
         * @summary Create a Stock Location
         * @request POST:/vendor/stock-locations
         * @secure
         */
        vendorCreateStockLocation: (data: VendorCreateStockLocation, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The stock location's details. */
            stock_location?: VendorStockLocation;
        }, any>>;
        /**
         * @description Retrieves a Stock Location by id.
         *
         * @tags Stock Location
         * @name VendorGetStockLocation
         * @summary Get Stock Location
         * @request GET:/vendor/stock-locations/{id}
         * @secure
         */
        vendorGetStockLocation: (id: string, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The stock location's details. */
            stock_location?: VendorStockLocation;
        }, any>>;
        /**
         * @description Updates a Stock Location.
         *
         * @tags Stock Location
         * @name VendorUpdateStockLocation
         * @summary Update Stock Location
         * @request POST:/vendor/stock-locations/{id}
         * @secure
         */
        vendorUpdateStockLocation: (id: string, data: VendorUpdateStockLocation, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The stock location's details. */
            stock_location?: VendorStockLocation;
        }, any>>;
        /**
         * @description Updates the fulfillment providers of a Stock Location.
         *
         * @tags Stock Location
         * @name VendorUpdateStockLocationFulfillmentProviders
         * @summary Update Stock Location Fulfillment Providers
         * @request POST:/vendor/stock-locations/{id}/fulfillment-providers
         * @secure
         */
        vendorUpdateStockLocationFulfillmentProviders: (id: string, data: {
            /** Array of fulfillment provider IDs to add */
            add?: string[];
            /** Array of fulfillment provider IDs to remove */
            remove?: string[];
        }, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The stock location's details. */
            stock_location?: VendorStockLocation;
        }, any>>;
        /**
         * @description Creates a Fulfillment Set for a Stock Location.
         *
         * @tags Stock Location
         * @name VendorCreateStockLocationFulfillmentSet
         * @summary Create a Fulfillment Set
         * @request POST:/vendor/stock-locations/{id}/fulfillment-sets
         * @secure
         */
        vendorCreateStockLocationFulfillmentSet: (id: string, data: VendorCreateStockLocationFulfillmentSet, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The stock location's details. */
            stock_location?: VendorStockLocation;
        }, any>>;
        /**
         * @description Updates the sales channels of a Stock Location.
         *
         * @tags Stock Location
         * @name VendorUpdateStockLocationSalesChannels
         * @summary Update Stock Location Sales Channels
         * @request POST:/vendor/stock-locations/{id}/sales-channels
         * @secure
         */
        vendorUpdateStockLocationSalesChannels: (id: string, data: {
            /** Array of sales channel IDs to add */
            add?: string[];
            /** Array of sales channel IDs to remove */
            remove?: string[];
        }, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** The stock location's details. */
            stock_location?: VendorStockLocation;
        }, any>>;
        /**
         * @description Retrieves a list of stores.
         *
         * @tags Store
         * @name VendorListStores
         * @summary List Stores
         * @request GET:/vendor/stores
         * @secure
         */
        vendorListStores: (query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
            /** The number of items to skip before starting to collect the result set. */
            offset?: number;
            /** The number of items to return. */
            limit?: number;
        }, params?: RequestParams) => Promise<HttpResponse<{
            stores?: VendorStore[];
            /** The total number of items available */
            count?: number;
            /** The number of items skipped before these items */
            offset?: number;
            /** The number of items per page */
            limit?: number;
        }, any>>;
        /**
         * @description Retrieves a Store by id.
         *
         * @tags Store
         * @name VendorGetStoreById
         * @summary Get store
         * @request GET:/vendor/stores/{id}
         * @secure
         */
        vendorGetStoreById: (id: string, query?: {
            /** The comma-separated fields to include in the response */
            fields?: string;
        }, params?: RequestParams) => Promise<HttpResponse<{
            /** Store object. */
            store?: VendorStore;
        }, any>>;
    };
}
export {};
//# sourceMappingURL=index.d.ts.map